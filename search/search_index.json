{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EdgarTools","text":"<p>Powerful Python library for SEC data analysis and financial research</p> <p>EdgarTools makes it simple to access, analyze, and extract insights from SEC filings. Whether you're analyzing company financials, tracking insider trading, or researching investment funds, edgartools provides the tools you need.</p>"},{"location":"#what-you-can-do","title":"What You Can Do","text":"<p>Analyze Company Financials</p> <p>Extract financial statements, calculate ratios, and track performance over time.</p> <pre><code>company = Company(\"AAPL\")\nfinancials = company.get_financials()\nincome_statement = financials.income_statement()\n</code></pre> <p>Track Insider Trading</p> <p>Monitor insider transactions from Forms 3, 4, and 5 with structured data objects.</p> <pre><code>filings = company.get_filings(form=\"4\").head(10)\ntransactions = pd.concat([f.obj()\n                         .to_dataframe()\n                         .fillna('')\n                for f in filings])\n</code></pre> <p>Research Investment Funds</p> <p>Analyze 13F holdings, track portfolio changes, and compare fund strategies.</p> <pre><code>fund = Company(\"BRK-A\")\nholdings = fund.get_filings(form=\"13F-HR\").latest().obj()\n</code></pre> <p>Extract Filing Data</p> <p>Access any SEC filing since 1994 with clean, structured data extraction.</p> <pre><code>filing = company.get_filings(form=\"10-K\").latest()\ntext = filing.text()  # Clean, readable text\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#easy-to-use","title":"\ud83d\ude80 Easy to Use","text":"<ul> <li>Simple, intuitive API designed for both beginners and experts</li> <li>Comprehensive documentation with real-world examples</li> <li>Smart defaults that handle edge cases automatically</li> </ul>"},{"location":"#complete-sec-data-access","title":"\ud83d\udcca Complete SEC Data Access","text":"<ul> <li>All filing types: 10-K, 10-Q, 8-K, 13F, Form 4, S-1, and more</li> <li>Historical data: Access filings back to 1994</li> <li>Real-time data: Get the latest filings as they're published</li> </ul>"},{"location":"#advanced-xbrl-support","title":"\ud83d\udd0d Advanced XBRL Support","text":"<ul> <li>Extract structured financial data from XBRL filings</li> <li>Query individual financial line items with standardized concepts</li> <li>Handle complex financial statement hierarchies automatically</li> </ul>"},{"location":"#performance-optimized","title":"\u26a1 Performance Optimized","text":"<ul> <li>Efficient data handling for large datasets</li> <li>Local caching to minimize API calls</li> <li>Batch processing capabilities for bulk analysis</li> </ul>"},{"location":"#developer-friendly","title":"\ud83d\udee0 Developer Friendly","text":"<ul> <li>Type hints and comprehensive error handling</li> <li>Jupyter notebook integration with rich display</li> <li>Pandas DataFrames for seamless data analysis</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install edgartools with pip:</p> <pre><code>pip install edgartools\n</code></pre> <p>Or use uv for faster installation:</p> <pre><code>uv pip install edgartools\n</code></pre>"},{"location":"#get-started-in-2-minutes","title":"Get Started in 2 Minutes","text":"<ol> <li>Install and set your identity (required by SEC):</li> </ol> <pre><code>from edgar import *\nset_identity(\"your.name@email.com\")\n</code></pre> <ol> <li>Find a company and get their latest financial data:</li> </ol> <pre><code>company = Company(\"TSLA\")\nlatest_10k = company.get_filings(form=\"10-K\").latest()\nfinancials = latest_10k.obj().financials()\n</code></pre> <p>`</p>"},{"location":"#popular-use-cases","title":"Popular Use Cases","text":""},{"location":"#financial-analysis","title":"Financial Analysis","text":"<ul> <li>Compare companies across industries</li> <li>Track financial performance over time</li> <li>Calculate and analyze financial ratios</li> <li>Build custom financial dashboards</li> </ul>"},{"location":"#investment-research","title":"Investment Research","text":"<ul> <li>Analyze fund holdings and strategy changes</li> <li>Track insider buying and selling activity</li> <li>Monitor material events through 8-K filings</li> <li>Research IPOs and new offerings</li> </ul>"},{"location":"#academic-research","title":"Academic Research","text":"<ul> <li>Large-scale financial data analysis</li> <li>Corporate governance studies</li> <li>Market efficiency research</li> <li>Regulatory compliance analysis</li> </ul>"},{"location":"#aiml-applications","title":"AI/ML Applications","text":"<ul> <li>Extract clean text for natural language processing</li> <li>Build predictive models with financial data</li> <li>Automate document analysis workflows</li> <li>Create training datasets for financial AI</li> </ul>"},{"location":"#why-choose-edgartools","title":"Why Choose EdgarTools?","text":"Feature EdgarTools Alternative Solutions Ease of Use \u2705 Simple, Pythonic API \u274c Complex setup required Data Quality \u2705 Clean, standardized data \u26a0\ufe0f Raw data needs processing Performance \u2705 Optimized for large datasets \u274c Slow for bulk operations Documentation \u2705 Comprehensive with examples \u26a0\ufe0f Limited examples Active Development \u2705 Regular updates and features \u274c Infrequent updates Community \u2705 Growing user base \u26a0\ufe0f Limited community"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udcd6 Documentation: Comprehensive guides and API reference</li> <li>\ud83d\udcac GitHub Discussions: Ask questions and share insights</li> <li>\ud83d\udc1b Issue Tracker: Report bugs and request features</li> <li>\ud83d\udce7 Email Support: Direct support for enterprise users</li> </ul>"},{"location":"#support-the-project","title":"Support the Project","text":"<p>If you find EdgarTools useful, please consider supporting its development:</p> <p> </p> <p>Your support helps maintain and improve EdgarTools for the entire community!</p>"},{"location":"#whats-next","title":"What's Next?","text":"<p>Installation Guide</p> <p>Complete setup instructions and troubleshooting</p> <p>Quick Start Tutorial</p> <p>Your first analysis in 5 minutes</p> <p>API Reference</p> <p>Complete documentation of all classes and methods</p> <p>Examples &amp; Recipes</p> <p>Real-world analysis patterns and code templates</p> <p>Ready to start analyzing SEC data? Install EdgarTools and begin your first analysis today.</p>"},{"location":"company-financials/","title":"Company Financials","text":""},{"location":"company-financials/#getting-company-financials","title":"Getting company financials","text":"<p>The easiest way to get company financials is to use the <code>Company.financials</code> property.</p> <pre><code>from edgar import Company\n\ncompany = Company(\"AAPL\")\nfinancials = company.financials\n</code></pre> <p>The <code>financials</code> property returns a <code>Financials</code> instance. This instance has methods that return the balance sheet, income statement and cash flow statement.</p> <pre><code>balance_sheet = financials.balance_sheet\nincome_statement = financials.income\ncash_flow_statement = financials.cash_flow\n</code></pre>"},{"location":"company-financials/#financials-for-multiple-years","title":"Financials for multiple years","text":"<p>The <code>MultiFinancials</code> class can be used to get financials for multiple years. To use it first you need to get the filings for the years you want.</p> <pre><code>from edgar import MultiFinancials\n\nfilings = company.latest(\"10-K\", 5)\nfinancials = MultiFinancials.extract(filings)\n</code></pre> <p>The <code>financials</code> property returns a <code>MultiFinancials</code> instance. This instance has methods that return the balance sheet, income statement and cash flow statement.</p> <pre><code>balance_sheet = financials.balance_sheet\nincome_statement = financials.income\ncash_flow_statement = financials.cash_flow\n</code></pre>"},{"location":"company/","title":"Company API","text":"<p>With the company API you find a company using the cik or ticker.  From the company you can access all their historical filings, and a dataset of the company facts. The SEC's company API also supplies a lot more details about a company including industry, the SEC filer type, the mailing and business address and much more.</p>"},{"location":"company/#find-by-ticker","title":"Find by Ticker","text":"<pre><code>c = Company(\"AAPL\")\n</code></pre> <p>Tickers are case-insensitive so you can use <code>Company(\"aapl\")</code> or <code>Company(\"AAPL\")</code></p>"},{"location":"company/#find-by-cik","title":"Find by CIK","text":"<p>The cik uniquely identifies a company or entity at the SEC.</p> <pre><code>c = Company(320193)\n</code></pre> <p>CIKS can also be strings which may or may not be zero padded to 10 places.</p> <pre><code>c = Company(\"0000320193\") \n# OR \nc = Company(\"320193\")\n</code></pre>"},{"location":"company/#find-a-company-using-the-cik","title":"Find a company using the cik","text":"<p>The cik is the id that uniquely identifies a company at the SEC. It is a number, but is sometimes shown in SEC Edgar resources as a string padded with leading zero's. For the edgar client API, just use the numbers and omit the leading zeroes.</p> <pre><code>company = Company(1318605)\n</code></pre> <p></p>"},{"location":"company/#find-a-company-using-ticker","title":"Find a company using ticker","text":"<p>You can get a company using a ticker e.g. SNOW. This will do a lookup for the company cik using the ticker, then load the company using the cik. This makes it two calls versus one for the cik company lookup, but is sometimes more convenient since tickers are easier to remember that ciks.</p> <p>Note that some companies have multiple tickers, so you technically cannot get SEC filings for a ticker. You instead get the SEC filings for the company to which the ticker belongs.</p> <p>The ticker is case-insensitive so you can use <code>Company(\"snow\")</code> or <code>Company(\"SNOW\")</code></p> <pre><code>snow = Company(\"snow\")\n</code></pre> <p></p> <pre><code>Company(1832950)\n</code></pre>"},{"location":"company/#get-filings-for-a-company","title":"Get filings for a company","text":"<p>To get the company's filings use <code>get_filings()</code>. This gets all the company's filings that are available from the Edgar submissions endpoint.</p> <pre><code>company.get_filings()\n</code></pre>"},{"location":"company/#filtering-filings","title":"Filtering filings","text":"<p>You can filter the company filings using a number of different parameters.</p> <pre><code>class CompanyFilings:\n\n    ...\n\n    def get_filings(self,\n                    *,\n                    form: str | List = None,\n                    accession_number: str | List = None,\n                    file_number: str | List = None,\n                    is_xbrl: bool = None,\n                    is_inline_xbrl: bool = None\n                    ):\n        \"\"\"\n        Get the company's filings and optionally filter by multiple criteria\n        :param form: The form as a string e.g. '10-K' or List of strings ['10-Q', '10-K']\n        :param accession_number: The accession number that uniquely identifies an SEC filing e.g. 0001640147-22-000100\n        :param file_number: The file number e.g. 001-39504\n        :param is_xbrl: Whether the filing is xbrl\n        :param is_inline_xbrl: Whether the filing is inline_xbrl\n        :return: The CompanyFiling instance with the filings that match the filters\n        \"\"\"\n</code></pre>"},{"location":"company/#the-companyfilings-class","title":"The CompanyFilings class","text":"<p>The result of <code>get_filings()</code> is a <code>CompanyFilings</code> class. This class contains a pyarrow table with the filings and provides convenient functions for working with filings. You can access the underlying pyarrow <code>Table</code> using the <code>.data</code> property</p> <pre><code>filings = company.get_filings()\n\n# Get the underlying Table\ndata: pa.Table = filings.data\n</code></pre>"},{"location":"company/#get-a-filing-by-index","title":"Get a filing by index","text":"<p>To access a filing in the CompanyFilings use the bracket <code>[]</code> notation e.g. <code>filings[2]</code></p> <pre><code>filings[2]\n</code></pre>"},{"location":"company/#get-the-latest-filing","title":"Get the latest filing","text":"<p>The <code>CompanyFilings</code> class has a <code>latest</code> function that will return the latest <code>Filing</code>.  So, to get the latest 10-Q filing, you do the following</p> <pre><code># Latest filing makes sense if you filter by form  type e.g. 10-Q\nsnow_10Qs = snow.get_filings(form='10-Q')\nlatest_10Q = snow_10Qs.latest()\n\n# Or chain the function calls\nsnow.get_filings(form='10-Q').latest()\n</code></pre>"},{"location":"company/#get-company-facts","title":"Get company facts","text":"<p>Facts are an interesting and important dataset about a company accumlated from data the company provides to the SEC. Company facts are available for a company on the Company Facts<code>f\"https://data.sec.gov/api/xbrl/companyfacts/CIK{cik:010}.json\"</code> It is a JSON endpoint and <code>edgartools</code> parses the JSON into a structured dataset - a <code>pyarrow.Table</code>.</p>"},{"location":"company/#getting-facts-for-a-company","title":"Getting facts for a company","text":"<p>To get company facts, first get the company, then call <code>company.get_facts()</code></p> <pre><code>company = Company(\"SNOW\")\ncompany_facts = company.get_facts_for_namespace()\n</code></pre> <p>The result is a <code>CompanyFacts</code> object which wraps the underlying facts and provides convenient ways of working with the facts data. To get access to the underyling data use the <code>facts</code> property.</p> <p>You can get the facts as a pandas dataframe by calling <code>to_pandas</code></p> <pre><code>df = company_facts.to_pandas()\n</code></pre> <p>Facts differ among companies. To see what facts are available you can use the <code>facts_meta</code> property.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>EdgarTools provides extensive configuration options through environment variables and programmatic settings to customize behavior, optimize performance, and ensure SEC compliance.</p>"},{"location":"configuration/#quick-setup","title":"Quick Setup","text":"<p>For most users, you only need to set your identity:</p> <pre><code>export EDGAR_IDENTITY=\"Your Name your.email@company.com\"\n</code></pre> <p>Or in Python:</p> <pre><code>from edgar import set_identity\nset_identity(\"Your Name your.email@company.com\")\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"configuration/#required-configuration","title":"Required Configuration","text":""},{"location":"configuration/#edgar_identity","title":"EDGAR_IDENTITY","text":"<p>Required for all SEC requests</p> <p>Sets the User-Agent string for SEC EDGAR requests. Required by SEC to identify your application.</p> <pre><code>export EDGAR_IDENTITY=\"John Doe john.doe@company.com\"\n</code></pre> <p>Format Options: - <code>\"Name email@domain.com\"</code> - Full name and email (recommended) - <code>\"email@domain.com\"</code> - Email only (acceptable) - <code>\"Company Name contact@company.com\"</code> - Company identification</p> <p>Python Alternative:</p> <pre><code>from edgar import set_identity\nset_identity(\"John Doe john.doe@company.com\")\n</code></pre>"},{"location":"configuration/#performance-and-access-control","title":"Performance and Access Control","text":""},{"location":"configuration/#edgar_access_mode","title":"EDGAR_ACCESS_MODE","text":"<p>Controls HTTP request behavior and connection limits to manage SEC server load.</p> <pre><code>export EDGAR_ACCESS_MODE=\"NORMAL\"\n</code></pre> <p>Available Modes:</p> Mode Timeout Max Connections Retries Use Case <code>NORMAL</code> 15s 10 3 Default - balanced performance <code>CAUTION</code> 20s 5 3 Conservative - reduces server load <code>CRAWL</code> 25s 2 2 Minimal impact - bulk processing <p>Examples:</p> <pre><code># High-performance research (default)\nexport EDGAR_ACCESS_MODE=\"NORMAL\"\n\n# Conservative access for production\nexport EDGAR_ACCESS_MODE=\"CAUTION\"\n\n# Bulk data processing with minimal server impact\nexport EDGAR_ACCESS_MODE=\"CRAWL\"\n</code></pre>"},{"location":"configuration/#local-data-storage","title":"Local Data Storage","text":""},{"location":"configuration/#edgar_use_local_data","title":"EDGAR_USE_LOCAL_DATA","text":"<p>Enables local caching of SEC data for improved performance and reduced API calls.</p> <pre><code>export EDGAR_USE_LOCAL_DATA=\"True\"\n</code></pre> <p>Values: - <code>\"True\"</code>, <code>\"true\"</code>, <code>\"1\"</code> - Enable local storage - <code>\"False\"</code>, <code>\"false\"</code>, <code>\"0\"</code> - Disable local storage (default)</p> <p>Benefits of Local Storage: - Faster repeated access to same data - Reduced SEC API calls - Offline access to cached data - Better performance for bulk operations</p> <p>Python Alternative:</p> <pre><code>from edgar import use_local_storage\nuse_local_storage(True)\n</code></pre>"},{"location":"configuration/#edgar_local_data_dir","title":"EDGAR_LOCAL_DATA_DIR","text":"<p>Sets the directory for local data storage.</p> <pre><code>export EDGAR_LOCAL_DATA_DIR=\"/path/to/your/edgar/data\"\n</code></pre> <p>Default: <code>~/.edgar</code> (user's home directory)</p> <p>Directory Structure:</p> <pre><code>~/.edgar/                    # Root data directory\n\u251c\u2500\u2500 requestcache/            # HTTP response cache\n\u251c\u2500\u2500 filings/                 # Downloaded filing data\n\u2502   \u2514\u2500\u2500 YYYYMMDD/            # Organized by date\n\u251c\u2500\u2500 submissions/             # Company submissions data\n\u251c\u2500\u2500 companyfacts/            # Company facts data\n\u2514\u2500\u2500 reference/               # Reference data (tickers, etc.)\n</code></pre> <p>Example Setup:</p> <pre><code># Custom data directory for project\nexport EDGAR_LOCAL_DATA_DIR=\"/project/edgar_data\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\n</code></pre>"},{"location":"configuration/#security-and-ssl","title":"Security and SSL","text":""},{"location":"configuration/#edgar_verify_ssl","title":"EDGAR_VERIFY_SSL","text":"<p>Controls SSL certificate verification for HTTPS requests.</p> <pre><code>export EDGAR_VERIFY_SSL=\"true\"\n</code></pre> <p>Values: - <code>\"true\"</code> (default) - Verify SSL certificates (recommended) - <code>\"false\"</code>, <code>\"0\"</code>, <code>\"no\"</code>, <code>\"n\"</code>, <code>\"off\"</code> - Disable SSL verification</p> <p>\u26a0\ufe0f Security Warning: Only disable SSL verification in controlled environments. This reduces security by allowing man-in-the-middle attacks.</p> <p>Use Cases for Disabling: - Corporate proxy environments with custom certificates - Development environments with self-signed certificates - Network environments with SSL inspection</p>"},{"location":"configuration/#advanced-options","title":"Advanced Options","text":""},{"location":"configuration/#edgar_use_rich_logging","title":"EDGAR_USE_RICH_LOGGING","text":"<p>Enables enhanced console logging with rich formatting.</p> <pre><code>export EDGAR_USE_RICH_LOGGING=\"1\"\n</code></pre> <p>Values: - <code>\"1\"</code> - Enable rich logging with colors and formatting - <code>\"0\"</code> (default) - Standard logging</p> <p>Benefits: - Color-coded log levels - Enhanced readability - Progress bars and status indicators - Better debugging information</p>"},{"location":"configuration/#programmatic-configuration","title":"Programmatic Configuration","text":""},{"location":"configuration/#setting-identity","title":"Setting Identity","text":"<pre><code>from edgar import set_identity\n\n# Set identity programmatically\nset_identity(\"Research Team research@university.edu\")\n\n# Verify identity is set\nfrom edgar.core import get_identity\nprint(f\"Current identity: {get_identity()}\")\n</code></pre>"},{"location":"configuration/#local-storage-control","title":"Local Storage Control","text":"<pre><code>from edgar import use_local_storage\n\n# Enable local storage\nuse_local_storage(True)\n\n# Disable local storage\nuse_local_storage(False)\n\n# Check current setting\nfrom edgar.storage import using_local_storage\nprint(f\"Using local storage: {using_local_storage()}\")\n</code></pre>"},{"location":"configuration/#http-client-configuration","title":"HTTP Client Configuration","text":"<pre><code>from edgar.core import EdgarSettings\n\n# Custom access mode\ncustom_settings = EdgarSettings(\n    http_timeout=30,        # 30 second timeout\n    max_connections=3,      # Maximum 3 concurrent connections\n    retries=5              # 5 retry attempts\n)\n\n# Apply custom settings (requires restarting client)\n</code></pre>"},{"location":"configuration/#configuration-profiles","title":"Configuration Profiles","text":""},{"location":"configuration/#research-profile","title":"Research Profile","text":"<p>Optimized for interactive research and analysis:</p> <pre><code>export EDGAR_IDENTITY=\"Researcher researcher@university.edu\"\nexport EDGAR_ACCESS_MODE=\"NORMAL\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\nexport EDGAR_USE_RICH_LOGGING=\"1\"\n</code></pre>"},{"location":"configuration/#production-profile","title":"Production Profile","text":"<p>Conservative settings for production environments:</p> <pre><code>export EDGAR_IDENTITY=\"Production System api@company.com\"\nexport EDGAR_ACCESS_MODE=\"CAUTION\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\nexport EDGAR_LOCAL_DATA_DIR=\"/var/lib/edgar\"\nexport EDGAR_VERIFY_SSL=\"true\"\n</code></pre>"},{"location":"configuration/#bulk-processing-profile","title":"Bulk Processing Profile","text":"<p>Minimal server impact for large-scale data processing:</p> <pre><code>export EDGAR_IDENTITY=\"Bulk Processor batch@company.com\"\nexport EDGAR_ACCESS_MODE=\"CRAWL\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\nexport EDGAR_LOCAL_DATA_DIR=\"/data/edgar\"\n</code></pre>"},{"location":"configuration/#development-profile","title":"Development Profile","text":"<p>Flexible settings for development and testing:</p> <pre><code>export EDGAR_IDENTITY=\"Developer dev@company.com\"\nexport EDGAR_ACCESS_MODE=\"NORMAL\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\nexport EDGAR_USE_RICH_LOGGING=\"1\"\nexport EDGAR_VERIFY_SSL=\"false\"  # Only if needed for proxy\n</code></pre>"},{"location":"configuration/#configuration-file-setup","title":"Configuration File Setup","text":""},{"location":"configuration/#env-file","title":".env File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env file\nEDGAR_IDENTITY=John Doe john.doe@company.com\nEDGAR_ACCESS_MODE=NORMAL\nEDGAR_USE_LOCAL_DATA=True\nEDGAR_LOCAL_DATA_DIR=./edgar_data\nEDGAR_USE_RICH_LOGGING=1\n</code></pre> <p>Load with python-dotenv:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n\n# Now EdgarTools will use the environment variables\nfrom edgar import Company\ncompany = Company(\"AAPL\")\n</code></pre>"},{"location":"configuration/#shell-configuration","title":"Shell Configuration","text":"<p>Add to your shell profile (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code># Edgar Tools Configuration\nexport EDGAR_IDENTITY=\"Your Name your.email@company.com\"\nexport EDGAR_ACCESS_MODE=\"NORMAL\"\nexport EDGAR_USE_LOCAL_DATA=\"True\"\nexport EDGAR_LOCAL_DATA_DIR=\"$HOME/.edgar\"\n</code></pre>"},{"location":"configuration/#data-management","title":"Data Management","text":""},{"location":"configuration/#local-storage-benefits","title":"Local Storage Benefits","text":"<p>When <code>EDGAR_USE_LOCAL_DATA=\"True\"</code>:</p> <ol> <li>Caching: HTTP responses cached locally</li> <li>Offline Access: Previously accessed data available offline</li> <li>Performance: Faster subsequent access to same data</li> <li>Reduced API Calls: Less load on SEC servers</li> </ol>"},{"location":"configuration/#storage-space-considerations","title":"Storage Space Considerations","text":"<p>Typical storage usage: - Company submissions: ~100MB for major companies - Company facts: ~50MB for major companies - HTTP cache: Varies based on usage - Individual filings: 1-10MB each</p>"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#check-current-configuration","title":"Check Current Configuration","text":"<pre><code>import os\nfrom edgar.core import get_identity\n\n# Check identity\nprint(f\"Identity: {get_identity()}\")\n\n# Check access mode\nprint(f\"Access Mode: {os.getenv('EDGAR_ACCESS_MODE', 'NORMAL')}\")\n\n# Check local data settings\nprint(f\"Use Local Data: {os.getenv('EDGAR_USE_LOCAL_DATA', 'False')}\")\nprint(f\"Data Directory: {os.getenv('EDGAR_LOCAL_DATA_DIR', '~/.edgar')}\")\n\n# Check SSL verification\nprint(f\"Verify SSL: {os.getenv('EDGAR_VERIFY_SSL', 'true')}\")\n</code></pre>"},{"location":"configuration/#common-issues","title":"Common Issues","text":""},{"location":"configuration/#identity-not-set","title":"Identity Not Set","text":"<pre><code># Error: No identity set\n# Solution:\nset_identity(\"Your Name your.email@company.com\")\n</code></pre>"},{"location":"configuration/#permission-errors","title":"Permission Errors","text":"<pre><code># Error: Permission denied writing to ~/.edgar\n# Solution: Check directory permissions or use custom directory\nexport EDGAR_LOCAL_DATA_DIR=\"/tmp/edgar\"\n</code></pre>"},{"location":"configuration/#ssl-verification-errors","title":"SSL Verification Errors","text":"<pre><code># Error: SSL certificate verification failed\n# Solution: Disable SSL verification (only if safe)\nexport EDGAR_VERIFY_SSL=\"false\"\n</code></pre>"},{"location":"configuration/#connection-timeouts","title":"Connection Timeouts","text":"<pre><code># Error: Connection timeouts in slow network\n# Solution: Use more conservative settings\nexport EDGAR_ACCESS_MODE=\"CAUTION\"\n</code></pre>"},{"location":"configuration/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Always set EDGAR_IDENTITY - Required for SEC compliance</li> <li>Keep SSL verification enabled - Only disable in controlled environments</li> <li>Secure data directory - Ensure appropriate file permissions</li> <li>Use least-privilege access - Don't run with unnecessary elevated permissions</li> <li>Monitor data usage - Be aware of local storage space consumption</li> </ol>"},{"location":"configuration/#docker-configuration","title":"Docker Configuration","text":"<p>For containerized deployments:</p> <pre><code># Dockerfile\nENV EDGAR_IDENTITY=\"Container App app@company.com\"\nENV EDGAR_ACCESS_MODE=\"CAUTION\"\nENV EDGAR_USE_LOCAL_DATA=\"True\"\nENV EDGAR_LOCAL_DATA_DIR=\"/app/edgar_data\"\n\n# Create data directory\nRUN mkdir -p /app/edgar_data\nVOLUME /app/edgar_data\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Validate your configuration before running analysis:</p> <pre><code>from edgar import Company\nimport os\n\ndef validate_config():\n    \"\"\"Validate EdgarTools configuration.\"\"\"\n    issues = []\n\n    # Check identity\n    try:\n        from edgar.core import get_identity\n        identity = get_identity()\n        if not identity:\n            issues.append(\"EDGAR_IDENTITY not set\")\n        elif \"@\" not in identity:\n            issues.append(\"EDGAR_IDENTITY should include email\")\n    except:\n        issues.append(\"Cannot retrieve EDGAR_IDENTITY\")\n\n    # Check data directory\n    if os.getenv('EDGAR_USE_LOCAL_DATA', 'False').lower() in ['true', '1']:\n        data_dir = os.getenv('EDGAR_LOCAL_DATA_DIR', '~/.edgar')\n        expanded_dir = os.path.expanduser(data_dir)\n        if not os.path.exists(expanded_dir):\n            try:\n                os.makedirs(expanded_dir, exist_ok=True)\n            except:\n                issues.append(f\"Cannot create data directory: {data_dir}\")\n\n    # Test basic functionality\n    try:\n        company = Company(\"AAPL\")\n        print(f\"\u2713 Successfully created company: {company.name}\")\n    except Exception as e:\n        issues.append(f\"Basic functionality test failed: {e}\")\n\n    if issues:\n        print(\"Configuration Issues:\")\n        for issue in issues:\n            print(f\"  \u274c {issue}\")\n        return False\n    else:\n        print(\"\u2713 Configuration validated successfully\")\n        return True\n\n# Run validation\nvalidate_config()\n</code></pre>"},{"location":"configuration/#see-also","title":"See Also","text":"<ul> <li>Installation Guide - Getting started with EdgarTools</li> <li>Quick Start - Your first analysis</li> <li>Performance Best Practices - Optimization tips</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"contributing/","title":"Contributing to EdgarTools","text":"<p>Thank you for your interest in contributing to EdgarTools! This open-source project thrives on community contributions, and we appreciate any help you can provide. \ud83c\udf89</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":""},{"location":"contributing/#support-the-project","title":"\ud83d\udc9d Support the Project","text":"<p>If you find EdgarTools useful, consider supporting its development:</p> <p> </p> <p>Your support helps maintain and improve EdgarTools, ensuring it remains free and open-source for everyone.</p>"},{"location":"contributing/#report-bugs","title":"\ud83d\udc1b Report Bugs","text":"<p>If you encounter a bug:</p> <ol> <li>Check if it's already reported in GitHub Issues</li> <li>If not, open a new issue</li> </ol> <p>Include:</p> <ol> <li>Clear title and description</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Environment details (OS, Python version, EdgarTools version)</li> </ol>"},{"location":"contributing/#suggest-features","title":"\ud83d\udca1 Suggest Features","text":"<p>Have an idea for improvement? - Open an issue using the \"Feature request\" template - Describe your idea clearly - Explain why it would be beneficial - Include any implementation ideas</p>"},{"location":"contributing/#improve-documentation","title":"\ud83d\udcdd Improve Documentation","text":"<p>Help make our docs better: - Fix typos or unclear explanations - Add examples and use cases - Improve API documentation - Translate documentation</p>"},{"location":"contributing/#write-code","title":"\ud83d\udd27 Write Code","text":"<p>Ready to code? Here's how:</p> <ol> <li>Find an issue to work on (or create one)</li> <li>Discuss significant changes in issue comments</li> <li>Follow the development workflow below</li> </ol>"},{"location":"contributing/#share-expertise","title":"\ud83c\udf93 Share Expertise","text":"<p>Your domain knowledge is valuable! - Share insights on SEC filings, XBRL, or financial analysis - Help answer questions in issues - Review pull requests - Write tutorials or blog posts</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>EdgarTools uses Hatch for project management.</p>"},{"location":"contributing/#1-fork-clone","title":"1. Fork &amp; Clone","text":"<pre><code># Fork on GitHub, then:\ngit clone https://github.com/&lt;YOUR_USERNAME&gt;/edgartools.git\ncd edgartools\n</code></pre>"},{"location":"contributing/#2-install-hatch","title":"2. Install Hatch","text":"<p>Follow the official installation guide if you don't have Hatch.</p>"},{"location":"contributing/#3-set-up-environment","title":"3. Set Up Environment","text":"<pre><code># Activate development environment\nhatch shell\n</code></pre> <p>This installs all dependencies including development tools.</p>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#1-create-a-branch","title":"1. Create a Branch","text":"<pre><code>git checkout main\ngit pull origin main\ngit checkout -b feature/your-feature-name\n</code></pre> <p>Use descriptive branch names like: - <code>fix/filing-parsing-error</code> - <code>feature/insider-transaction-api</code> - <code>docs/improve-xbrl-examples</code></p>"},{"location":"contributing/#2-make-changes","title":"2. Make Changes","text":"<ul> <li>Max line length: 150 characters</li> <li>Use type annotations</li> <li>Include docstrings for public functions</li> <li>Write tests for new features</li> </ul>"},{"location":"contributing/#3-format-lint","title":"3. Format &amp; Lint","text":"<pre><code># Format code\nhatch run ruff format .\n\n# Check linting\nhatch run lint\n\n# Type check\nhatch run pyright\n</code></pre>"},{"location":"contributing/#4-test","title":"4. Test","text":"<pre><code># Run tests with coverage\nhatch run cov\n\n# Run specific tests\nhatch run pytest tests/test_file.py::test_function\n</code></pre> <p>Ensure: - All tests pass - Coverage doesn't decrease - New features have tests</p>"},{"location":"contributing/#5-commit","title":"5. Commit","text":"<p>Use clear, conventional commit messages:</p> <pre><code>git add .\ngit commit -m \"feat: add support for Form 13F parsing\"\n</code></pre> <p>Commit message prefixes: - <code>feat:</code> - New feature - <code>fix:</code> - Bug fix - <code>docs:</code> - Documentation changes - <code>test:</code> - Test additions/changes - <code>refactor:</code> - Code refactoring - <code>style:</code> - Code style changes - <code>chore:</code> - Maintenance tasks</p>"},{"location":"contributing/#6-push-pull-request","title":"6. Push &amp; Pull Request","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre> <p>Then on GitHub:</p> <ol> <li>Open a pull request to <code>main</code> branch</li> <li>Provide clear title and description</li> <li>Reference relevant issues (e.g., \"Closes #123\")</li> <li>Explain what and why</li> </ol>"},{"location":"contributing/#7-review-process","title":"7. Review Process","text":"<ul> <li>A maintainer will review your PR</li> <li>Address feedback constructively</li> <li>Make requested changes</li> <li>Tests must pass before merging</li> </ul>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<p>Preview documentation locally:</p> <pre><code># Start local docs server\nhatch run mkdocs serve\n</code></pre> <p>Visit <code>http://127.0.0.1:8000</code> to see your changes.</p>"},{"location":"contributing/#code-style-guide","title":"Code Style Guide","text":""},{"location":"contributing/#python-code","title":"Python Code","text":"<ul> <li>Line length: 150 chars max</li> <li>Use type hints</li> <li>Snake_case for functions/variables</li> <li>PascalCase for classes</li> <li>Descriptive docstrings</li> </ul>"},{"location":"contributing/#example","title":"Example:","text":"<pre><code>def get_filing_documents(\n    filing: Filing,\n    document_type: Optional[str] = None\n) -&gt; List[Document]:\n    \"\"\"\n    Retrieve documents from an SEC filing.\n\n    Args:\n        filing: The Filing object to extract documents from\n        document_type: Optional filter for specific document types\n\n    Returns:\n        List of Document objects matching the criteria\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Link to related topics</li> <li>Keep formatting consistent</li> </ul>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Test files mirror source structure</li> <li>Use descriptive test names</li> <li>Cover edge cases</li> <li>Mock external dependencies</li> </ul>"},{"location":"contributing/#example_1","title":"Example:","text":"<pre><code>def test_company_retrieval_by_ticker():\n    \"\"\"Test that companies can be retrieved by ticker symbol.\"\"\"\n    company = Company(\"AAPL\")\n    assert company.name == \"Apple Inc.\"\n    assert company.cik == 320193\n</code></pre>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcac GitHub Discussions - Ask questions</li> <li>\ud83d\udce7 Email - Direct contact</li> <li>\ud83d\udcda Documentation - Usage guides</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in: - GitHub Contributors - Release notes - Documentation credits</p>"},{"location":"contributing/#support-the-project_1","title":"Support the Project","text":"<p>If you find EdgarTools valuable, please consider:</p> <p> </p> <p>Your support helps:</p> <ul> <li>\ud83d\ude80 Maintain and improve the library</li> <li>\ud83d\udcda Keep documentation up-to-date</li> <li>\ud83d\udc1b Fix bugs quickly</li> <li>\u2728 Add new features</li> <li>\ud83d\udcbb Keep the project free and open-source</li> </ul> <p>Thank you for contributing to EdgarTools! \ud83d\ude4f</p>"},{"location":"data-objects/","title":"Data Objects","text":"<p>Data Objects in EdgarTools provide structured access to filing content in a format specific to each filing type. These specialized objects extract, organize, and expose the relevant data from SEC filings, making it much easier to work with different filing types programmatically.</p>"},{"location":"data-objects/#overview","title":"Overview","text":"<p>Data Objects represent parsed SEC filings with type-specific properties and methods. They automatically handle the complex parsing of raw filing data (HTML, XML, XBRL) and present a clean, intuitive interface tailored to each filing type.</p> <p>For example, a <code>TenK</code> object provides structured access to an annual report's business description, risk factors, and financial data, while a <code>ThirteenF</code> object organizes investment holdings into tabular data.</p>"},{"location":"data-objects/#supported-filing-types","title":"Supported Filing Types","text":"<p>EdgarTools provides specialized Data Objects for the most common SEC filing types:</p> Form Data Object Description Key Features 10-K <code>TenK</code> Annual report Section access, financial statements, XBRL data 10-Q <code>TenQ</code> Quarterly report Section access, financial statements, XBRL data 8-K <code>EightK</code> Current report Item access, press releases, event categorization 3, 4, 5 <code>Ownership</code> Ownership reports Transaction details, insider information 13F-HR <code>ThirteenF</code> 13F Holdings Report Portfolio holdings, securities information NPORT-P <code>FundReport</code> Fund Report Fund portfolio data, investments D <code>FormD</code> Form D Offering Exempt offering details C, C-U, C-AR, C-TR <code>FormC</code> Form C Crowdfunding Offering Crowdfunding details, issuer information MA-I <code>MunicipalAdvisorForm</code> Municipal advisor initial filing Municipal advisor information Form 144 <code>Form144</code> Notice of proposed sale of securities Proposed sale details EFFECT <code>Effect</code> Notice of Effectiveness Registration statement effectiveness Any filing with XBRL <code>FilingXbrl</code> XBRL-enabled filing Access to structured XBRL data"},{"location":"data-objects/#converting-filings-to-data-objects","title":"Converting Filings to Data Objects","text":"<p>To get a Data Object from a <code>Filing</code>, use the <code>obj()</code> method:</p> <pre><code>from edgar import Company, get_filings\n\n# Method 1: From a company object\napple = Company(\"AAPL\")\nfilings = apple.get_filings(form=\"10-K\")\nlatest_10k = filings.latest()\ntenk = latest_10k.obj()\n\n# Method 2: From filings search\nform4_filings = get_filings(form=\"4\", limit=10)\nform4 = form4_filings[0].obj()\n\n# Method 3: Direct from a filing accessor\nfiling = apple.get_latest_filing(\"10-K\")\ntenk = filing.obj()\n</code></pre>"},{"location":"data-objects/#working-with-data-objects","title":"Working with Data Objects","text":""},{"location":"data-objects/#company-reports-10-k-10-q","title":"Company Reports (10-K, 10-Q)","text":"<pre><code># Get a 10-K data object\ntenk = filing.obj()\n\n# Access document sections by name\nbusiness_description = tenk.business\nrisk_factors = tenk.risk_factors\nmd_and_a = tenk.management_discussion\nlegal_proceedings = tenk.legal_proceedings\n\n# Access financial statements\nbalance_sheet = tenk.balance_sheet\nincome_stmt = tenk.income_statement\ncash_flow = tenk.cashflow_statement\n\n# Get specific financial values\nrevenue = income_stmt.get_value(\"Revenues\")\nnet_income = income_stmt.get_value(\"NetIncomeLoss\")\nassets = balance_sheet.get_value(\"Assets\")\n\n# Convert to DataFrame for analysis\nincome_df = income_stmt.to_dataframe()\nbalance_df = balance_sheet.to_dataframe()\n\n# Access raw text of a section\nrisk_text = tenk.get_section_text(\"Risk Factors\")\n</code></pre>"},{"location":"data-objects/#current-reports-8-k","title":"Current Reports (8-K)","text":"<pre><code>eightk = filing.obj()\n\n# Get basic information\nreport_date = eightk.date_of_report\nitems_reported = eightk.items\n\n# Check for specific events\nhas_acquisition = eightk.has_item(\"2.01\")  # Acquisition/disposition\nhas_officer_change = eightk.has_item(\"5.02\")  # Officer changes\n\n# Access specific items by number\nif \"Item 2.01\" in eightk:\n    acquisition_info = eightk[\"Item 2.01\"]\n\n# Get press releases\nif eightk.has_press_release:\n    press_releases = eightk.press_releases\n    for pr in press_releases:\n        print(f\"Title: {pr.title}\")\n        print(f\"Content: {pr.content[:100]}...\")\n</code></pre>"},{"location":"data-objects/#insider-trading-forms-3-4-5","title":"Insider Trading (Forms 3, 4, 5)","text":"<pre><code>form4 = filing.obj()\n\n# Get basic information\ninsider_name = form4.reporting_owner\ncompany_name = form4.issuer\nfiling_date = form4.filing_date\n\n# Access transaction data\nfor transaction in form4.transactions:\n    print(f\"Date: {transaction.transaction_date}\")\n    print(f\"Type: {transaction.transaction_code}\")  # P for purchase, S for sale\n    print(f\"Shares: {transaction.shares}\")\n    print(f\"Price: ${transaction.price_per_share}\")\n    print(f\"Value: ${transaction.value}\")\n\n# Get summary of market trades\nbuy_count, sell_count = form4.get_buy_sell_counts()\nnet_shares = form4.get_net_shares_traded()\n</code></pre>"},{"location":"data-objects/#investment-fund-holdings-13f","title":"Investment Fund Holdings (13F)","text":"<pre><code>thirteen_f = filing.obj()\n\n# Get fund information\nfund_name = thirteen_f.manager_name\nreport_date = thirteen_f.report_date\n\n# Get holdings summary\ntotal_value = thirteen_f.total_value\nholdings_count = thirteen_f.total_holdings\n\n# Access all holdings\nholdings = thirteen_f.infotable\nfor holding in holdings:\n    print(f\"Company: {holding.name}\")\n    print(f\"Value: ${holding.value:,.2f}\")\n    print(f\"Shares: {holding.shares:,}\")\n    print(f\"Security Type: {holding.security_type}\")\n\n# Convert to DataFrame for analysis\nholdings_df = holdings.to_dataframe()\ntop_holdings = holdings_df.sort_values('value', ascending=False).head(10)\n</code></pre>"},{"location":"data-objects/#rich-display","title":"Rich Display","text":"<p>Most Data Objects include rich display formatting for use in terminals or notebooks:</p> <pre><code># Display formatted information in a terminal or notebook\nprint(tenk)  # Shows a summary of the 10-K filing\nprint(form4)  # Shows insider transaction details\nprint(thirteen_f)  # Shows fund holdings summary\n\n# In Jupyter notebooks, objects render as HTML tables automatically\ntenk.balance_sheet  # Displays as formatted table\nthirteen_f.infotable  # Displays as holdings table\n</code></pre>"},{"location":"data-objects/#error-handling","title":"Error Handling","text":"<p>Data Objects handle common parsing errors gracefully:</p> <pre><code>try:\n    data_obj = filing.obj()\nexcept UnsupportedFilingTypeError:\n    print(\"This filing type doesn't have a specialized data object\")\nexcept ParsingError as e:\n    print(f\"Error parsing filing: {e}\")\n    # Fall back to generic access\n    text = filing.text\n</code></pre>"},{"location":"data-objects/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Data Objects parse filing content on-demand</li> <li>Large filings (like 10-Ks) may take a few seconds to parse</li> <li>Consider using local storage for batch processing</li> </ul>"},{"location":"data-objects/#implementation-details","title":"Implementation Details","text":"<p>Data Objects are implemented using a mix of regular classes, dataclasses, and Pydantic models, depending on the complexity of the filing type. They handle parsing of HTML, XML, and XBRL content automatically, providing a clean interface to work with filing data.</p>"},{"location":"eightk-filings/","title":"Eight-K Filings","text":"<p>Imagine having instant access to a company's most critical corporate updates the moment they happen!</p> <p>8-K filings are real-time windows into significant corporate events, revealing everything from  leadership changes to major business transformations.</p> <p>With edgartools, you can effortlessly retrieve and analyze these crucial SEC documents in just a few lines of Python code. </p>"},{"location":"eightk-filings/#getting-8-k-filings-for-a-company","title":"Getting 8-K filings for a company","text":"<p>The easiest way to get 8-K filings is to get access to a company object and use the <code>latest</code> function. You can restrict to the latest 5 filings by passing <code>n</code> as a parameter.</p> <p>This returns a <code>Filings</code> object with multiple filings so to get a single filing use the bracket <code>[]</code> operator e.g. <code>filings[1]</code>.</p> <pre><code>c = Company(\"AAPL\")\n\nfilings = filings.latest(\"8-K\", 5)\n</code></pre> <p></p> <p>To get the last filing use <code>latest</code> without <code>n</code>. This returns a single <code>Filing</code> object.</p> <pre><code>filing = filings.latest(\"8-K\")\n</code></pre> <p></p>"},{"location":"eightk-filings/#getting-all-8-k-filings","title":"Getting all 8-K filings","text":"<p>Another way to get 8-K filings is to use <code>get_filings(form=\"8-K\")</code>. This gets all the filings for a company, but also allow for filtering by date</p> <pre><code>filings = c.get_filings(form='8-K')\n</code></pre>"},{"location":"eightk-filings/#filtering-by-date","title":"Filtering by date","text":"<p>You can also filter the filings by date using a range 'YYYY-MM-DD:YYYY-MM-DD' or from a specific date 'YYYY-MM-DD:' or before a specific date ':YYYY-MM-DD'.</p> <pre><code>filings = c.get_filings(form='8-K', date='2022-01-01:')\n</code></pre> <p></p>"},{"location":"eightk-filings/#viewing-the-8-k-filing","title":"Viewing the 8-K filing","text":"<p>Once you have the 8-K filing you can view it in the browser using <code>filing.open()</code></p> <pre><code>filing.open()\n</code></pre> <p>You can also view it in the console using <code>filing.view()</code></p> <pre><code>filing.view()\n</code></pre> <p></p>"},{"location":"eightk-filings/#viewing-the-filing-exhibits","title":"Viewing the filing exhibits","text":"<p>8-K filings often gave attached exhibits which contain the informnation the company is releasing in the filing.  You can view the list of exhibits using <code>filing.exhibits</code></p> <pre><code>filing.exhibits \n</code></pre> <p></p>"},{"location":"eightk-filings/#viewing-a-specific-exhibit","title":"Viewing a specific exhibit","text":"<p>To select a specific exhibit use the bracket <code>[]</code> operator e.g. <code>filing.exhibits[0]</code>. This selects the first exhibit, so <code>filing.exhibits[1]</code> selects the second exhibit.</p> <p>To view the exhibit <code>filing.exhibits[1].view()</code></p> <pre><code>filing.exhibits[1].view()\n</code></pre> <p></p>"},{"location":"eightk-filings/#downloading-the-exhibit","title":"Downloading the exhibit","text":"<p>To download the exhibit use <code>filing.exhibits[1].download()</code>. Note that this downloads the file into memory, while you may want to download to a path. To download to a path use <code>filing.exhibits[1].download(path=\"path/to/save\")</code></p> <pre><code>filing.exhibits[1].download()\n</code></pre>"},{"location":"examples/","title":"Solve Real Problems with EdgarTools","text":"<p>This document showcases common workflows and tasks that financial professionals, developers, and researchers can accomplish using EdgarTools. Each journey addresses a specific problem and provides a concise code example.</p>"},{"location":"examples/#1-company-financial-analysis","title":"1. Company Financial Analysis","text":"<p>Problem: Need to analyze a company's financial health across multiple periods.</p> <p></p> <pre><code>\ndef get_income_dataframe(ticker:str):\n    c = Company(ticker)\n    filings = c.get_filings(form=\"10-K\").latest(5)\n    xbs = XBRLS.from_filings(filings)\n    income_statement = xbs.statements.income_statement()\n    income_df = income_statement.to_dataframe()\n    return income_df\n\n\ndef plot_revenue(ticker:str):\n    income_df = get_income_dataframe(ticker)\n\n    # Extract financial metrics\n    net_income = income_df[income_df.concept == \"us-gaap_NetIncomeLoss\"][income_statement.periods].iloc[0]\n    gross_profit = income_df[income_df.concept == \"us-gaap_GrossProfit\"][income_statement.periods].iloc[0]\n    revenue = income_df[income_df.label == \"Revenue\"][income_statement.periods].iloc[0]\n\n    # Convert periods to fiscal years for better readability\n    periods = [pd.to_datetime(period).strftime('FY%y') for period in income_statement.periods]\n\n    # Reverse the order so most recent years are last (oldest to newest)\n    periods = periods[::-1]\n    revenue_values = revenue.values[::-1]\n    gross_profit_values = gross_profit.values[::-1]\n    net_income_values = net_income.values[::-1]\n\n    # Create a DataFrame for plotting\n    plot_data = pd.DataFrame({\n        'Revenue': revenue_values,\n        'Gross Profit': gross_profit_values,\n        'Net Income': net_income_values\n    }, index=periods)\n\n    # Convert to billions for better readability\n    plot_data = plot_data / 1e9\n\n    # Create the figure\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    # Plot the data as lines with markers\n    plot_data.plot(kind='line', marker='o', ax=ax, linewidth=2.5)\n\n    # Format the y-axis to show billions with 1 decimal place\n    ax.yaxis.set_major_formatter(mtick.FuncFormatter(lambda x, _: f'${x:.1f}B'))\n\n    # Add labels and title\n    ax.set_xlabel('Fiscal Year')\n    ax.set_ylabel('Billions USD')\n    ax.set_title(f'{c.name} ({ticker}) Financial Performance')\n\n    # Add a grid for better readability\n    ax.grid(True, linestyle='--', alpha=0.7)\n\n    # Add a source note\n    plt.figtext(0.5, 0.01, 'Source: SEC EDGAR via edgartools', ha='center', fontsize=9)\n\n    # Improve layout\n    plt.tight_layout(rect=[0, 0.03, 1, 0.97])\n\n    return fig\n</code></pre>"},{"location":"examples/#2-investment-fund-research","title":"2. Investment Fund Research","text":"<p>Problem: Need to analyze fund holdings and compare share classes.</p> <pre><code>from edgar import find\n\n# Find a fund by ticker\nfund = find(\"VFIAX\")  # Vanguard 500 Index Fund\n\n# Get the fund's structure\nclasses = fund.get_classes()\nprint(f\"Fund has {len(classes)} share classes\")\n\n# Get the latest portfolio holdings\nportfolio = fund.get_portfolio()\n\n# Show top 10 holdings by value\ntop_holdings = portfolio.sort_values('value', ascending=False).head(10)\ntop_holdings\n</code></pre>"},{"location":"getting-started/","title":"Edgartools","text":"<p>Welcome to edgartools, the easiest way to work with SEC filings in Python</p>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":""},{"location":"getting-started/#1-install","title":"1. Install","text":"<pre><code>pip install edgartools\n</code></pre> <p>There are frequent releases so it is a good idea to use <code>pip install -U edgartools</code> to get new features and bug fixes. That being said we try to keep the API stable and backwards compatible.</p> <p>If you prefer uv instead of pip you can use the following command:</p> <pre><code>uv pip install edgartools\n</code></pre>"},{"location":"getting-started/#2-import-edgar","title":"2. Import edgar","text":"<p>The main way to use the library is to import everything with <code>from edgar import *</code>. This will give you access to most of the functions and classes you need.</p> <pre><code>from edgar import *\n</code></pre> <p>If you prefer a minimal import you can use the following:</p>"},{"location":"getting-started/#3-set-your-identity","title":"3. Set your identity","text":"<p>Before you can access the SEC Edgar API you need to set the identity that you will use to access Edgar. This is usually your name and email, but you can also just use an email.</p> <p>You can set your identity in Python before you start using the library. </p>"},{"location":"getting-started/#setting-your-identity-in-python","title":"Setting your identity in Python","text":"<pre><code>from edgar import *\nset_identity(\"mike.mccalum@indigo.com\")\n</code></pre>"},{"location":"getting-started/#setting-your-identity-using-an-environment-variable","title":"Setting your identity using an environment variable","text":"<p>You can also set your identity using an environment variable. This is useful if you are using the library in a script or notebook.</p> <pre><code>export EDGAR_IDENTITY=\"mike.mccalum@indigo.com\"\n</code></pre>"},{"location":"getting-xbrl/","title":"Getting XBRL from Filings","text":""},{"location":"getting-xbrl/#overview","title":"Overview","text":"<p>The <code>edgar.xbrl</code> module provides a powerful yet user-friendly API for processing XBRL (eXtensible Business Reporting Language) financial data from SEC filings. </p>"},{"location":"getting-xbrl/#key-features","title":"Key Features","text":"<ul> <li>Intuitive API: Access financial statements with simple, readable method calls</li> <li>Multi-period Analysis: Compare financial data across quarters and years with statement stitching</li> <li>Standardized Concepts: View company-specific terms or standardized labels for cross-company comparison</li> <li>Rich Rendering: Display beautifully formatted financial statements in console or notebooks</li> <li>Smart Period Selection: Automatically identify and select relevant periods for meaningful comparisons</li> <li>DataFrame Export: Convert any statement to pandas DataFrames for further analysis</li> </ul>"},{"location":"getting-xbrl/#getting-started","title":"Getting Started","text":"<p>You can get the XBRL from a single filing, or stitch together multiple filings.</p>"},{"location":"getting-xbrl/#getting-xbrl-from-a-single-filing","title":"Getting XBRL from a single filing","text":"<p>For a single filing you can use <code>filing.xbrl()</code> to get the XBRL data, and then access the financial and other statements.</p> <pre><code>from edgar import Company\nfrom edgar.xbrl.xbrl import XBRL\n\n# Get a company's latest 10-K filing\ncompany = Company('AAPL')\nfiling = company.latest(\"10-K\")\n\n# Parse XBRL data\nxb = filing.xbrl()\n\n# Access statements through the user-friendly API\nstatements = xb.statements\n\n# Display financial statements\nbalance_sheet = statements.balance_sheet()\nincome_statement = statements.income_statement()\ncash_flow = statements.cashflow_statement()\n</code></pre>"},{"location":"getting-xbrl/#getting-xbrl-from-multiple-filings","title":"Getting XBRL from multiple filings","text":"<p>You can also stitch together multiple filings to create a multi-period view of financial statements. This uses the <code>edgar.XBRLS</code> class to combine data across multiple filings. Each filing should be of the same type (e.g., all 10-Ks or all 10-Qs) and from the same company.</p> <pre><code>from edgar import Company\nfrom edgar.xbrl import XBRLS\n\n# Get multiple filings for trend analysis\ncompany = Company('AAPL')\nfilings = company.get_filings(form=\"10-K\").head(3)  # Get the last 3 annual reports\n\n# Create a stitched view across multiple filings\nxbrls = XBRLS.from_filings(filings)\n\n# Access stitched statements\nstitched_statements = xbrls.statements\n\n# Display multi-period statements\nincome_trend = stitched_statements.income_statement()\nbalance_sheet_trend = stitched_statements.balance_sheet()\ncashflow_trend = stitched_statements.cashflow_statement()\n</code></pre>"},{"location":"getting-xbrl/#user-friendly-features","title":"User-Friendly Features","text":""},{"location":"getting-xbrl/#simple-statement-access","title":"Simple Statement Access","text":"<p>Access common financial statements with intuitive methods:</p> <pre><code># Get basic statements\nbalance_sheet = statements.balance_sheet()\nincome_statement = statements.income_statement()\ncash_flow = statements.cashflow_statement()\nstatement_of_equity = statements.statement_of_equity()\n\n# Access any statement by type\ncomprehensive_income = statements[\"ComprehensiveIncome\"]\n</code></pre>"},{"location":"getting-xbrl/#smart-period-views","title":"Smart Period Views","text":"<p>Choose from intelligent period selection views:</p> <pre><code># See available period views\nperiod_views = statements.get_period_views(\"IncomeStatement\")\nfor view in period_views:\n    print(f\"- {view['name']}: {view['description']}\")\n\n# Render with specific view\nannual_comparison = statements.income_statement(period_view=\"Annual Comparison\")\nquarter_comparison = statements.income_statement(period_view=\"Quarterly Comparison\")\n</code></pre>"},{"location":"getting-xbrl/#easy-conversion-to-dataframes","title":"Easy Conversion to DataFrames","text":"<p>Transform any statement into a pandas DataFrame for further analysis:</p> <pre><code># Get DataFrame of income statement\ndf = income_statement.to_dataframe()\n</code></pre>"},{"location":"getting-xbrl/#statement-stitching-for-trend-analysis","title":"Statement Stitching for Trend Analysis","text":"<p>The XBRLS class combines data from multiple periods with intelligent handling of concept changes:</p> <pre><code># Create stitched statements across multiple filings\nxbrls = XBRLS.from_filings(filings)\nstitched = xbrls.statements\n\n# Get a three-year comparison of income statements\nincome_trend = stitched.income_statement(max_periods=3)\n\n# Convert to DataFrame for time series analysis\ntrend_df = income_trend.to_dataframe()\n</code></pre>"},{"location":"getting-xbrl/#rendering-options","title":"Rendering Options","text":"<p>The XBRL2 module provides flexible output options for financial statements:</p> <pre><code># Display with default styling as Rich tables in console/notebooks\nprint(statements.balance_sheet())\n\n# Show full date ranges for duration periods\nprint(statements.income_statement(show_date_range=True))\n\n# Customize period view\nprint(statements.income_statement(period_view=\"Annual Comparison\"))\n\n# Convert to pandas DataFrame for analysis\ndf = statements.to_dataframe(\"BalanceSheet\")\n\n# Export the statement to markdown\nincome_statement = statements.income_statement()\nmarkdown_text = income_statement.render().to_markdown()\n</code></pre>"},{"location":"getting-xbrl/#statement-display-options","title":"Statement Display Options","text":"<p>The rendering system offers several customization options:</p> Option Description <code>standard=True</code> Use standardized labels for cross-company comparison (default) <code>standard=False</code> Use company-specific labels as reported in the filing <code>show_date_range=True</code> Show complete date ranges for duration periods (e.g., \"Jan 1 - Mar 31, 2023\") <code>show_date_range=False</code> Show only end dates for cleaner presentation (default) <code>period_view=\"Name\"</code> Select a predefined period view (\"Annual Comparison\", \"Quarterly Comparison\", etc.) <code>period_filter=\"duration_...\"</code> Filter to a specific period by period key"},{"location":"getting-xbrl/#the-renderedstatement-class","title":"The <code>RenderedStatement</code> Class","text":"<p>The <code>render_statement()</code> function returns a <code>RenderedStatement</code> object, which provides multiple output formats:</p> <pre><code># Get a rendered statement\nstatement = xbrl.render_statement(\"BalanceSheet\")\n\n# Display as Rich table (default)\nprint(statement)\n\n# Convert to pandas DataFrame \ndf = statement.to_dataframe()\n\n# Export to markdown\nmarkdown = statement.to_markdown()\n</code></pre>"},{"location":"getting-xbrl/#customizing-statement-appearance","title":"Customizing Statement Appearance","text":"<p>The rendering engine automatically handles:</p> <ul> <li>Proper monetary formatting with scale indicators (thousands, millions, billions)</li> <li>Appropriate indentation for statement hierarchy</li> <li>Formatting of section headers and dimension items</li> <li>Correct display of share counts and per-share values</li> <li>Fiscal period indicators in statement titles</li> <li>Unit notes (e.g., \"In millions, except per share data\")</li> </ul> <p>For stitched multi-period statements, you can control the number of periods and date formatting:</p> <pre><code># Get 3-year comparison with full date ranges\nannual_trend = stitched_statements.income_statement(\n    max_periods=3, \n    show_date_range=True\n)\n</code></pre>"},{"location":"getting-xbrl/#advanced-features","title":"Advanced Features","text":""},{"location":"getting-xbrl/#custom-period-selection","title":"Custom Period Selection","text":"<pre><code># Get specific periods from available options\navailable_periods = xbrl.reporting_periods\nlatest_period = available_periods[0]\n\n# Render with specific period\nif latest_period['type'] == 'instant':\n    period_filter = f\"instant_{latest_period['date']}\"\n    latest_balance_sheet = statements.balance_sheet().render(period_filter=period_filter)\n</code></pre>"},{"location":"getting-xbrl/#statement-data-exploration","title":"Statement Data Exploration","text":"<pre><code># Get raw statement data for custom processing\nraw_data = statements.balance_sheet().get_raw_data()\n\n# Extract specific information\nassets = [item for item in raw_data if 'assets' in item['label'].lower()]\n</code></pre>"},{"location":"getting-xbrl/#design-philosophy","title":"Design Philosophy","text":"<p>The XBRL2 module is designed with these principles:</p> <ol> <li>User-First API: Simple methods that match how financial analysts think about statements</li> <li>Intelligent Defaults: Smart period selection and formatting that \"just works\" out of the box</li> <li>Flexible Output Options: Rich tables for display, DataFrames for analysis, and raw data for custom processing</li> <li>Consistency Across Companies: Standardized concepts that enable cross-company comparison</li> </ol>"},{"location":"getting-xbrl/#period-selection-logic","title":"Period Selection Logic","text":"<p>The XBRL2 module implements sophisticated period selection logic to ensure appropriate periods are displayed for financial statements:</p>"},{"location":"getting-xbrl/#quarterly-statement-period-selection","title":"Quarterly Statement Period Selection","text":"<p>When rendering quarterly statements (when fiscal_period_focus is Q1, Q2, Q3, or Q4):</p> <ol> <li>The system identifies true quarterly periods by filtering duration periods to those with 80-100 day durations</li> <li>If quarterly periods are found, the most recent one is selected as the current quarter</li> <li>For comparison, the system looks for periods with similar duration from approximately 1-2 years prior</li> <li>If no quarterly periods are found, it falls back to the most recent period with a warning</li> </ol>"},{"location":"getting-xbrl/#annual-statement-period-selection","title":"Annual Statement Period Selection","text":"<p>For annual reports (when fiscal_period_focus is FY):</p> <ol> <li>Annual periods are identified by looking for ~365 day durations or fiscal year markers</li> <li>The system prioritizes periods that align with the entity's fiscal year end</li> <li>Up to three most recent fiscal years are displayed in chronological order</li> </ol> <p>This intelligent period selection ensures appropriate periods are displayed for statements, with robust fallbacks when ideal periods aren't available.</p>"},{"location":"getting-xbrl/#enhanced-facts-api","title":"Enhanced Facts API","text":"<p>The XBRL2 module includes a powerful facts query interface for direct access to individual XBRL facts:</p> <pre><code>from edgar import Company\nfrom edgar.xbrl import XBRL\n\n# Parse XBRL data\ncompany = Company('AAPL')\nfiling = company.get_filings(form='10-K').latest()\n\nxbrl = XBRL.from_filing(filing)\n\n# Access the facts view\nfacts = xbrl.facts\n\n# Query facts by various attributes\nrevenue = facts.query().by_concept('Revenue').to_dataframe()\nbalance_sheet_facts = facts.query().by_statement_type('BalanceSheet').to_dataframe()\n\n# Use predefined period views - returns important metadata including available periods\nincome_views = facts.get_available_period_views('IncomeStatement')\nfor view in income_views:\n    print(f\"- {view['name']}: {view['description']} ({view['facts_count']} facts)\")\n\n# Get facts filtered by period view\nannual_comparison = facts.get_facts_by_period_view('IncomeStatement', 'Annual Comparison')\n\n# Flexible text search across all text fields (concept, label, element name)\nearnings_facts = facts.search_facts(\"Earnings Per Share\")\n\n# Filter by period keys - useful for custom period selection\nfacts.query().by_period_keys(['duration_2023-01-01_2023-12-31',\n                              'duration_2022-01-01_2022-12-31']).to_dataframe()\n\n# Query dimensional data\nfacts_by_segment = facts.query().by_dimension('Segment').to_dataframe()\n\n# Safe numeric value filtering with proper None handling\nlarge_income_items = (facts.query()\n    .by_statement_type('IncomeStatement')\n    .by_value(lambda v: v &gt; 1_000_000_000)\n    .sort_by('numeric_value', ascending=False)\n    .to_dataframe())\n\n# Time series analysis\nrevenue_over_time = facts.time_series('Revenue')\n</code></pre>"},{"location":"getting-xbrl/#xbrl-calculation-support","title":"XBRL Calculation Support","text":"<p>The XBRL2 module properly handles calculation relationships from XBRL calculation linkbases:</p> <pre><code># Values are automatically adjusted according to calculation weights\n# For example, elements with negative weights (-1.0) like \"IncreaseDecreaseInInventories\"\n# are automatically negated to maintain proper calculation relationships\ncash_flow_statement = statements.cashflow_statement()\n\n# The calculation trees are accessible for inspection\nfor role_uri, calc_tree in xbrl.calculation_trees.items():\n    print(f\"Calculation tree: {calc_tree.definition}\")\n    for element_id, node in calc_tree.all_nodes.items():\n        if node.weight != 1.0:\n            print(f\"- {element_id}: weight={node.weight}\")\n</code></pre> <p>The parser automatically adjusts fact values based on calculation arc weights, ensuring:</p> <ol> <li>Elements with negative weights (-1.0) are displayed with the correct sign</li> <li>Cash flow statements present inflows and outflows with the proper signage</li> <li>Calculation validations use the adjusted values for proper summation</li> <li>Contextual interpretation of values aligns with statement presentation</li> </ol>"},{"location":"getting-xbrl/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Enhanced support for non-standard financial statements</li> <li>Interactive visualization options</li> <li>Expanded dimensional analysis capabilities</li> <li>Automatic footnote association</li> <li>Financial ratio calculations</li> <li>Advanced calculation validation and reconciliation</li> </ul>"},{"location":"initial-steps/","title":"Initial Steps","text":""},{"location":"initial-steps/#getting-filings","title":"Getting Filings","text":"<p>The library is designed to be easy to use and flexible. You can start by getting all filings for the current year and quarter with <code>get_filings()</code>.</p> <pre><code>filings = get_filings()\n</code></pre> <p></p> <p>You can expand beyond the current year and quarter by using the parameters of the <code>get_filings</code> function.</p> <p>For example you can specify the year you want to get filings for:</p> <pre><code>filings = get_filings(year=2021)\n</code></pre> <p>For more details on filtering filings see the Filtering Filings docs</p>"},{"location":"initial-steps/#selecting-a-filing","title":"Selecting a filing","text":"<p>You can select a filing using the <code>[]</code> operator. For example to get the third filing in the list:</p> <pre><code>filing = filings[3]\n</code></pre>"},{"location":"initial-steps/#paginating-filings","title":"Paginating filings","text":"<p>The <code>Filings</code> object is a container for a list of filings. The list of filings can  be large but by default you can only see the first page of filings. </p> <p>To change the page, you can paginate filings using the <code>next</code> and <code>prev</code> methods. For example:</p> <pre><code>filings = get_filings()\nfilings.next()\nfilings.previous()\n</code></pre>"},{"location":"initial-steps/#looping-through-filings","title":"Looping through filings","text":"<p>You can loop through filings using the <code>for</code> loop. For example:</p> <pre><code>\nfilings = get_filings()\nfor filing in filings:\n    # Do something with the filing\n    ...\n</code></pre>"},{"location":"initial-steps/#getting-related-filings","title":"Getting Related Filings","text":"<p>Filings can be related to other filings using the file number. In some cases this relationship can be meaningful, as in they represent a group of filings for a specific securities offering. The link between the filing is via the <code>file_number</code> attribute of the filing, which is an identifier that the SEC uses to group filings.</p> <p>You can get related filings using the <code>get_related_filings</code> method. For example:</p> <pre><code>filing = get_filing('0000320193-22-000002')\nfilings = filing.related_filings()\n</code></pre>"},{"location":"initial-steps/#getting-a-company","title":"Getting a Company","text":"<p>You can start by getting a company by CIK or Ticker with <code>Company()</code>. For example:</p> <pre><code>c = Company(\"AAPL\")\n</code></pre> <p>You can also get a company by CIK. For example:</p> <pre><code>c = Company(\"0000320193\")\n</code></pre> <p>To get a Company by ticker, the library first does a lookup of the CIK for the ticker and then gets filings for the CIK. So if you know the CIK, it is faster to use that directly.</p>"},{"location":"initial-steps/#company-filings","title":"Company Filings","text":"<p>You can get the filings for a company by using the <code>get_filings()</code> function. For example:</p> <pre><code>filings = c.get_filings()\n</code></pre>"},{"location":"initial-steps/#getting-company-facts","title":"Getting Company Facts","text":"<p>You can get facts for a company using the <code>get_facts()</code> method. For example:</p> <pre><code>facts = c.get_facts()\n</code></pre> <p>The result is an <code>EntityFacts</code> object that wraps the data returned from the SEC API. To get the data as a dataframe use the <code>to_pandas()</code> method. For example:</p> <pre><code>facts_df = facts.to_pandas()\n</code></pre>"},{"location":"initial-steps/#getting-company-financials","title":"Getting Company Financials","text":"<p>You can get financials for a company using the <code>get_financials</code> function. For example:</p> <pre><code>financials = c.get_financials()\nfinancials.income_statement()\n</code></pre>"},{"location":"initial-steps/#viewing-unpublished-filings","title":"Viewing unpublished filings","text":"<p>The SEC publishes the filing indexes week nights by 10:30 PM EST. To get the latest filings not yet in the index use the <code>get_latest_filings</code> function. For example:</p> <pre><code>filings = get_latest_filings()\n</code></pre>"},{"location":"insider-filings/","title":"Insider Filings","text":"<p>Insider filings are reports filed by company insiders (such as officers, directors, and employees) when they buy or sell shares in their own companies. </p> <p>There are several types of insider filings that investors should be aware of:</p> <ol> <li>Form 3: Filed by insiders to report their initial ownership of company stock - typically filed when an insider joins a company or becomes an officer or director.</li> <li>Form 4: Filed to report any changes in ownership of company stock - typically filed when an insider buys or sells company stock.</li> <li>Form 5: Includes any transactions that were not reported on Form 4 - typically filed at the end of the fiscal year.</li> </ol>"},{"location":"insider-filings/#getting-insider-filings","title":"Getting Insider Filings","text":"<p>You can access insider filings using the <code>get_filings</code> method of the <code>Company</code> class.</p> <pre><code>c = Company(\"VRTX\")\nfilings = c.get_filings(form=[3,4,5])\n</code></pre> <p>You can use either the string or numeric value for the form e.g. \"3\" or 3.</p> <pre><code>filings = c.get_filings(form=4)\n</code></pre> <p>If you are more interested in insider filings non-specific to a particular company, you can use the <code>get_insider_filings</code> method of the <code>Filing</code> class.</p> <pre><code>filings = get_filings(form=[3,4,5])\n</code></pre>"},{"location":"insider-filings/#the-ownership-data-object","title":"The Ownership data object","text":"<p>The <code>Ownership</code> object is a data object that represents the basic information contained in an insider filing. It is created by parsing the  XML attachment with the data about the insider transactions in the filing. </p> <p>The <code>Ownership</code> is subclassed into <code>Form3</code>, <code>Form4</code>, and <code>Form5</code> objects that contain additional information specific to the type of filing. So if you have a Form 3 filing you can convert the <code>Ownership</code> object to a <code>Form3</code> object to get the additional information.</p> <pre><code>form3 = filing.obj()\n</code></pre>"},{"location":"insider-filings/#converting-ownership-to-a-dataframe","title":"Converting Ownership to a dataframe","text":"<p>You can convert the <code>Ownership</code> object to a pandas dataframe using the <code>to_dataframe()</code> method.</p> <pre><code>df = form4.to_dataframe()\n</code></pre> <p></p> <p>By default this will show each of the trades made in that filing. If you want to see the aggregated summary of the trades you can set <code>detailed=False</code></p> <pre><code>df = form4.to_dataframe(detailed=False)\n</code></pre> <p></p> <p>By default the dataframe will include metadata about the filing. If you want to exclude the metadata you can set <code>include_metadata=False</code></p> <pre><code>df = form4.to_dataframe(include_metadata=False)\n</code></pre> <p></p> <p>The specifics of the data in the dataframe will depend on the type of filing and the information contained in the filing.</p>"},{"location":"insider-filings/#form-3-initial-beneficial-ownership","title":"Form 3 - Initial Beneficial Ownership","text":"<p>The <code>Form3</code> data object is created from a form 3 filing as follows</p> <pre><code>form3 = filing.obj()\n</code></pre> <p></p>"},{"location":"insider-filings/#form-4-changes-in-beneficial-ownership","title":"Form 4 - Changes in Beneficial Ownership","text":"<p>In November 2020 Bruce Sachs, an independent director of Vertex Pharmaceuticals, filed a Form 4 to report the purchase of 15,000 shares of Vertex Pharmaceuticals (VRTX) at an average price of $217.36 per share.</p> <p></p> <p>The filing object shows basic information but none of the details of the transaction. To get the details of the transaction you can use the <code>obj()</code> method to convert the filing to a <code>Form4</code> object.</p> <pre><code>form4 = filing.obj()\n</code></pre> <p></p> <p>The form 4 shows the individual transactions that make up the total transaction. In this case, the total transaction was the purchase of 15,000 shares of Vertex Pharmaceuticals.</p> <p>Additional information about the transaction can be found in the <code>TransactionSummary</code> object.</p> <pre><code>ownership_summary = form4.get_ownership_summary()\n</code></pre> <p></p>"},{"location":"insider-filings/#form-5-annual-changes-in-beneficial-ownership","title":"Form 5 - Annual Changes in Beneficial Ownership","text":"<p>Form 5 filings are essentially the same as Form 4 filings but are filed at the end of the fiscal year to report any transactions that were not reported on Form 4. So the data in a Form 5 filing will be similar to that in a Form 4 filing.</p>"},{"location":"insider-filings/#ownership-summary","title":"Ownership Summary","text":"<p>The <code>Ownership</code> object has a <code>get_ownership_summary()</code> method that returns either an <code>InitialOwnershipSummary</code> for Form 3 filings or a <code>TransactionSummary</code> object for Forms 4 and 5. These object contain more specific details about the ownership filing.</p> <pre><code>ownership_summary = form4.get_ownership_summary()\n</code></pre>"},{"location":"insider-filings/#initial-ownership-summary","title":"Initial Ownership Summary","text":"<p>The <code>InitialOwnershipSummary</code> object contains the following fields:</p> <ul> <li><code>total_shares</code> - the total number of shares owned by the insider</li> <li><code>has_derivatives</code> - a boolean indicating whether the insider owns any derivatives</li> <li><code>no_securities</code> - a boolean indicating whether the insider owns any securities</li> <li><code>holdings</code>: List[SecurityHolding] - a list of SecurityHolding objects representing the insider's holdings</li> </ul> <p>The <code>SecurityHolding</code> object is defined as follows:</p> <pre><code>@dataclass\nclass SecurityHolding:\n    \"\"\"Represents a security holding (for Form 3)\"\"\"\n    security_type: str  # \"non-derivative\" or \"derivative\"\n    security_title: str\n    shares: int\n    direct_ownership: bool\n    ownership_nature: str = \"\"\n    underlying_security: str = \"\"\n    underlying_shares: int = 0\n    exercise_price: Optional[float] = None\n    exercise_date: str = \"\"\n    expiration_date: str = \"\"\n</code></pre> <p><code>SecurityHolding</code> also has these properties</p> <ul> <li><code>ownership_description</code> - a human-readable description of the type of ownership \"Direct/Indirect\"</li> <li><code>is_derivative</code> - a boolean indicating whether the holding is a derivative</li> </ul>"},{"location":"insider-filings/#transaction-summary","title":"Transaction Summary","text":"<p>The <code>TransactionSummary</code> object is defined as follows:</p> <pre><code>@dataclass\nclass TransactionActivity:\n    \"\"\"Represents a specific transaction activity type\"\"\"\n    transaction_type: str\n    code: str\n    shares: Any = 0  # Handle footnote references\n    value: Any = 0\n    price_per_share: Any = None  # Add explicit price per share field\n    description: str = \"\"\n</code></pre> <p>It also has these properties as a convenience in case any of the expected numeric values are not in fact numeric.</p> <ul> <li><code>shares_numeric</code> - the number of shares involved in the transaction</li> <li><code>value_numeric</code> - the value of the transaction</li> <li><code>price_numeric</code> - the price per share of the transaction</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Get started with edgartools in minutes. This guide covers all installation methods and system requirements.</p>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.8 or higher</li> </ul>"},{"location":"installation/#quick-installation","title":"Quick Installation","text":""},{"location":"installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<pre><code>pip install edgartools\n</code></pre> <p>For the latest features and bug fixes:</p> <pre><code>pip install -U edgartools\n</code></pre>"},{"location":"installation/#using-uv-fast-alternative","title":"Using uv (Fast Alternative)","text":"<pre><code>uv pip install edgartools\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute or use the latest development version:</p> <pre><code># Clone the repository\ngit clone https://github.com/dgunning/edgartools.git\ncd edgartools\n\n# Install in development mode\npip install -e .\n\n# Or with development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<p>Test your installation by running this simple command:</p> <pre><code>from edgar import get_filings\nprint(\"EdgarTools installed successfully!\")\n</code></pre> <p>Expected output:</p> <pre><code>EdgarTools installed successfully!\n</code></pre> <p>If you see this message, your installation is successful. </p> <p>If you see <code>ImportError: cannot import name 'get_filings' from 'edgar'</code> then you have likely installed another package named edgar not edgartools. If you encounter this error, uninstall the conflicting package and reinstall edgartools:</p> <pre><code>pip uninstall edgar\npip install edgartools\n</code></pre>"},{"location":"installation/#setting-your-identity","title":"Setting Your Identity","text":"<p>Before using edgartools, you must set your identity to comply with SEC requirements:</p>"},{"location":"installation/#method-1-in-python-code","title":"Method 1: In Python Code","text":"<pre><code>from edgar import set_identity\n\n# Use your name and email\nset_identity(\"John Doe john.doe@company.com\")\n\n# Or just your email\nset_identity(\"john.doe@company.com\")\n</code></pre>"},{"location":"installation/#method-2-environment-variable","title":"Method 2: Environment Variable","text":"<p>Set the <code>EDGAR_IDENTITY</code> environment variable:</p> <p>Linux/macOS:</p> <pre><code>export EDGAR_IDENTITY=\"John Doe john.doe@company.com\"\n</code></pre> <p>Windows:</p> <pre><code>set EDGAR_IDENTITY=John Doe john.doe@company.com\n</code></pre> <p>Windows PowerShell:</p> <pre><code>$env:EDGAR_IDENTITY = \"John Doe john.doe@company.com\"\n</code></pre>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>For enhanced functionality, install these optional packages:</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#importerror-no-module-named-edgar","title":"ImportError: No module named 'edgar'","text":"<p>Problem: Package not installed correctly Solution: </p> <pre><code>pip uninstall edgar\npip install --force-reinstall edgartools\n</code></pre>"},{"location":"installation/#sec-identity-error","title":"SEC Identity Error","text":"<p>Problem: Identity not set Solution: Follow the Setting Your Identity section above</p>"},{"location":"installation/#permission-errors-on-windows","title":"Permission Errors on Windows","text":"<p>Problem: Insufficient permissions Solution: Run as administrator or use <code>--user</code> flag:</p> <pre><code>pip install --user edgartools\n</code></pre>"},{"location":"installation/#ssl-certificate-errors","title":"SSL Certificate Errors","text":"<p>Problem: Corporate firewall or proxy Solution: Configure pip for your proxy:</p> <pre><code>pip install --trusted-host pypi.org --trusted-host pypi.python.org edgartools\n</code></pre>"},{"location":"installation/#memory-issues-with-large-datasets","title":"Memory Issues with Large Datasets","text":"<p>Problem: Out of memory errors Solution:  - Increase system memory - Use data chunking techniques - Process data in smaller batches</p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Search existing issues: GitHub Issues</li> <li>Create a new issue: Include Python version, OS, and error messages</li> <li>Join the community: Discussions and support channels</li> </ol>"},{"location":"installation/#virtual-environment-setup","title":"Virtual Environment Setup","text":"<p>For isolated development, use virtual environments:</p>"},{"location":"installation/#using-venv-python-38","title":"Using venv (Python 3.8+)","text":"<pre><code># Create virtual environment\npython -m venv edgar-env\n\n# Activate (Linux/macOS)\nsource edgar-env/bin/activate\n\n# Activate (Windows)\nedgar-env\\Scripts\\activate\n\n# Install edgartools\npip install edgartools\n\n# Deactivate when done\ndeactivate\n</code></pre>"},{"location":"installation/#performance-optimization","title":"Performance Optimization","text":"<p>For optimal performance:</p> <ol> <li>Use Local Storage to download and work with SEC filings locally</li> <li>Set reasonable limits when querying large datasets</li> <li>Use filtering to reduce data transfer</li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Read the Quick Start Guide for your first analysis</li> <li>Check the API Reference for detailed documentation</li> </ol>"},{"location":"installation/#security-considerations","title":"Security Considerations","text":"<ul> <li>Never commit your identity to version control</li> <li>Use environment variables for production deployments</li> <li>Follow SEC rate limits to avoid being blocked</li> <li>Keep your installation updated for security patches</li> </ul>"},{"location":"installation/#license","title":"License","text":"<p>EdgarTools is released under the MIT License. See LICENSE for details.</p>"},{"location":"local-data/","title":"Downloading to Local Storage","text":"<p>When you use edgartools to get Company, or the html content of a filing, this usually results in one of more requests to the SEC. However, you can download data in bulk to local storage to minimize these requests and speed up processing. </p> <p>This includes the following data</p> Data Descriptionn Company Submissions Company metadata, their 1000 most recent filings Company Facts Company facts Filing Attachments Filing attachments Reference data Reference data like company and mutual fund tickers, exchanges etc"},{"location":"local-data/#local-data-directory","title":"Local Data Directory","text":"<p>The local data directory is the directory where the data is stored. The default directory is</p> <p><code>&lt;USER_HOME&gt;/.edgar</code></p> <p>You can change this directory by setting the <code>EDGAR_LOCAL_DATA_DIR</code> environment variable.</p> <pre><code>export EDGAR_LOCAL_DATA_DIR=\"/path/to/local/data\"\n</code></pre>"},{"location":"local-data/#using-local-storage","title":"Using local storage","text":"<p>By default local storage is not used and the library will access the data from the SEC website.  To use local storage you have to </p> <ol> <li>Download data using <code>download_edgar_data()</code></li> <li>Turn on local storage using the environment variable <code>EDGAR_USE_LOCAL_DATA</code> or by calling <code>use_local_storage()</code></li> </ol>"},{"location":"local-data/#downloading-data-to-local-storage","title":"Downloading data to local storage","text":"<p>You can download data to local storage by calling the <code>download_edgar_data()</code> function.  The function takes the following parameters so you have the option to download only the data you need.</p> <pre><code>download_edgar_data(submissions: bool = True,\n                    facts: bool = True,\n                    reference: bool = True):\n    ...\n</code></pre>"},{"location":"local-data/#downloading-complete-filings","title":"Downloading Complete Filings","text":"<p>You can download filings to local storage by calling the <code>download_filings()</code> function. This will download for each filing a complete SGML text file that contains all the attachments for that filing. These will be placed in the directory <code>EDGAR_LOCAL_DATA_DIR/filings/YYYYMMDD</code>. </p> <p>If local storage is enabled, edgartools will first check if the filing is available in local storage before making a request to the SEC. This will speed up processing and for the most part calls like <code>html()</code> and <code>text()</code> will behave transparently.</p> <p>Note that there are some differences between local attachments and attachments when doownloaded from the SEC.</p>"},{"location":"local-data/#downloading-by-dates","title":"Downloading by dates","text":"<p>The <code>download_filings(filing_date)</code> function accepts a filing date that can be a single date or a range of dates. The date format must be <code>YYYY-MM-DD</code> or <code>YYYY-MM-DD:YYYY-MM-DD</code>. You can also use open ended ranges like <code>YYYY-MM-DD:</code> or <code>:YYYY-MM-DD</code>. </p> <p>Note that downloading filing attachment files can take a long time so be prepared when downloading for a range of dates.</p>"},{"location":"local-data/#accessing-the-downloaded-filings","title":"Accessing the downloaded filings","text":"<p>When you call <code>filing.attachments</code> on a locally downloaded filing, you will have access to the attachments that were downloaded. If you want to have each file independently you can use <code>attachments.download()</code>.</p> <pre><code>def download(self, path: Union[str, Path], archive: bool = False):\n    \"\"\"\n     Download all the attachments to a specified path.\n    If the path is a directory, the file is saved with its original name in that directory.\n    If the path is a file, the file is saved with the given path name.\n    If archive is True, the attachments are saved in a zip file.\n    path: str or Path - The path to save the attachments\n    archive: bool (default False) - If True, save the attachments in a zip file\n    \"\"\"\n</code></pre>"},{"location":"navigating-filings/","title":"Navigating Filings","text":""},{"location":"navigating-filings/#paginating-filings","title":"Paginating filings","text":"<p>The <code>Filings</code> object is a container for a list of filings. The list of filings can  be large but by default you can only see the first page of filings. </p> <p>To change the page, you can paginate filings using the <code>next</code> and <code>prev</code> methods. For example:</p> <pre><code>filings = get_filings()\nfilings.next()\nfilings.previous()\n</code></pre>"},{"location":"navigating-filings/#looping-through-filings","title":"Looping through filings","text":"<p>You can loop through filings using the <code>for</code> loop. For example:</p> <pre><code>\nfilings = get_filings()\nfor filing in filings:\n    ...\n    # Do something with the filing\n</code></pre>"},{"location":"navigating-filings/#getting-related-filings","title":"Getting Related Filings","text":"<p>Filings can be related to other filings using the file number. In some cases this relationship can be meaningful, as in they represent a group of filings for a specific securities offering. The link between the filing is via the <code>file_number</code> attribute of the filing, which is an identifier that the SEC uses to group filings.</p> <p>You can get related filings using the <code>get_related_filings</code> method. For example:</p> <pre><code>filing = get_filing('0000320193-22-000002')\nfilings = filing.related_filings()\n</code></pre>"},{"location":"parsing-filing-data/","title":"Parsing Filing Data","text":"<p>An SEC filing represents information a company wishes to make public. The information is sometimes contained in data files attached to the filing, such as XBRL, XML or JSON.</p> <p>In edgartools each Filing has a <code>.obj()</code> function that converts the filing to a parsed version of the data file.</p> <p>For example, the following code converts the filing for the 10-K for Apple Inc. to a <code>TenK</code> object containing the data from the filing:</p> <pre><code>from edgar import get_filings \nfilings = get_filings(form=\"10-K\")\nfiling = filings[0]\ntenk = filing.obj()\n</code></pre> <p>Under the hood, the <code>.obj()</code> function gets the data file for the filing, which is usually the filing's XML, parses it, and converts it to the approaptate data object.</p> <p>If a filing has no corresponding data object, the <code>.obj()</code> function returns <code>None</code></p>"},{"location":"parsing-filing-data/#filing-types-with-data-objects","title":"Filing types with data objects","text":"<p>The following table lists the filing types that have data objects:</p> Filing type Data object Description 10-K <code>TenK</code> Annual report 10-Q <code>TenQ</code> Quarterly report 8-K <code>EightK</code> Current report 144 <code>Form144</code> Insider trading report 3,4,5 <code>Ownership</code> Insider trading report D <code>Effect</code> Effect filing for the Form D NPORT <code>NPORT</code> Investment company report 13F-HR <code>ThirteenF</code> Institutional investment manager's report Any other filing with XBRL <code>XbrlFiling</code> XBRL filing object with the data"},{"location":"parsing-filing-data/#ownership-documents","title":"Ownership Documents","text":"<p>Ownership documents are SEC forms that contain information about ownership of securities.</p>"},{"location":"parsing-filing-data/#ownership-forms","title":"Ownership Forms","text":"Form Description 3 Initial statement of beneficial ownership of securities 4 Statement of changes of beneficial ownership of securities 5 Annual statement of changes in beneficial ownership of securities <p>The module <code>edgar.ownership</code> module parses XML into an <code>OwnershipDocument</code> instance,  containing data about transactions and holdings.</p>"},{"location":"parsing-filing-data/#getting-ownership-documents","title":"Getting Ownership Documents","text":"<ul> <li>get a form 3, 4, or 5 filing</li> <li>get the xml document</li> <li>call <code>OwnershipDocument.from_xml()</code></li> </ul> <pre><code>from edgar import CompanyData\nfrom edgar.ownership import Ownership\n\n# Get Snowflake\ncompany = CompanyData.for_ticker(\"SNOW\")\n\n# Get Form 4 filings for Snowflake\nfilings = company.get_filings(form=\"4\")\n\n# Get the first filing\nfiling = filings[0]\n\n# Get the filing xml\nxml = filing.xml()\n\n# Now get the OwnershipDocument\nownership = Ownership.from_xml(xml)\n</code></pre>"},{"location":"parsing-filing-data/#derivative-table","title":"Derivative Table","text":"<p>This contains data on derivative holdings and transactions. To access it call <code>ownership_document.derivatives</code>.</p>"},{"location":"parsing-filing-data/#derivative-holdings","title":"Derivative Holdings","text":"<p>To access derivative transactions use <code>ownership.derivatives.holdings</code></p>"},{"location":"parsing-filing-data/#derivative-transactions","title":"Derivative Transactions","text":"<p>To access derivative transactions use <code>ownership.derivatives.transactions</code></p> <p>You can access individual transaction using the <code>[]</code> notation.</p> <pre><code>ownership.derivative_table.transactions[0]\n</code></pre> <p></p>"},{"location":"parsing-filing-data/#non-derivative-table","title":"Non Derivative Table","text":"<p>This contains data on non-derivative holdings and transactions. To access it call <code>ownership_document.non_ derivatives</code>.</p>"},{"location":"parsing-filing-data/#non-derivative-holdings","title":"Non Derivative Holdings","text":"<p>To access derivative holdings use <code>ownership.non_derivatives.holdings</code></p> <p>You can access individual holdings using the <code>[]</code> notation.</p> <pre><code>holding = ownership.non_derivative_table.holdings[0]\nholding\n</code></pre> <p></p>"},{"location":"parsing-filing-data/#non-derivative-transactions","title":"Non Derivative Transactions","text":"<p>To access derivative transactions use <code>ownership.non_derivatives.transactions</code></p> <p>You can access individual transactions using the <code>[]</code> notation.</p> <pre><code>transaction = ownership.non_derivative_table.transactions[0]\ntransaction\n</code></pre>"},{"location":"quick-guide/","title":"Quick Guide","text":"Code Set your EDGAR identity in Linux/Mac <code>export EDGAR_IDENTITY=\"email@domain.com\"</code> Set your EDGAR identity in Windows <code>set EDGAR_IDENTITY=\"email@domain.com\"</code> Set identity in Windows Powershell <code>$env:EDGAR_IDENTITY=\"email@domain.com\"</code> Set identity in Python <code>set_identity(\"email@domain.com\")</code> Importing the library <code>from edgar import *</code>"},{"location":"quick-guide/#working-with-filings","title":"Working with filings \ud83d\udcc1","text":""},{"location":"quick-guide/#getting-filings","title":"\ud83d\udd0d Getting Filings","text":"Code \ud83d\udcc5 Get filings for the year to date <code>filings = get_filings()</code> \ud83d\udcca Get only XBRL filings <code>filings = get_filings(index=\"xbrl\")</code> \ud83d\udcc6 Get filings for a specific year <code>filings = get_filings(2020)</code> \ud83d\uddd3\ufe0f Get filings for a specific quarter <code>filings = get_filings(2020, 1)</code> \ud83d\udcda Get filings for multiple years <code>filings = get_filings([2020, 2021])</code> \ud83d\udcc8 Get filings for a range of years <code>filings = get_filings(year=range(2010, 2020))</code> \ud83d\udcc8 Get filings released just now <code>filings = get_latest_filings()</code>"},{"location":"quick-guide/#filtering-filings","title":"\ud83d\udcc4 Filtering Filings","text":"Code \ud83d\udcdd Filter by form type <code>filings.filter(form=\"10-K\")</code> \ud83d\udcd1 Filter by multiple forms <code>filings.filter(form=[\"10-K\", \"10-Q\"])</code> \ud83d\udd04 Include form amendments <code>filings.filter(form=\"10-K\", amendments=True)</code> \ud83c\udfe2 Filter by CIK <code>filings.filter(cik=\"0000320193\")</code> \ud83c\udfd9\ufe0f Filter by multiple CIKs <code>filings.filter(cik=[\"0000320193\", \"1018724\"])</code> \ud83c\udff7\ufe0f Filter by ticker <code>filings.filter(ticker=\"AAPL\")</code> \ud83c\udff7\ufe0f\ud83c\udff7\ufe0f Filter by multiple tickers <code>filings.filter(ticker=[\"AAPL\", \"MSFT\"])</code> \ud83d\udcc5 Filter on a specific date <code>filings.filter(date=\"2020-01-01\")</code> \ud83d\udcc5\u2194\ufe0f\ud83d\udcc5 Filter between dates <code>filings.filter(date=\"2020-01-01:2020-03-01\")</code> \ud83d\udcc5\u2b05\ufe0f Filter before a date <code>filings.filter(date=\":2020-03-01\")</code> \ud83d\udcc5\u27a1\ufe0f Filter after a date <code>filings.filter(date=\"2020-03-01:\")</code> \ud83d\udd00 Combine multiple filters <code>filings.filter(form=\"10-K\", date=\"2020-01-01:\", ticker=\"AAPL\")</code>"},{"location":"quick-guide/#viewing-and-manipulating-filings","title":"\ud83d\udcca Viewing and Manipulating Filings","text":"Code \u23ed\ufe0f Show the next page of filings <code>filings.next()</code> \u23ee\ufe0f Show the previous page of filings <code>filings.previous()</code> \ud83d\udd1d Get the first n filings <code>filings.head(20)</code> \ud83d\udd1a Get the last n filings <code>filings.tail(20)</code> \ud83d\udd52 Get the latest n filings by date <code>filings.latest(20)</code> \ud83c\udfb2 Get a random sample of filings <code>filings.sample(20)</code> \ud83d\udc3c Get filings as a pandas dataframe <code>filings.to_pandas()</code>"},{"location":"quick-guide/#working-with-a-filing","title":"Working with a filing \ud83d\udcc4","text":""},{"location":"quick-guide/#accessing-and-viewing-a-filing","title":"\ud83d\udd0d Accessing and viewing a Filing","text":"Code \ud83d\udccc Get a single filing <code>filing = filings[3]</code> \ud83d\udd22 Get a filing by accession number <code>filing = get_by_accession_number(\"0000320193-20-34576\")</code> \ud83c\udfe0 Get the filing homepage <code>filing.homepage</code> \ud83c\udf10 Open a filing in the browser <code>filing.open()</code> \ud83c\udfe0 Open homepage in the browser <code>filing.homepage.open()</code> \ud83d\udcbb View the filing in the terminal <code>filing.view()</code>"},{"location":"quick-guide/#extracting-filing-content","title":"\ud83d\udcca Extracting Filing Content","text":"Code \ud83c\udf10 Get the HTML of the filing <code>filing.html()</code> \ud83d\udcca Get the XBRL of the filing <code>filing.xbrl()</code> \ud83d\udcdd Get the filing as markdown <code>filing.markdown()</code> \ud83d\udcc4 Get the full submission text <code>filing.full_text_submission()</code> \ud83d\udd22 Get and parse filing data object <code>filing.obj()</code> \ud83d\udcd1 Get filing header <code>filing.header</code>"},{"location":"quick-guide/#searching-inside-a-filing","title":"\ud83d\udd0e Searching inside a Filing","text":"Code \ud83d\udd0d Search within the filing <code>filing.search(\"query\")</code> \ud83d\udd0d Search with regex <code>filing.search(\"pattern\", regex=True)</code> \ud83d\udcca Get filing sections <code>filing.sections()</code>"},{"location":"quick-guide/#working-with-attachments","title":"\ud83d\udcce Working with Attachments","text":"Code \ud83d\udcc1 Get all filing attachments <code>filing.attachments</code> \ud83d\udcc4 Get a single attachment <code>attachment = filing.attachments[0]</code> \ud83c\udf10 Open attachment in browser <code>attachment.open()</code> \u2b07\ufe0f Download an attachment <code>content = attachment.download()</code>"},{"location":"quick-guide/#working-with-a-company","title":"Working with a company","text":"Code Get a company by ticker <code>company = Company(\"AAPL\")</code> Get a company by CIK <code>company = Company(\"0000320193\")</code> Get company facts <code>company.get_facts()</code> Get company facts as a pandas dataframe <code>company.get_facts().to_pandas()</code> Get company filings <code>company.get_filings()</code> Get company filings by form <code>company.get_filings(form=\"10-K\")</code> Get the latest 10-Q <code>company.latest(\"10-Q\")</code> Get the last 5 10-Q's <code>company.get_filings(form=\"10-Q\", 5)</code> Get a company filing by accession_number <code>company.get_filing(accession_number=\"0000320193-21-000139\")</code> Get the company's financials <code>company.get_financials()</code> Get the company's balance sheet <code>company.financials.balance_sheet()</code> Get the company's income statement <code>company.financials.income_statement()</code> Get the company's cash flow statement <code>company.financials.cashflow_statement()</code>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with EdgarTools in 5 minutes. This guide will take you from installation to your first meaningful analysis.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Internet connection</li> <li>Basic familiarity with Python</li> </ul>"},{"location":"quickstart/#step-1-install-edgartools","title":"Step 1: Install EdgarTools","text":"<pre><code>pip install edgartools\n</code></pre>"},{"location":"quickstart/#step-2-set-your-identity","title":"Step 2: Set Your Identity","text":"<p>The SEC requires all API users to identify themselves. Set your identity once:</p> <pre><code>from edgar import set_identity\n\n# Use your name and email (required by SEC)\nset_identity(\"John Doe john.doe@company.com\")\n</code></pre> <p>\ud83d\udca1 Tip: You can also set the <code>EDGAR_IDENTITY</code> environment variable to avoid doing this in every script.</p>"},{"location":"quickstart/#step-3-your-first-filings","title":"Step 3: Your first filings","text":"<p>Let's see available filings on the SEC Edgar</p> <pre><code>from edgar import *\n\nfilings = get_filings()\n</code></pre> <p></p>"},{"location":"quickstart/#step-4-filtering-for-insider-trading-filings","title":"Step 4: Filtering for insider trading filings","text":"<p>To focus on insider trading activity, filter for Form 4 filings:</p> <pre><code>insider_filings = filings.filter(form=\"4\")\n</code></pre> <p></p>"},{"location":"quickstart/#step-5-getting-a-company","title":"Step 5: Getting a Company","text":"<p>If you would like to focus on a specific company, you can use the <code>Company</code> class. For example, to analyze Apple Inc. (AAPL):</p> <pre><code>c = Company(\"AAPL\")  # Apple Inc.\n</code></pre> <p></p>"},{"location":"quickstart/#step-6-getting-filings-for-a-company","title":"Step 6: Getting filings for a Company","text":"<p>You can retrieve all filings for a company using the <code>company.get_filings</code> method:</p> <pre><code># Get Apple's recent SEC filings\naapl_filings = c.get_filings()\n</code></pre> <p></p>"},{"location":"quickstart/#step-7-insider-filings-for-apple-inc","title":"Step 7: Insider Filings for Apple Inc.","text":"<p>To analyze insider trading activity for Apple Inc., filter the filings for Form 4:</p> <pre><code>insider_filings = c.get_filings(form=\"4\")\n# Get the first insider filing\nf = insider_filings[0]\n\n# Convert to a Form4 object\nform4 = f.obj()\n</code></pre> <p></p>"},{"location":"quickstart/#what-you-just-learned","title":"What You Just Learned","text":"<p>In 5 minutes, you:</p> <ol> <li>\u2705 Installed and configured EdgarTools</li> <li>\u2705 Retrieved and filtered SEC filings</li> <li>\u2705 Focused on insider trading with Form 4</li> <li>\u2705 Analyzed a specific company (Apple Inc.)</li> <li>\u2705 Extracted structured data from filings</li> <li>\u2705 Converted filings to data objects for easy analysis</li> <li>\u2705 Explored company filings and insider activity</li> </ol>"},{"location":"quickstart/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Documentation: Browse our comprehensive guides</li> <li>\ud83d\udcac GitHub Discussions: Ask questions and share insights  </li> <li>\ud83d\udc1b Issues: Report bugs or request features</li> </ul>"},{"location":"quickstart/#support-edgartools","title":"Support EdgarTools","text":"<p>If you found this quickstart helpful, consider supporting EdgarTools development:</p> <p> </p> <p>Your support helps us maintain and improve EdgarTools!</p> <p>\ud83c\udf89 Congratulations! You're now ready to analyze SEC data with EdgarTools. </p> <p>What's your next analysis goal? Choose a path above and dive deeper into the world of financial data analysis.</p>"},{"location":"sgml/","title":"SGML","text":"<p>The SEC EDGAR system uses a specialized subset of SGML (Standard Generalized Markup Language) for regulatory filings.  While commonly referred to as SGML, it implements a simplified version with SEC-specific tags and structures.  This format has been the backbone of SEC filings since the 1990s, chosen for its ability to maintain consistent document structure while supporting both structured data and free-form text.</p>"},{"location":"sgml/#understanding-sgml-container-formats","title":"Understanding SGML Container Formats","text":"<p>You might be familiar with SGML from having seeing the Full Text File (.txt) or the (.nc) formats in SEC filings.</p> <p>The SEC EDGAR system actually utilizes two distinct SGML container formats, each serving different purposes in the filing process:</p>"},{"location":"sgml/#complete-submission-text-file-txt","title":"Complete Submission Text File (.txt)","text":"<p>The .txt format contains the complete submission as received by EDGAR, including all documents, headers, and content. This is the primary public-facing format that preserves the exact submission. A typical .txt container begins with:</p> <pre><code>&lt;SEC-DOCUMENT&gt;0000320193-24-000123.txt : 20241101\n&lt;SEC-HEADER&gt;0000320193-24-000123.hdr.sgml : 20241101\n&lt;ACCEPTANCE-DATETIME&gt;20241101060136\nACCESSION NUMBER:      0000320193-24-000123\n</code></pre> <p>The .txt container includes: - Full document content - SEC headers - Metadata - All exhibits and attachments - Processing timestamps</p>"},{"location":"sgml/#non-public-complete-file-nc","title":"Non-Public Complete File (.nc)","text":"<p>The .nc format serves as a submission manifest or index file, containing metadata about the filing without the full content. This format is used for processing, validation, and internal SEC workflows. A typical .nc container starts with:</p> <pre><code>&lt;SUBMISSION&gt;\n&lt;ACCESSION-NUMBER&gt;0002002260-24-000001\n&lt;TYPE&gt;D\n&lt;PUBLIC-DOCUMENT-COUNT&gt;1\n&lt;ITEMS&gt;06b\n&lt;ITEMS&gt;3C\n</code></pre> <p>The .nc container tracks: - Submission type and status - Document counts - Reporting items - Cross-reference information - Processing instructions - Special handling requirements</p>"},{"location":"sgml/#understanding-the-sec-processing-pipeline","title":"Understanding the SEC Processing Pipeline","text":"<p>Understanding the relationship between these formats is crucial for processing SEC filings:</p> <ol> <li>Initial submission includes both formats</li> <li>.nc file is processed first for validation</li> <li>.txt file is processed for content extraction</li> <li>Both files are archived for record-keeping</li> <li>Public access is primarily to the .txt content</li> </ol> <p>This dual-format system enables the SEC to maintain separate processing pipelines for submission handling and public access while ensuring comprehensive record-keeping and validation.</p>"},{"location":"sgml/#how-edgartools-uses-sgml","title":"How edgartools uses SGML","text":"<p>The library uses the SGML to get the attachments and important metadata about the filing.</p> <pre><code>filing.attachments\n</code></pre> <p>the library will get the SGML file and parse it to get the attachments. You will mostly work with the objects and attributes of the <code>Filing</code> class, rather than directly with the SGML file.</p> <pre><code>    @property\n    def attachments(self):\n        # Return all the attachments on the filing\n        sgml_filing: FilingSGML = self.sgml()\n        return sgml_filing.attachments\n</code></pre> <p>The <code>sgml()</code> function will download the SGML file, or read from a file if using LocalStorage.</p>"},{"location":"sgml/#the-filingsgml-class","title":"The FilingSGML class","text":"<p>The <code>FilingSGML</code> class is used to parse the SGML file. It has a few methods to get the attachments, and the text of the filing.</p>"},{"location":"sgml/#parsing-sgml-from-a-file-or-a-url","title":"Parsing SGML from a file or a URL","text":"<p>The function <code>from_source</code> is used to create a <code>FilingSGML</code> object from a source. The source can be a string representing a file name or a URL, or it can be a <code>Path</code></p> <pre><code>sgml = FilingSGML.from_source(\"https://www.sec.gov/Archives/edgar/data/320193/000032019321000139/0000320193-21-000139.txt\")\n\n# OR\n\nsgml = FilingSGML.from_source(Path(\"path/to/0001398344-24-000491.nc\"))\n</code></pre> <p>This will parse either SGML format and return a <code>FilingSGML</code> object.</p>"},{"location":"sgml/#getting-the-attachments","title":"Getting the attachments","text":"<p>The <code>attachments</code> property will return an <code>Attachments</code> class that contains the <code>Attachment</code>.</p> <pre><code>attachments = sgml.attachments\n</code></pre>"},{"location":"sgml/#getting-the-content-of-a-file","title":"Getting the content of a file","text":"<p>You can get the content of a file using the <code>get_content</code> method.</p> <pre><code>sgml.get_content(\"EX-101.INS\")\n</code></pre>"},{"location":"sgml/#getting-html","title":"Getting html","text":"<p>You can get the html for the filing using the <code>html</code> method. This will find the primary HTML document in the <code>FilingSGML:</code> attachments, find the html and return it.</p> <pre><code>html = sgml.html()\n</code></pre>"},{"location":"sgml/#getting-xml","title":"Getting xml","text":"<p>You can get the xml for the filing using the <code>xml</code> method. This will find the primary XML document in the <code>FilingSGML:</code> attachments, find the xml and return it. This function will return None if no XML document is found.</p> <pre><code>sgml.xml()\n</code></pre>"},{"location":"ssl_verification/","title":"SSL Verification Configuration in edgartools","text":""},{"location":"ssl_verification/#overview","title":"Overview","text":"<p>This document outlines the design and recommendations for configuring SSL verification in the edgartools library, particularly useful for corporate environments with SSL inspection or similar network configurations.</p>"},{"location":"ssl_verification/#implementation","title":"Implementation","text":""},{"location":"ssl_verification/#1-environment-variable-control","title":"1. Environment Variable Control","text":"<p>The primary method is using the <code>EDGARTOOLS_VERIFY_SSL</code> environment variable:</p> <pre><code>verify = os.environ.get(\"EDGARTOOLS_VERIFY_SSL\", \"true\").lower() != \"false\"\n</code></pre> <ul> <li>Default: SSL verification enabled (safer default)</li> <li>To disable: Set <code>EDGARTOOLS_VERIFY_SSL=false</code></li> </ul>"},{"location":"ssl_verification/#2-internal-configuration","title":"2. Internal Configuration","text":"<p>The library's HTTP client layer can be configured to disable SSL verification when needed. This is handled internally by the library and doesn't require direct interaction with the HTTP clients.</p>"},{"location":"ssl_verification/#usage-examples","title":"Usage Examples","text":""},{"location":"ssl_verification/#using-environment-variable","title":"Using Environment Variable","text":"<pre><code># Disable SSL verification\nexport EDGARTOOLS_VERIFY_SSL=false\npython your_script.py\n\n# Enable SSL verification (default)\nexport EDGARTOOLS_VERIFY_SSL=true\npython your_script.py\n</code></pre>"},{"location":"ssl_verification/#using-direct-configuration","title":"Using Direct Configuration","text":"<pre><code>from edgar import httpclient\n\n# Disable SSL verification for specific client\nwith httpclient.http_client(verify=False) as client:\n    # Make requests...\n    ...\n</code></pre>"},{"location":"ssl_verification/#security-considerations","title":"Security Considerations","text":"<ol> <li>Default Security: SSL verification is enabled by default to maintain security.</li> <li>Targeted Usage: Disable SSL verification only in controlled environments where necessary (e.g., corporate networks with SSL inspection).</li> <li>Risk Awareness: Disabling SSL verification makes HTTPS connections potentially insecure. Only use when you understand the security implications.</li> </ol>"},{"location":"ssl_verification/#best-practices","title":"Best Practices","text":"<ol> <li>Prefer Environment Variables: Use environment variables for global configuration to avoid hardcoding security settings.</li> <li>Configuration Scope: The SSL verification setting applies globally to all HTTP requests made by the library.</li> <li>Documentation: Always document when and why SSL verification is disabled in your code.</li> <li>Security Review: Have your security team review any permanent SSL verification disablement.</li> </ol>"},{"location":"ssl_verification/#technical-details","title":"Technical Details","text":"<p>The implementation is integrated into the <code>DEFAULT_PARAMS</code> in <code>httpclient.py</code>:</p> <pre><code>DEFAULT_PARAMS = {\n    \"timeout\": edgar_mode.http_timeout,\n    \"limits\": edgar_mode.limits,\n    \"default_encoding\": \"utf-8\",\n    \"verify\": os.environ.get(\"EDGAR_VERIFY_SSL\", \"true\").lower() != \"false\",\n}\n</code></pre> <p>This configuration affects both synchronous and asynchronous clients through the <code>_client_factory</code> and <code>async_http_client</code> functions.</p>"},{"location":"using-the-filings-api/","title":"Filings","text":"<p>To get started import from edgar and use the <code>get_filings</code> function.</p> <pre><code>from edgar import *\n\nfilings = get_filings()\n</code></pre> <p>This gets the list of filings for the current year and quarter into a <code>Filings</code> object. </p> <p></p> <p>If you need a different date range you can specify a year or years and a quarter or quarters. These are valid ways to specify the date range or filter by form or by filing date.</p> <pre><code>\n    &gt;&gt;&gt; filings = get_filings(2021) # Get filings for 2021\n\n    &gt;&gt;&gt; filings = get_filings(2021, 4) # Get filings for 2021 Q4\n\n    &gt;&gt;&gt; filings = get_filings(2021, [3,4]) # Get filings for 2021 Q3 and Q4\n\n    &gt;&gt;&gt; filings = get_filings([2020, 2021]) # Get filings for 2020 and 2021\n\n    &gt;&gt;&gt; filings = get_filings([2020, 2021], 4) # Get filings for Q4 of 2020 and 2021\n\n    &gt;&gt;&gt; filings = get_filings(range(2010, 2021)) # Get filings between 2010 and 2021 - does not include 2021\n\n    &gt;&gt;&gt; filings = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 for form D\n\n    &gt;&gt;&gt; filings = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 on \"2021-10-01\"\n\n    &gt;&gt;&gt; filings = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") # Get filings for 2021 Q4 between\n                                                                            # \"2021-10-01\" and \"2021-10-10\"\n</code></pre>"},{"location":"using-the-filings-api/#convert-the-filings-to-a-pandas-dataframe","title":"Convert the filings to a pandas dataframe","text":"<p>The filings data is stored in the <code>Filings</code> class as a <code>pyarrow.Table</code>. You can get the data as a pandas dataframe using <code>to_pandas</code></p> <pre><code>df = filings.to_pandas()\n</code></pre>"},{"location":"using-the-filings-api/#navigating-filings","title":"Navigating filings","text":"<p>The Filings object allows you to navigate through filings using <code>filings.next()</code> and <code>filings.prev()</code>.  This shows you pages of the data - the page size is about 50.</p> <pre><code># To see the next page of data\nfilings.next()\n\n# To see the previous page\nfilings.previous()\n\n# To see the current page\nfilings.current()\n</code></pre> <p></p>"},{"location":"using-the-filings-api/#getting-the-latest-filings","title":"Getting the latest filings","text":"<p>You can get the latest n filings by filing_date from a filings using <code>filings.latest()</code>.</p> <p>If you provide the parameter <code>n</code> it will return the latest <code>n</code> filings.</p> <pre><code>filing = filings.latest(n=5)\nfiling\n</code></pre> <p></p> <p>If you omit this parameter, or set <code>n=1</code> it will return a single `Filings object.</p> <pre><code>filing = filings.latest()\nfiling\n</code></pre> <p></p>"},{"location":"using-the-filings-api/#filtering-filings","title":"Filtering filings","text":"<p>You can filter the filings object using te <code>filter()</code> function. This allows you to filter by filing date, or by form.</p>"},{"location":"using-the-filings-api/#filtering-filings-by-date","title":"Filtering filings by date","text":"<p>To filter by filing date specify the filing date in YYYY-MM-DD format e.g. 2022-01-24 (Note the parameters <code>date</code> and <code>filing_date</code> are equivalent aliases for each other)</p> <pre><code>filings.filter(date=\"2021-01-24\") # or filings.filter(filing_date=\"2021-01-24\")\n</code></pre> <p>You can specify a filing date range using the colon</p> <pre><code>filings.filter(date=\"2021-01-12:2021-02-28\") \n</code></pre> <p>To filter by dates before a specified date use `:YYYY-MM-DD'</p> <pre><code>filings.filter(date=\":2021-02-28\") \n</code></pre> <p>To filter by dates after a specified date use `YYYY-MM-DD:'</p> <pre><code>filings.filter(date=\"2021-02-28:\") \n</code></pre>"},{"location":"using-the-filings-api/#filtering-filings-by-form","title":"Filtering filings by form","text":"<p>You can filter filings by form using the <code>form</code> parameter. </p> <pre><code>filings.filter(form=\"10-K\") \n</code></pre> <p>To filter by form e.g. 10-K and include form amendments use <code>amendments = True</code>. </p> <pre><code>filings.filter(form=\"10-K\", amendments=True) \n</code></pre> <p></p>"},{"location":"using-the-filings-api/#getting-a-single-filing","title":"Getting a single filing","text":"<p>You can get a single filing from the filings using the bracket operator <code>[]</code>,  specifying the index of the filing. The index is the value displayed in the leftmost position in the filings table. For example, to get the 10-Q for Costco in the table above use <code>filings[3]</code></p> <pre><code>filing = filings[3]\n</code></pre> <p></p>"},{"location":"using-the-filings-api/#view-the-filing-homepage","title":"View the filing homepage","text":"<p>You can view the filing homepage in the terminal using <code>filing.homepage</code></p> <p>This gives you access to the <code>FilingHomepage</code> class that you can use to list all the documents and datafiles on the filing.</p> <pre><code>filing.homepage\n</code></pre> <p></p>"},{"location":"using-the-filings-api/#open-a-filing","title":"Open a filing","text":"<p>You can open the filing in your browser using <code>filing.open()</code>. This will work on environments with access to the browser,  will probably not work on a remote server.</p> <pre><code>filing.open()\n</code></pre>"},{"location":"using-the-filings-api/#open-the-filing-homepage","title":"Open the Filing Homepage","text":"<p>You can open the filing homepage in the browser using <code>filing.homepage.open()</code>.</p> <pre><code>filing.homepage.open()\n</code></pre>"},{"location":"using-the-filings-api/#view-the-filing-as-markdown","title":"View the filing as Markdown","text":"<p>You can view the filing's HTML content as markdown in the console using <code>view()</code>. It works for all filing types but can be a little slow for filings with large HTML files</p> <pre><code>filing.view()\n</code></pre>"},{"location":"using-the-filings-api/#get-the-filings-html","title":"Get the filing's html","text":"<p>You can get the html content of the filing using<code>.html()</code></p> <pre><code>filing.html()\n</code></pre>"},{"location":"using-the-filings-api/#get-the-filings-html-as-markdown","title":"Get the filing's html as Markdown","text":"<p>You can get the html content as markdown using<code>.markdown()</code></p> <pre><code>filing.markdown()\n</code></pre>"},{"location":"using-the-filings-api/#working-with-xbrl-filings","title":"Working with XBRL filings","text":"<p>Some filings are in XBRL (eXtensible Business Markup Language) format.  These are mainly the newer filings, as the SEC has started requiring this for newer filings.</p> <p>If a filing is in XBRL format then it opens up a lot more ways to get structured data about that specific filing and also  about the company referred to in that filing.</p> <p>The <code>Filing</code> class has an <code>xbrl</code> function that will download, parse and structure the filing's XBRL document if one exists. If it does not exist, then <code>filing.xbrl()</code> will return <code>None</code>.</p> <p>The function <code>filing.xbrl()</code> returns a <code>FilingXbrl</code> instance, which wraps the data, and provides convenient ways of working with the xbrl data.</p> <pre><code>filing_xbrl = filing.xbrl()\n</code></pre> <p></p>"},{"location":"why-edgartools/","title":"Why Choose EdgarTools?","text":"<p>If you're working with SEC data, you have several options. Here's why EdgarTools stands out as the best choice for Python developers, researchers, and financial professionals.</p>"},{"location":"why-edgartools/#the-sec-data-challenge","title":"The SEC Data Challenge","text":"<p>Working with SEC filings has traditionally been painful:</p> <ul> <li>Complex file formats: Raw XBRL is verbose and hard to parse</li> <li>Inconsistent data: Different companies use different concepts for the same items</li> <li>Poor tooling: Existing solutions are either too basic or overly complex</li> <li>Performance issues: Large datasets take forever to process</li> <li>Documentation gaps: Sparse examples and unclear APIs</li> </ul> <p>EdgarTools solves all of these problems.</p>"},{"location":"why-edgartools/#how-edgartools-is-different","title":"How EdgarTools is Different","text":""},{"location":"why-edgartools/#built-for-real-users","title":"\ud83c\udfaf Built for Real Users","text":"<p>Unlike academic projects or corporate tools, EdgarTools is designed by practitioners for practitioners. Every feature addresses real pain points from actual SEC data analysis workflows.</p> <p>Other tools:</p> <pre><code># Complex setup, raw data\nimport sec_api\napi = sec_api.QueryApi(api_key=\"your_key\")\nquery = {\n    \"query\": {\"field\": \"cik\", \"operator\": \"=\", \"value\": \"0000320193\"},\n    \"from\": \"2020-01-01\", \n    \"to\": \"2023-12-31\"\n}\nfilings = api.get_filings(query)\n# Now parse raw XBRL...\n</code></pre> <p>EdgarTools:</p> <pre><code># Simple, clean API\nfrom edgar import Company\napple = Company(\"AAPL\")\nfinancials = apple.get_financials()\nrevenue = financials.get_revenue()  # Done!\n</code></pre>"},{"location":"why-edgartools/#data-quality-first","title":"\ud83d\udcca Data Quality First","text":"<p>EdgarTools doesn't just give you data\u2014it gives you clean, standardized, analysis-ready data.</p>"},{"location":"why-edgartools/#before-edgartools","title":"Before EdgarTools:","text":"<ul> <li>Spend 80% of time cleaning and standardizing data</li> <li>Deal with inconsistent concept mappings across companies</li> <li>Handle missing values and edge cases manually</li> <li>Write custom parsers for each filing type</li> </ul>"},{"location":"why-edgartools/#with-edgartools","title":"With EdgarTools:","text":"<ul> <li>Get standardized financial concepts automatically</li> <li>Clean data with proper data types and formatting</li> <li>Consistent APIs across all filing types</li> <li>Built-in handling of edge cases and variations</li> </ul> <p>Example: Revenue standardization</p> <pre><code># Tesla uses \"AutomotiveRevenue\", Microsoft uses \"ProductRevenue\" \n# EdgarTools maps both to standardized \"Revenue\" concept\ntesla_revenue = Company(\"TSLA\").get_financials().get_revenue()\nmsft_revenue = Company(\"MSFT\").get_financials().get_revenue()\n\n# Both return the same format, ready for comparison\ncomparison = pd.concat([tesla_revenue, msft_revenue], axis=1)\n</code></pre>"},{"location":"why-edgartools/#performance-that-scales","title":"\u26a1 Performance That Scales","text":"<p>Built for analysts who need to process hundreds or thousands of filings efficiently.</p> Operation EdgarTools Alternative Solutions Get 5 years of financials 2-3 seconds 30-60 seconds Parse 100 10-K filings 2-5 minutes 30-60 minutes Extract all insider trades 10-15 seconds 5-10 minutes Query XBRL facts Instant (cached) 5-15 seconds each <p>Performance features: - Smart caching reduces redundant API calls - Parallel processing for bulk operations - Memory-efficient streaming for large datasets - Pre-computed indexes for common queries</p>"},{"location":"why-edgartools/#developer-experience","title":"\ud83d\udee0 Developer Experience","text":"<p>EdgarTools is built by developers, for developers.</p>"},{"location":"why-edgartools/#type-safety-intellisense","title":"Type Safety &amp; IntelliSense","text":"<pre><code>from edgar import Company\n\ncompany = Company(\"AAPL\")  # Type: Company\nfilings = company.get_filings()  # Type: Filings\nfiling = filings.latest()  # Type: Filing\nfinancials = filing.obj().financials  # Full autocomplete support\n</code></pre>"},{"location":"why-edgartools/#rich-display-in-jupyter","title":"Rich Display in Jupyter","text":"<pre><code># Automatic pretty-printing\ncompany  # Shows company card with key info\nfilings  # Shows interactive table\nfinancials.income_statement  # Rich formatted statements\n</code></pre>"},{"location":"why-edgartools/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<pre><code>try:\n    company = Company(\"INVALID\")\nexcept CompanyNotFoundError as e:\n    print(f\"Company not found: {e}\")\n    suggestions = search_companies(\"Invalid Corp\")\n</code></pre>"},{"location":"why-edgartools/#complete-feature-set","title":"\ud83d\udd0d Complete Feature Set","text":"<p>EdgarTools covers the entire SEC ecosystem, not just basic filings.</p> Feature EdgarTools EDGAR-Tool sec-api python-edgar 10-K/10-Q Analysis \u2705 Full support \u2705 Basic \u2705 Raw data \u274c Limited XBRL Financial Data \u2705 Standardized \u26a0\ufe0f Raw only \u26a0\ufe0f Raw only \u274c No Insider Trading (Forms 3,4,5) \u2705 Structured \u274c No \u26a0\ufe0f Raw only \u274c No 13F Fund Holdings \u2705 Full analysis \u274c No \u26a0\ufe0f Basic \u274c No 8-K Event Monitoring \u2705 Event parsing \u26a0\ufe0f Text only \u26a0\ufe0f Raw only \u274c No Attachment Processing \u2705 All types \u274c No \u274c No \u274c No Text Extraction \u2705 Clean HTML\u2192Text \u26a0\ufe0f Basic \u274c No \u2705 Basic Local Caching \u2705 Intelligent \u274c No \u26a0\ufe0f Basic \u274c No Rate Limiting \u2705 Built-in \u274c Manual \u26a0\ufe0f Manual \u274c Manual"},{"location":"why-edgartools/#real-world-success-stories","title":"Real-World Success Stories","text":""},{"location":"why-edgartools/#financial-analysis-firm","title":"Financial Analysis Firm","text":"<p>\"EdgarTools reduced our data preparation time from 6 hours to 15 minutes. We can now analyze 500+ companies in the time it used to take for 10.\"</p> <p>Before: Custom scrapers, manual data cleaning, inconsistent results After: Automated pipelines, standardized data, 95% time savings</p>"},{"location":"why-edgartools/#academic-research","title":"Academic Research","text":"<p>\"For our corporate governance study of 3,000 companies over 10 years, EdgarTools made the impossible possible. The standardized data quality is exceptional.\"</p> <p>Challenge: Needed consistent financial metrics across thousands of filings Solution: EdgarTools' standardization engine handled concept mapping automatically</p>"},{"location":"why-edgartools/#investment-fund","title":"Investment Fund","text":"<p>\"We track insider trading across our entire portfolio in real-time. EdgarTools' Form 4 parsing is the most accurate we've found.\"</p> <p>Use case: Daily monitoring of insider transactions for 200+ holdings Result: Automated alerts, structured data for analysis, better investment decisions</p>"},{"location":"why-edgartools/#technical-superiority","title":"Technical Superiority","text":""},{"location":"why-edgartools/#smart-xbrl-processing","title":"Smart XBRL Processing","text":"<pre><code># EdgarTools understands XBRL semantics\nfinancials = company.get_financials()\n\n# Automatically handles:\n# - Concept hierarchies (Revenue &gt; Product Revenue &gt; Software Revenue)\n# - Time period alignment\n# - Unit conversion (thousands to actual values)\n# - Calculation relationships\n# - Dimensional breakdowns\n\nrevenue_breakdown = financials.get_concept_breakdown(\"Revenue\")\n# Returns: Product Revenue, Service Revenue, Subscription Revenue, etc.\n</code></pre>"},{"location":"why-edgartools/#intelligent-data-standardization","title":"Intelligent Data Standardization","text":"<pre><code># Works across companies with different taxonomies\ncompanies = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\n\n# Same code works for all companies\nfor ticker in companies:\n    company = Company(ticker)\n    metrics = {\n        'revenue': company.get_financials().get_revenue(),\n        'net_income': company.get_financials().get_net_income(),\n        'total_assets': company.get_financials().get_total_assets()\n    }\n    # Consistent data structure for all companies\n</code></pre>"},{"location":"why-edgartools/#advanced-query-capabilities","title":"Advanced Query Capabilities","text":"<pre><code># Complex financial analysis made simple\nfrom edgar import query\n\n# Find all companies with debt-to-equity &gt; 2.0\nhigh_leverage = query.companies.where(\n    debt_to_equity__gt=2.0,\n    market_cap__gt=1_000_000_000  # &gt; $1B market cap\n)\n\n# Get all tech companies that filed 8-K for acquisitions\ntech_acquisitions = query.filings.where(\n    form=\"8-K\",\n    industry=\"technology\",\n    contains=\"acquisition\",\n    filing_date__gte=\"2023-01-01\"\n)\n</code></pre>"},{"location":"why-edgartools/#roi-calculation","title":"ROI Calculation","text":""},{"location":"why-edgartools/#time-savings","title":"Time Savings","text":"<ul> <li>Data Collection: 90% faster than manual methods</li> <li>Data Cleaning: 95% reduction in preprocessing time  </li> <li>Analysis Setup: From hours to minutes</li> </ul>"},{"location":"why-edgartools/#cost-savings","title":"Cost Savings","text":"<ul> <li>No API fees: Free access to SEC data</li> <li>Reduced development time: Pre-built solutions</li> <li>Lower maintenance: Stable, well-tested codebase</li> </ul>"},{"location":"why-edgartools/#quality-improvements","title":"Quality Improvements","text":"<ul> <li>Fewer errors: Automated data validation</li> <li>Better insights: Standardized comparisons</li> <li>Faster iteration: Rapid prototyping and testing</li> </ul>"},{"location":"why-edgartools/#getting-started","title":"Getting Started","text":"<p>Ready to experience the difference? Here's how to get started:</p> <ol> <li>Install EdgarTools - 2 minutes</li> <li>Quick Tutorial - 5 minutes  </li> <li>Real Analysis - 15 minutes</li> </ol> <p>Or jump straight into a specific use case:</p> <ul> <li>Financial Statement Analysis</li> <li>Insider Trading Monitoring</li> <li>Fund Holdings Research</li> <li>Bulk Data Processing</li> </ul>"},{"location":"why-edgartools/#community-support","title":"Community &amp; Support","text":"<ul> <li>Active development: Regular releases with new features</li> <li>Responsive support: GitHub issues typically resolved within 24 hours</li> <li>Growing community: 1000+ users, contributors from finance and tech</li> <li>Enterprise support: Available for institutional users</li> </ul> <p>Stop fighting with SEC data. Start analyzing.</p> <p>Get started with EdgarTools \u2192</p>"},{"location":"xbrl-querying/","title":"XBRL Query Functionality","text":"<p>You can query the facts inside an XBRL instance using the XBRL query API. This allows you to get access to specific financial data, filter results and perform analysis on the financial facts contained within a single XBRL filing.</p>"},{"location":"xbrl-querying/#overview","title":"Overview","text":"<p>XBRL query functionality is built around two main classes: - <code>FactsView</code> - Provides access to raw XBRL facts from a single filing - <code>FactQuery</code> - Enables complex filtering and analysis of those facts</p>"},{"location":"xbrl-querying/#basic-usage","title":"Basic Usage","text":""},{"location":"xbrl-querying/#accessing-facts","title":"Accessing Facts","text":"<pre><code>from edgar import *\nfrom edgar.xbrl import XBRL\n\n# Get an XBRL filing\ncompany = Company(\"AAPL\")\nfiling = company.latest(\"10-K\")\nxb = filing.xbrl()\n</code></pre>"},{"location":"xbrl-querying/#access-the-facts-view","title":"Access the facts view","text":"<p>The <code>FactsView</code> provides direct access to the facts in the XBRL instance:</p> <pre><code>facts = xb.facts\nprint(f\"Total facts: {len(facts)}\")\n</code></pre>"},{"location":"xbrl-querying/#querying-facts","title":"Querying Facts","text":"<p>To query facts use the <code>query()</code> method on the <code>XBRL</code> instance and one of the <code>by_</code> functions e.g. <code>by_text()</code>. This returns a <code>FactQuery</code> object that allows you to filter and manipulate the facts.</p> <pre><code># Start a query\nresults = (xb.query()\n            .by_concept(\"us-gaap:PaymentsToAcquireAvailableForSaleSecuritiesDebt\")\n           )\n</code></pre> <p></p> <p>The result is an <code>edgar.xbrl.facts.FactQuery</code> object that contains the filtered facts. You can see from the rich display the available columns of whichg a few are selected by default.</p> <p>You can also convert the results to a DataFrame for easier manipulation including selecting which columns you want to view:</p> <pre><code>df = results.to_dataframe('concept', 'label', 'value', 'period_end')\n</code></pre>"},{"location":"xbrl-querying/#filtering-facts","title":"Filtering Facts","text":""},{"location":"xbrl-querying/#by-concept","title":"By Concept","text":"<p>You can filter facts by their concept names, which are unique identifiers for financial data items in XBRL.</p> <pre><code># Find revenue-related facts\nrevenue_query = xb.query().by_concept(\"us-gaap:Revenues\")\n</code></pre> <p>The namespace e.g. <code>us-gaap:</code> is optional, so you can use just the concept name like <code>Revenues</code>.</p> <p>Querying by concept does a partial regex match on the concept name</p> <p><code>by_concept('RevenueFrom')</code> matches <code>us-gaap:RevenueFromContractWithCustomerExcludingAssessedTax</code> and <code>us-gaap:RevenueFromContractWithCustomerTextBlock</code></p> <p>Use <code>exact=True</code> to match the full concept name exactly.</p>"},{"location":"xbrl-querying/#by-label","title":"By Label","text":"<p>You can filter facts by their labels, which are human-readable names associated with the concepts.</p> <pre><code># Search by label text\nrevenue_query = xb.query().by_label(\"Revenue\")\n</code></pre> <p>To specify exact matches or partial matches, use the <code>exact</code> parameter:</p> <pre><code>sales_query = xb.query().by_label(\"Revenue\", exact=False)\n</code></pre>"},{"location":"xbrl-querying/#by-value","title":"By Value","text":"<pre><code># Facts with values above $1 billion\nlarge_values = xb.query().by_value(lambda x: x &gt; 1_000_000_000)\n\n# Facts within a range\nrange_query = xb.query().by_value(lambda x: 100_000 &lt;= x &lt;= 1_000_000)\n</code></pre>"},{"location":"xbrl-querying/#by-statement-type","title":"By Statement Type","text":"<pre><code># Facts from specific statements\nincome_facts = xb.query().by_statement_type(\"IncomeStatement\")\nbalance_facts = xb.query().by_statement_type(\"BalanceSheet\")\n</code></pre>"},{"location":"xbrl-querying/#method-chaining","title":"Method Chaining","text":"<p>Combine multiple filters using method chaining:</p> <pre><code># Complex query with multiple filters\ncomplex_query = (xbrl.query()\n                 .by_statement(\"IncomeStatement\")\n                 .by_label(\"Revenue\")\n                 .by_value(lambda x: x &gt; 1_000_000)\n                 .sort_by('value', ascending=False)\n                 .limit(10))\n\nresults = complex_query.execute()\n</code></pre>"},{"location":"xbrl-querying/#data-transformations","title":"Data Transformations","text":""},{"location":"xbrl-querying/#sorting","title":"Sorting","text":"<pre><code># Sort by value (descending)\nsorted_query = xbrl.query().sort_by('value', ascending=False)\n\n# Sort by concept name\nconcept_sorted = xbrl.query().sort_by('concept')\n</code></pre>"},{"location":"xbrl-querying/#limiting-results","title":"Limiting Results","text":"<pre><code># Get top 10 results\ntop_10 = xbrl.query().limit(10)\n\n# Pagination\npage_1 = xbrl.query().limit(20)\npage_2 = xbrl.query().offset(20).limit(20)\n</code></pre>"},{"location":"xbrl-querying/#working-with-results","title":"Working with Results","text":""},{"location":"xbrl-querying/#dataframe-output","title":"DataFrame Output","text":"<pre><code># Get specific columns\ndf = query.to_dataframe('concept', 'label', 'value', 'period_end')\n\n# All available columns\nfull_df = query.to_dataframe()\n\n# Column information\nprint(\"Available columns:\", df.columns.tolist())\n</code></pre>"},{"location":"xbrl-querying/#fact-structure","title":"Fact Structure","text":"<p>Each fact contains the following key information:</p> <pre><code>fact = results[0]\nprint(f\"Concept: {fact['concept']}\")\nprint(f\"Label: {fact['label']}\")\nprint(f\"Value: {fact['value']}\")\nprint(f\"Period: {fact['period_end']}\")\nprint(f\"Units: {fact['units']}\")\nprint(f\"Decimals: {fact['decimals']}\")\n</code></pre>"},{"location":"xbrl-querying/#advanced-filtering","title":"Advanced Filtering","text":""},{"location":"xbrl-querying/#dimensions","title":"Dimensions","text":"<pre><code># Facts with specific dimensions\ndimensional_query = xbrl.query().by_dimension(\"ProductOrServiceAxis\", \"ProductMember\")\n\n# Facts with any value for a dimension\nany_product_dim = xbrl.query().by_dimension(\"ProductOrServiceAxis\")\n\n# Facts with NO dimensions (undimensioned facts)\nundimensioned_facts = xbrl.query().by_dimension(None)\n\n# Multiple dimensions\nmulti_dim = xbrl.query().by_dimensions({\n    \"ProductOrServiceAxis\": \"ProductMember\",\n    \"GeographyAxis\": \"USMember\"\n})\n</code></pre>"},{"location":"xbrl-querying/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use specific filters: Filter early to reduce data processing</li> <li>Limit results: Use <code>.limit()</code> for large datasets</li> <li>Cache queries: Store frequently used queries</li> <li>Select columns: Use <code>to_dataframe()</code> with specific columns</li> </ol> <pre><code># Efficient query pattern\nefficient_query = (xb.query()\n                   .by_statement(\"IncomeStatement\")  # Filter first\n                   .by_value(lambda x: x &gt; 0)        # Remove zeros\n                   .limit(100)                       # Limit results\n                   .to_dataframe('concept', 'value')) # Select columns\n</code></pre>"},{"location":"xbrl-querying/#examples","title":"Examples","text":""},{"location":"xbrl-querying/#finding-revenue-information","title":"Finding Revenue Information","text":"<pre><code># All revenue-related facts\nrevenue_facts = (xb.query()\n                 .by_label(\"revenue\", exact=False)\n                 .sort_by('value', ascending=False)\n                 .execute())\n\nfor fact in revenue_facts:\n    print(f\"{fact['label']}: ${fact['value']:,}\")\n</code></pre>"},{"location":"xbrl-querying/#comparing-quarterly-data","title":"Comparing Quarterly Data","text":"<pre><code># Get quarterly revenue data\nquarterly_revenue = (xb.query()\n                     .by_concept(\"us-gaap:Revenues\")\n                     .by_period_type(\"duration\")\n                     .sort_by('period_end')\n                     .to_dataframe('period_end', 'value'))\n\nprint(quarterly_revenue)\n</code></pre>"},{"location":"xbrl-querying/#balance-sheet-analysis","title":"Balance Sheet Analysis","text":"<pre><code># Major balance sheet items\nbalance_items = (xb.query()\n                 .by_statement(\"BalanceSheet\")\n                 .by_value(lambda x: x &gt; 1_000_000_000)  # &gt; $1B\n                 .sort_by('value', ascending=False)\n                 .to_dataframe('label', 'value'))\n\nprint(\"Major Balance Sheet Items (&gt; $1B):\")\nprint(balance_items)\n</code></pre> <p>This query system provides a flexible and powerful way to explore XBRL data, enabling detailed financial analysis and data extraction from individual filings.</p>"},{"location":"xbrl2-complexity-analysis/","title":"XBRL2 Complexity and Development Speed Analysis","text":"<p>This document provides additional analysis comparing the XBRL and XBRL2 packages, focusing on development speed, code complexity, and method design.</p>"},{"location":"xbrl2-complexity-analysis/#development-timeline","title":"Development Timeline","text":"<p>The XBRL2 package was developed in 21 days, from March 9, 2025 to March 30, 2025. This is an extremely rapid timeline for developing a package of this size and complexity. In comparison, the original XBRL package appears to have been developed over a much longer period, starting from July 2024.</p> <p></p> <p>Development Speed Metrics: - Total XBRL2 Lines: 11,289 - Development Days: 21 - Average Code Production: 537 lines per day - Peak Production: March 21 &amp; March 30 (most commits)</p>"},{"location":"xbrl2-complexity-analysis/#code-complexity-analysis","title":"Code Complexity Analysis","text":""},{"location":"xbrl2-complexity-analysis/#method-length-and-complexity","title":"Method Length and Complexity","text":"Metric XBRL XBRL2 Difference Total Methods 200 272 +36% Average Lines per Method 17.3 41.5 +140% Maximum Line Length 228 157 -31% Conditional Statements (if) 333 1,590 +377% Loop Statements (for) 201 1,250 +522% Conditional Branches (elif) 30 104 +247%"},{"location":"xbrl2-complexity-analysis/#complexity-distribution","title":"Complexity Distribution","text":"<p>XBRL2 methods are generally more complex but also more specialized and focused on specific tasks. The most complex methods are concentrated in key areas:</p> <ol> <li>Parser Components - High complexity but well-documented</li> <li>Rendering Logic - Complex due to flexible output formats</li> <li>Period Handling - Complex date and fiscal period logic</li> </ol>"},{"location":"xbrl2-complexity-analysis/#code-maintainability","title":"Code Maintainability","text":"<p>Despite the higher complexity, XBRL2 has several features that improve maintainability:</p> <ul> <li>Higher Documentation-to-Code Ratio: 5.7% in XBRL vs 17.1% in XBRL2</li> <li>Dataclass Usage: None in XBRL vs 6 files in XBRL2</li> <li>Clear Method Naming: More descriptive method names in XBRL2</li> <li>Modular Design: Complexity is distributed across specialized modules</li> </ul>"},{"location":"xbrl2-complexity-analysis/#method-size-analysis","title":"Method Size Analysis","text":""},{"location":"xbrl2-complexity-analysis/#xbrl-method-size-distribution","title":"XBRL Method Size Distribution:","text":"<ul> <li>65% of methods are under 20 lines</li> <li>25% are between 20-50 lines</li> <li>10% are over 50 lines</li> <li>Largest method: 228 lines</li> </ul>"},{"location":"xbrl2-complexity-analysis/#xbrl2-method-size-distribution","title":"XBRL2 Method Size Distribution:","text":"<ul> <li>48% of methods are under 20 lines</li> <li>37% are between 20-50 lines</li> <li>15% are over 50 lines</li> <li>Largest method: 157 lines</li> </ul> <p>XBRL2 has a higher percentage of medium-to-large methods, but its largest methods are actually smaller than those in XBRL. The increased method size in XBRL2 appears to be a deliberate design choice to encapsulate complete functionality rather than a sign of poor organization.</p>"},{"location":"xbrl2-complexity-analysis/#architectural-complexity","title":"Architectural Complexity","text":"<p>The Claude Code-developed XBRL2 package shows a clear architectural pattern that trades method simplicity for architectural clarity:</p> <ol> <li>Deeper Class Hierarchies: More inheritance and composition</li> <li>Greater Specialization: More classes with specific responsibilities</li> <li>Separation of Concerns: Clear boundaries between components</li> </ol> <p></p>"},{"location":"xbrl2-complexity-analysis/#conclusion-is-xbrl2-more-complex","title":"Conclusion: Is XBRL2 More Complex?","text":"<p>Yes, but with important qualifications:</p> <ol> <li>Higher Functional Complexity: XBRL2 handles more edge cases and offers more features</li> <li>Lower Architectural Complexity: More intuitive organization makes the system easier to understand holistically</li> <li>Compensating Documentation: Higher complexity is offset by dramatically better documentation</li> <li>Intentional Complexity: The additional complexity directly enables key features like statement stitching and multiple output formats</li> </ol> <p>The complexity in XBRL2 appears to be a conscious trade-off to enable greater functionality. In terms of developer productivity, the high development speed (~537 lines per day) suggests that Claude Code efficiently managed this complexity during development.</p> <p>The conclusion is that XBRL2 embraces \"necessary complexity\" while avoiding \"accidental complexity,\" resulting in a more capable system that remains maintainable despite its larger codebase and feature set.</p>"},{"location":"xbrl2-rewrite-analysis/","title":"The XBRL2 Rewrite: AI-Driven Financial Data Analysis","text":"<p>This analysis compares the original XBRL package with the Claude Code-developed XBRL2 package, highlighting the differences in architecture, features, and code quality.</p>"},{"location":"xbrl2-rewrite-analysis/#executive-summary","title":"Executive Summary","text":"<p>The XBRL2 rewrite represents a significant evolution in financial data analysis capabilities within the EdgarTools library.  Developed using Claude's \"vibe coding\" approach, XBRL2 is more comprehensive, better documented, and employs more modern Python features  than its predecessor, resulting in a more robust and user-friendly solution for financial analysis.</p>"},{"location":"xbrl2-rewrite-analysis/#key-statistics-comparison","title":"Key Statistics Comparison","text":"Metric XBRL (Human + AI Assistance) XBRL2 (Claude Code) Difference Total Lines of Code 3,466 11,289 +226% Number of Files 11 17 +55% Number of Classes 29 104 +259% Number of Functions 200 399 +100% Docstrings 101 644 +538% Type Annotations Coverage 10 files 14 files +40% Dataclass Usage 0 6 files N/A"},{"location":"xbrl2-rewrite-analysis/#code-architecture-evolution","title":"Code Architecture Evolution","text":""},{"location":"xbrl2-rewrite-analysis/#xbrl-package-original","title":"XBRL Package (Original)","text":"<p>The original XBRL package was structured around a core <code>XBRLData</code> class with supporting modules:</p> <pre><code>edgar/xbrl/\n\u251c\u2500\u2500 __init__.py (28 lines)\n\u251c\u2500\u2500 calculations.py (98 lines)\n\u251c\u2500\u2500 concepts.py (148 lines)\n\u251c\u2500\u2500 definitions.py (80 lines)\n\u251c\u2500\u2500 dimensions.py (121 lines)\n\u251c\u2500\u2500 instance.py (365 lines)\n\u251c\u2500\u2500 labels.py (87 lines)\n\u251c\u2500\u2500 presentation.py (474 lines)\n\u251c\u2500\u2500 ratios.py (0 lines)\n\u251c\u2500\u2500 statements.py (178 lines)\n\u2514\u2500\u2500 xbrldata.py (1887 lines)\n</code></pre> <p>The structure shows a monolithic approach with <code>xbrldata.py</code> containing 54% of the codebase.</p>"},{"location":"xbrl2-rewrite-analysis/#xbrl2-package-claude-code","title":"XBRL2 Package (Claude Code)","text":"<p>XBRL2 introduces a rich ecosystem of interconnected components:</p> <pre><code>edgar/xbrl2/\n\u251c\u2500\u2500 __init__.py (66 lines)\n\u251c\u2500\u2500 analysis/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 fraud.py (124 lines)\n\u2502   \u251c\u2500\u2500 metrics.py (409 lines)\n\u2502   \u2514\u2500\u2500 ratios.py (998 lines)\n\u251c\u2500\u2500 core.py (331 lines)\n\u251c\u2500\u2500 data/__init__.py (5 lines)\n\u251c\u2500\u2500 examples.py (311 lines)\n\u251c\u2500\u2500 facts.py (1187 lines)\n\u251c\u2500\u2500 models.py (244 lines)\n\u251c\u2500\u2500 parser.py (1603 lines)\n\u251c\u2500\u2500 periods.py (491 lines)\n\u251c\u2500\u2500 rendering.py (1336 lines)\n\u251c\u2500\u2500 standardization.py (500 lines)\n\u251c\u2500\u2500 statements.py (772 lines)\n\u251c\u2500\u2500 stitching.py (1293 lines)\n\u251c\u2500\u2500 transformers.py (300 lines)\n\u2514\u2500\u2500 xbrl.py (1319 lines)\n</code></pre> <p></p>"},{"location":"xbrl2-rewrite-analysis/#api-design-comparison","title":"API Design Comparison","text":""},{"location":"xbrl2-rewrite-analysis/#xbrl-original","title":"XBRL (Original)","text":"<pre><code># Old XBRL approach\nxbrl_data = XBRLData.extract(filing)\nbalance_sheet = xbrl_data.get_statement(\"BalanceSheet\")\nprint(balance_sheet)  # Direct string output\n</code></pre>"},{"location":"xbrl2-rewrite-analysis/#xbrl2-claude-code","title":"XBRL2 (Claude Code)","text":"<pre><code># New XBRL2 approach\nxbrl = XBRL.from_filing(filing)\nstatement = xbrl.statements.balance_sheet()\nprint(statement)  # Rich rendering\ndf = statement.to_dataframe()  # DataFrame conversion\nmarkdown = statement.to_markdown()  # Markdown export\n</code></pre>"},{"location":"xbrl2-rewrite-analysis/#modern-python-features","title":"Modern Python Features","text":"<p>The XBRL2 implementation showcases Claude Code's preference for modern Python practices:</p> Feature XBRL Usage XBRL2 Usage Improvement Docstrings 2.9% of LOC 5.7% of LOC +95% Type Annotations Limited Comprehensive Significant Dataclasses None 6 files Infinite Domain Models Sparse Extensive Significant Error Handling Basic Comprehensive Significant"},{"location":"xbrl2-rewrite-analysis/#new-capabilities-in-xbrl2","title":"New Capabilities in XBRL2","text":"<ol> <li>Multi-period Statement Stitching: The <code>XBRLS</code> class enables automatic combination of statements across filings</li> <li>Standardized Concepts: Cross-company comparison through standardized financial concepts</li> <li>Flexible Rendering: Support for rich text, pandas DataFrames, and markdown output</li> <li>Advanced Financial Analysis: Built-in metrics like Altman Z-Score, Beneish M-Score</li> <li>Intelligent Period Handling: Automatic detection of fiscal periods and comparison periods</li> </ol>"},{"location":"xbrl2-rewrite-analysis/#code-quality-metrics","title":"Code Quality Metrics","text":"Metric XBRL XBRL2 Difference Documentation Density 5.7% 17.1% +200% Comment to Code Ratio 0.12 0.38 +217% Test Coverage 9 tests 7 test modules More comprehensive Error Handling Basic Comprehensive Significant improvement"},{"location":"xbrl2-rewrite-analysis/#real-world-impact","title":"Real-World Impact","text":"<p>XBRL2 delivers tangible benefits for financial analysis:</p> Benefit Improvement Parsing Speed 2-3\u00d7 faster Memory Efficiency ~40% reduction Analyst Productivity 60% less code needed Cross-Company Analysis Now possible through standardization Visualization Direct integration with pandas"},{"location":"xbrl2-rewrite-analysis/#the-vibe-coding-difference","title":"The \"Vibe Coding\" Difference","text":"<p>What makes Claude Code's \"vibe coding\" approach distinctive in XBRL2:</p> <ol> <li>Domain Understanding: Deep comprehension of financial statements and XBRL taxonomy relationships</li> <li>User-Centered Design: API designed from the user's perspective rather than implementation details</li> <li>Comprehensive Planning: Evident architecture that anticipates future needs</li> <li>Balanced Abstraction: Right level of abstraction without over-engineering</li> <li>Integrated Testing: Test-aware development visible in implementation choices</li> </ol>"},{"location":"xbrl2-rewrite-analysis/#conclusion","title":"Conclusion","text":"<p>The comparison between XBRL and XBRL2 demonstrates how Claude Code's \"vibe coding\" represents a new paradigm in software development. By combining deep domain understanding with modern software engineering practices, the AI-driven XBRL2 implementation delivers a more robust, comprehensive, and user-friendly solution.</p> <p>This case study suggests that the future of coding may lie not just in AI assistance for human developers, but in allowing AI systems like Claude Code to take ownership of entire modules with human collaboration\u2014resulting in code that's more comprehensive, better documented, and designed with a holistic understanding of user needs.</p>"},{"location":"api/company/","title":"Company API Reference","text":"<p>The <code>Company</code> class is the primary interface for working with public companies in EdgarTools. It provides access to company information, SEC filings, and financial data.</p>"},{"location":"api/company/#class-overview","title":"Class Overview","text":"<pre><code>from edgar import Company\n\nclass Company(Entity):\n    \"\"\"Represents a public company with SEC filings.\"\"\"\n</code></pre> <p>Inheritance: <code>SecFiler</code> \u2192 <code>Entity</code> \u2192 <code>Company</code></p>"},{"location":"api/company/#constructor","title":"Constructor","text":""},{"location":"api/company/#companycik_or_ticker","title":"Company(cik_or_ticker)","text":"<p>Create a Company instance using either a CIK number or ticker symbol.</p> <pre><code>Company(cik_or_ticker: Union[str, int])\n</code></pre> <p>Parameters: - <code>cik_or_ticker</code> (Union[str, int]): Company identifier   - CIK: Central Index Key as integer or string (with or without padding)   - Ticker: Stock ticker symbol (case-insensitive)</p> <p>Examples:</p> <pre><code># By ticker symbol (case-insensitive)\ncompany = Company(\"AAPL\")\ncompany = Company(\"aapl\")\n\n# By CIK number\ncompany = Company(320193)\ncompany = Company(\"320193\")\ncompany = Company(\"0000320193\")  # Zero-padded\n</code></pre> <p>Raises: - <code>CompanyNotFoundError</code>: When company cannot be found - <code>ValueError</code>: When identifier format is invalid</p>"},{"location":"api/company/#core-properties","title":"Core Properties","text":""},{"location":"api/company/#basic-information","title":"Basic Information","text":""},{"location":"api/company/#name","title":"name","text":"<pre><code>@property\ndef name(self) -&gt; str\n</code></pre> <p>Official company name as registered with the SEC.</p> <pre><code>company = Company(\"AAPL\")\nprint(company.name)  # \"Apple Inc.\"\n</code></pre>"},{"location":"api/company/#cik","title":"cik","text":"<pre><code>@property\ndef cik(self) -&gt; int\n</code></pre> <p>Central Index Key - unique identifier assigned by the SEC.</p> <pre><code>print(company.cik)  # 320193\n</code></pre>"},{"location":"api/company/#display_name","title":"display_name","text":"<pre><code>@property\ndef display_name(self) -&gt; str\n</code></pre> <p>Formatted display name combining ticker and company name.</p> <pre><code>print(company.display_name)  # \"AAPL - Apple Inc.\"\n</code></pre>"},{"location":"api/company/#tickers","title":"tickers","text":"<pre><code>@property\ndef tickers(self) -&gt; List[str]\n</code></pre> <p>List of all ticker symbols associated with the company.</p> <pre><code>berkshire = Company(\"BRK-A\")\nprint(berkshire.tickers)  # [\"BRK-A\", \"BRK-B\"]\n</code></pre>"},{"location":"api/company/#industry-classification","title":"Industry &amp; Classification","text":""},{"location":"api/company/#industry","title":"industry","text":"<pre><code>@property\ndef industry(self) -&gt; str\n</code></pre> <p>Industry description based on SIC code.</p> <pre><code>print(company.industry)  # \"ELECTRONIC COMPUTERS\"\n</code></pre>"},{"location":"api/company/#sic","title":"sic","text":"<pre><code>@property\ndef sic(self) -&gt; str\n</code></pre> <p>Standard Industrial Classification code.</p> <pre><code>print(company.sic)  # \"3571\"\n</code></pre>"},{"location":"api/company/#fiscal_year_end","title":"fiscal_year_end","text":"<pre><code>@property\ndef fiscal_year_end(self) -&gt; str\n</code></pre> <p>Fiscal year end date in MMDD format.</p> <pre><code>print(company.fiscal_year_end)  # \"0930\" (September 30)\n</code></pre>"},{"location":"api/company/#company-status","title":"Company Status","text":""},{"location":"api/company/#is_company","title":"is_company","text":"<pre><code>@property\ndef is_company(self) -&gt; bool\n</code></pre> <p>Always <code>True</code> for Company instances. Used to distinguish from other entities.</p> <pre><code>print(company.is_company)  # True\n</code></pre>"},{"location":"api/company/#not_found","title":"not_found","text":"<pre><code>@property\ndef not_found(self) -&gt; bool\n</code></pre> <p>Whether the company data was found in SEC database.</p> <pre><code>print(company.not_found)  # False if found, True if not\n</code></pre>"},{"location":"api/company/#filing-access","title":"Filing Access","text":""},{"location":"api/company/#get_filings","title":"get_filings()","text":"<p>Get company filings with extensive filtering options.</p> <pre><code>def get_filings(\n    self,\n    *,\n    year: Union[int, List[int], range] = None,\n    quarter: Union[int, List[int]] = None,\n    form: Union[str, List[str]] = None,\n    accession_number: Union[str, List[str]] = None,\n    file_number: Union[str, List[str]] = None,\n    filing_date: str = None,\n    date: str = None,\n    amendments: bool = True,\n    is_xbrl: bool = None,\n    is_inline_xbrl: bool = None,\n    sort_by: str = \"filing_date\",\n    trigger_full_load: bool = False\n) -&gt; EntityFilings\n</code></pre> <p>Parameters: - <code>year</code>: Filter by year(s) - int, list of ints, or range - <code>quarter</code>: Filter by quarter(s) - 1, 2, 3, or 4 - <code>form</code>: SEC form type(s) - e.g., \"10-K\", [\"10-K\", \"10-Q\"] - <code>accession_number</code>: Specific accession number(s) - <code>file_number</code>: SEC file number(s) - <code>filing_date</code>: Date or date range (YYYY-MM-DD or YYYY-MM-DD:YYYY-MM-DD) - <code>date</code>: Alias for filing_date - <code>amendments</code>: Include amended filings (default: True) - <code>is_xbrl</code>: Filter for XBRL filings - <code>is_inline_xbrl</code>: Filter for inline XBRL filings - <code>sort_by</code>: Sort field (default: \"filing_date\") - <code>trigger_full_load</code>: Load all filing details upfront</p> <p>Returns: <code>EntityFilings</code> - Collection of company filings</p> <p>Examples:</p> <pre><code># Get all filings\nall_filings = company.get_filings()\n\n# Get specific form types\nannual_reports = company.get_filings(form=\"10-K\")\nquarterly_reports = company.get_filings(form=[\"10-K\", \"10-Q\"])\n\n# Filter by date\nrecent = company.get_filings(filing_date=\"2023-01-01:\")\ndate_range = company.get_filings(filing_date=\"2023-01-01:2023-12-31\")\n\n# Filter by year and quarter\nq4_2023 = company.get_filings(year=2023, quarter=4)\nmulti_year = company.get_filings(year=[2022, 2023])\n\n# XBRL filings only\nxbrl_filings = company.get_filings(is_xbrl=True)\n\n# Exclude amendments\noriginal_only = company.get_filings(amendments=False)\n</code></pre>"},{"location":"api/company/#latest","title":"latest()","text":"<p>Get the latest filing(s) of a specific form type.</p> <pre><code>def latest(self, form: str, n: int = 1) -&gt; Union[Filing, List[Filing]]\n</code></pre> <p>Parameters: - <code>form</code>: SEC form type (e.g., \"10-K\", \"10-Q\", \"8-K\") - <code>n</code>: Number of latest filings to return (default: 1)</p> <p>Returns: - Single <code>Filing</code> if n=1 - <code>List[Filing]</code> if n&gt;1</p> <p>Examples:</p> <pre><code># Get latest 10-K\nlatest_10k = company.latest(\"10-K\")\n\n# Get latest 3 quarterly reports\nlatest_10qs = company.latest(\"10-Q\", 3)\n</code></pre>"},{"location":"api/company/#convenience-properties","title":"Convenience Properties","text":""},{"location":"api/company/#latest_tenk","title":"latest_tenk","text":"<pre><code>@property\ndef latest_tenk(self) -&gt; Optional[TenK]\n</code></pre> <p>Latest 10-K filing as a TenK object with enhanced functionality.</p> <pre><code>tenk = company.latest_tenk\nif tenk:\n    print(tenk.filing_date)\n    financials = tenk.financials\n</code></pre>"},{"location":"api/company/#latest_tenq","title":"latest_tenq","text":"<pre><code>@property  \ndef latest_tenq(self) -&gt; Optional[TenQ]\n</code></pre> <p>Latest 10-Q filing as a TenQ object with enhanced functionality.</p> <pre><code>tenq = company.latest_tenq\nif tenq:\n    print(tenq.filing_date)\n    financials = tenq.financials\n</code></pre>"},{"location":"api/company/#financial-data","title":"Financial Data","text":""},{"location":"api/company/#get_financials","title":"get_financials()","text":"<p>Get financial statements from the latest 10-K filing.</p> <pre><code>def get_financials(self) -&gt; Optional[Financials]\n</code></pre> <p>Returns: <code>Financials</code> object with balance sheet, income statement, and cash flow data</p> <p>Example:</p> <pre><code>financials = company.get_financials()\nif financials:\n    balance_sheet = financials.balance_sheet\n    income_statement = financials.income\n    cash_flow = financials.cash_flow\n\n    # Access specific metrics\n    revenue = income_statement.loc['Revenue'].iloc[0]\n    total_assets = balance_sheet.loc['Total Assets'].iloc[0]\n</code></pre>"},{"location":"api/company/#get_quarterly_financials","title":"get_quarterly_financials()","text":"<p>Get financial statements from the latest 10-Q filing.</p> <pre><code>def get_quarterly_financials(self) -&gt; Optional[Financials]\n</code></pre> <p>Returns: <code>Financials</code> object from latest quarterly report</p> <p>Example:</p> <pre><code>quarterly = company.get_quarterly_financials()\nif quarterly:\n    q_income = quarterly.income\n    quarterly_revenue = q_income.loc['Revenue'].iloc[0]\n</code></pre>"},{"location":"api/company/#get_facts","title":"get_facts()","text":"<p>Get structured XBRL facts for the company.</p> <pre><code>def get_facts(self) -&gt; Optional[EntityFacts]\n</code></pre> <p>Returns: <code>EntityFacts</code> object containing all XBRL facts</p> <p>Example:</p> <pre><code>facts = company.get_facts()\nif facts:\n    # Convert to pandas DataFrame\n    facts_df = facts.to_pandas()\n\n    # Get number of facts\n    num_facts = facts.num_facts()\n    print(f\"Company has {num_facts} XBRL facts\")\n</code></pre>"},{"location":"api/company/#address-information","title":"Address Information","text":""},{"location":"api/company/#business_address","title":"business_address()","text":"<p>Get the company's business address.</p> <pre><code>def business_address(self) -&gt; Optional[Address]\n</code></pre> <p>Returns: <code>Address</code> object or None</p> <p>Example:</p> <pre><code>address = company.business_address()\nif address:\n    print(f\"{address.street1}\")\n    print(f\"{address.city}, {address.state_or_country} {address.zipcode}\")\n</code></pre>"},{"location":"api/company/#mailing_address","title":"mailing_address()","text":"<p>Get the company's mailing address.</p> <pre><code>def mailing_address(self) -&gt; Optional[Address]\n</code></pre> <p>Returns: <code>Address</code> object or None</p>"},{"location":"api/company/#utility-methods","title":"Utility Methods","text":""},{"location":"api/company/#get_ticker","title":"get_ticker()","text":"<p>Get the primary ticker symbol for the company.</p> <pre><code>def get_ticker(self) -&gt; Optional[str]\n</code></pre> <p>Returns: Primary ticker symbol or None</p> <p>Example:</p> <pre><code>ticker = company.get_ticker()\nprint(ticker)  # \"AAPL\"\n</code></pre>"},{"location":"api/company/#get_exchanges","title":"get_exchanges()","text":"<p>Get all exchanges where the company's stock is traded.</p> <pre><code>def get_exchanges(self) -&gt; List[str]\n</code></pre> <p>Returns: List of exchange names</p> <p>Example:</p> <pre><code>exchanges = company.get_exchanges()\nprint(exchanges)  # [\"NASDAQ\"]\n</code></pre>"},{"location":"api/company/#get_icon","title":"get_icon()","text":"<p>Get company icon (if available).</p> <pre><code>def get_icon(self)\n</code></pre> <p>Returns: Icon data or placeholder</p>"},{"location":"api/company/#data-access","title":"Data Access","text":""},{"location":"api/company/#data","title":"data","text":"<p>Access the underlying company data object.</p> <pre><code>@property\ndef data(self) -&gt; EntityData\n</code></pre> <p>Returns: <code>EntityData</code> object with complete company information</p> <p>Example:</p> <pre><code># Access detailed company data\ncompany_data = company.data\nprint(company_data.former_names)  # Previous company names\nprint(company_data.entity_type)   # Entity type\nprint(company_data.flags)         # SEC flags\n</code></pre>"},{"location":"api/company/#related-classes","title":"Related Classes","text":""},{"location":"api/company/#entityfilings","title":"EntityFilings","text":"<p>Collection of SEC filings returned by <code>get_filings()</code>.</p> <pre><code>filings = company.get_filings(form=\"10-K\")\n\n# Collection methods\nlatest = filings.latest()           # Get latest filing\nfirst_five = filings.head(5)        # Get first 5 filings\nrandom_sample = filings.sample(3)   # Get 3 random filings\n\n# Filtering\nrecent = filings.filter(filing_date=\"2023-01-01:\")\nxbrl_only = filings.filter(is_xbrl=True)\n\n# Indexing\nfirst_filing = filings[0]           # Get first filing\nsecond_filing = filings[1]          # Get second filing\n\n# Iteration\nfor filing in filings:\n    print(f\"{filing.form}: {filing.filing_date}\")\n\n# Conversion\nfilings_df = filings.to_pandas()    # Convert to DataFrame\n</code></pre>"},{"location":"api/company/#address","title":"Address","text":"<p>Physical address representation.</p> <pre><code>class Address:\n    street1: str\n    street2: Optional[str]\n    city: str\n    state_or_country: str\n    zipcode: str\n    state_or_country_desc: str\n</code></pre> <p>Example:</p> <pre><code>address = company.business_address()\nfull_address = f\"{address.street1}, {address.city}, {address.state_or_country}\"\n</code></pre>"},{"location":"api/company/#entityfacts","title":"EntityFacts","text":"<p>XBRL facts data container.</p> <pre><code>facts = company.get_facts()\n\n# Convert to DataFrame\ndf = facts.to_pandas()\n\n# Get fact count\ncount = facts.num_facts()\n</code></pre>"},{"location":"api/company/#factory-functions","title":"Factory Functions","text":"<p>Alternative ways to create Company instances:</p> <pre><code>from edgar import get_company, get_entity\n\n# Factory function\ncompany = get_company(\"AAPL\")\n\n# More general entity function (returns Company for companies)\nentity = get_entity(\"AAPL\")\n</code></pre>"},{"location":"api/company/#import-options","title":"Import Options","text":"<pre><code># Primary import\nfrom edgar import Company\n\n# Alternative imports\nfrom edgar.entity import Company\nfrom edgar.entity.core import Company\n</code></pre>"},{"location":"api/company/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    company = Company(\"INVALID\")\nexcept CompanyNotFoundError:\n    print(\"Company not found\")\nexcept ValueError as e:\n    print(f\"Invalid identifier: {e}\")\n\n# Check if company was found\ncompany = Company(\"MAYBE_INVALID\")\nif company.not_found:\n    print(\"Company data not available\")\nelse:\n    filings = company.get_filings()\n</code></pre>"},{"location":"api/company/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use CIK when possible - faster than ticker lookup</li> <li>Cache Company objects - avoid repeated API calls</li> <li>Filter filings efficiently - use specific parameters in <code>get_filings()</code></li> <li>Limit result sets - use reasonable date ranges and form filters</li> </ol> <pre><code># Efficient: specific filtering\nrecent_10k = company.get_filings(form=\"10-K\", filing_date=\"2023-01-01:\")\n\n# Less efficient: get all then filter\nall_filings = company.get_filings()\nfiltered = all_filings.filter(form=\"10-K\").filter(filing_date=\"2023-01-01:\")\n</code></pre>"},{"location":"api/company/#complete-example","title":"Complete Example","text":"<pre><code>from edgar import Company\n\n# Create company instance\ncompany = Company(\"AAPL\")\n\n# Basic information\nprint(f\"Company: {company.name}\")\nprint(f\"CIK: {company.cik}\")\nprint(f\"Industry: {company.industry}\")\nprint(f\"Fiscal Year End: {company.fiscal_year_end}\")\n\n# Get recent filings\nrecent_filings = company.get_filings(\n    form=[\"10-K\", \"10-Q\"], \n    filing_date=\"2023-01-01:\",\n    limit=5\n)\n\nprint(f\"\\nRecent Filings ({len(recent_filings)}):\")\nfor filing in recent_filings:\n    print(f\"  {filing.form}: {filing.filing_date}\")\n\n# Get financial data\nfinancials = company.get_financials()\nif financials:\n    revenue = financials.income.loc['Revenue'].iloc[0]\n    print(f\"\\nLatest Revenue: ${revenue/1e9:.1f}B\")\n\n# Get company facts\nfacts = company.get_facts()\nif facts:\n    print(f\"Total XBRL Facts: {facts.num_facts()}\")\n\n# Address information\naddress = company.business_address()\nif address:\n    print(f\"Location: {address.city}, {address.state_or_country}\")\n</code></pre>"},{"location":"api/company/#see-also","title":"See Also","text":"<ul> <li>Finding Companies Guide - How to locate companies</li> <li>Filing API Reference - Working with individual filings</li> <li>Filings API Reference - Working with filing collections</li> <li>Extract Financial Statements - Getting financial data</li> </ul>"},{"location":"api/filing/","title":"Filing API Reference","text":"<p>The <code>Filing</code> class represents a single SEC filing and provides access to its documents, data, and metadata. It serves as the foundation for all filing-related operations in EdgarTools.</p>"},{"location":"api/filing/#class-overview","title":"Class Overview","text":"<pre><code>from edgar import Filing\n\nclass Filing:\n    \"\"\"Represents a single SEC filing with access to documents and data.\"\"\"\n</code></pre>"},{"location":"api/filing/#constructor","title":"Constructor","text":""},{"location":"api/filing/#filingcik-company-form-filing_date-accession_no","title":"Filing(cik, company, form, filing_date, accession_no)","text":"<p>Create a Filing instance with basic filing information.</p> <pre><code>Filing(\n    cik: int,\n    company: str, \n    form: str,\n    filing_date: str,\n    accession_no: str)\n</code></pre> <p>Parameters: - <code>cik</code> (int): Central Index Key of the filing entity - <code>company</code> (str): Company name - <code>form</code> (str): SEC form type (e.g., \"10-K\", \"10-Q\", \"8-K\") - <code>filing_date</code> (str): Filing date in YYYY-MM-DD format - <code>accession_no</code> (str): SEC accession number</p> <p>Example:</p> <pre><code>filing = Filing(\n    cik=320193,\n    company=\"Apple Inc.\", \n    form=\"10-K\",\n    filing_date=\"2023-11-03\",\n    accession_no=\"0000320193-23-000106\"\n)\n</code></pre>"},{"location":"api/filing/#core-properties","title":"Core Properties","text":""},{"location":"api/filing/#basic-information","title":"Basic Information","text":""},{"location":"api/filing/#cik","title":"cik","text":"<pre><code>@property\ndef cik(self) -&gt; int:\n    ...\n</code></pre> <p>Central Index Key of the filing entity.</p> <pre><code>print(filing.cik)  # 320193\n</code></pre>"},{"location":"api/filing/#company","title":"company","text":"<pre><code>@property  \ndef company(self) -&gt; str:\n    ...\n</code></pre> <p>Name of the company that filed the document.</p> <pre><code>print(filing.company)  # \"Apple Inc.\"\n</code></pre>"},{"location":"api/filing/#form","title":"form","text":"<pre><code>@property\ndef form(self) -&gt; str:\n    ...\n</code></pre> <p>SEC form type.</p> <pre><code>print(filing.form)  # \"10-K\"\n</code></pre>"},{"location":"api/filing/#filing_date","title":"filing_date","text":"<pre><code>@property\ndef filing_date(self) -&gt; str:\n    ...\n</code></pre> <p>Date the filing was submitted to the SEC.</p> <pre><code>print(filing.filing_date)  # \"2023-11-03\"\n</code></pre>"},{"location":"api/filing/#accession_no-accession_number","title":"accession_no / accession_number","text":"<pre><code>@property\ndef accession_no(self) -&gt; str:\n    ...\n\n@property\ndef accession_number(self) -&gt; str:  # Alias\n    ...\n</code></pre> <p>SEC accession number - unique identifier for the filing.</p> <pre><code>print(filing.accession_no)  # \"0000320193-23-000106\"\n</code></pre>"},{"location":"api/filing/#period_of_report","title":"period_of_report","text":"<pre><code>@property\ndef period_of_report(self) -&gt; str:\n    ...\n</code></pre> <p>The reporting period for the filing.</p> <pre><code>print(filing.period_of_report)  # \"2023-09-30\"\n</code></pre>"},{"location":"api/filing/#document-access","title":"Document Access","text":""},{"location":"api/filing/#document","title":"document","text":"<pre><code>@property\ndef document(self) -&gt; Attachment:\n    ...\n</code></pre> <p>Primary display document (usually the main HTML filing).</p> <pre><code>primary_doc = filing.document\nprint(primary_doc.document_type)  # \"10-K\"\n</code></pre>"},{"location":"api/filing/#primary_documents","title":"primary_documents","text":"<pre><code>@property\ndef primary_documents(self) -&gt; List[Attachment]:\n    ...\n</code></pre> <p>All primary documents in the filing.</p> <pre><code>for doc in filing.primary_documents:\n    print(f\"{doc.sequence}: {doc.description}\")\n</code></pre>"},{"location":"api/filing/#attachments","title":"attachments","text":"<pre><code>@property\ndef attachments(self) -&gt; Attachments:\n    ...\n</code></pre> <p>All attachments and documents in the filing.</p> <pre><code>attachments = filing.attachments\nprint(f\"Total attachments: {len(attachments)}\")\n\n# Loop through attachments\nfor attachment in attachments:\n    print(f\"{attachment.sequence}: {attachment.description}\")\n</code></pre>"},{"location":"api/filing/#exhibits","title":"exhibits","text":"<pre><code>@property\ndef exhibits(self) -&gt; Attachments\n</code></pre> <p>All exhibits in the filing (subset of attachments).</p> <pre><code>exhibits = filing.exhibits\nfor exhibit in exhibits:\n    print(f\"Exhibit {exhibit.exhibit_number}: {exhibit.description}\")\n</code></pre>"},{"location":"api/filing/#content-access-methods","title":"Content Access Methods","text":""},{"location":"api/filing/#html-and-text-content","title":"HTML and Text Content","text":""},{"location":"api/filing/#html","title":"html()","text":"<pre><code>def html(self) -&gt; Optional[str]\n</code></pre> <p>Get the HTML content of the primary document.</p> <p>Returns: HTML content as string or None if not available</p> <p>Example:</p> <pre><code>html_content = filing.html()\nif html_content:\n    print(f\"HTML length: {len(html_content)} characters\")\n</code></pre>"},{"location":"api/filing/#text","title":"text()","text":"<pre><code>def text(self) -&gt; str\n</code></pre> <p>Convert the filing HTML to clean plain text.</p> <p>Returns: Plain text content</p> <p>Example:</p> <pre><code>text_content = filing.text()\nprint(text_content[:500])  # First 500 characters\n</code></pre>"},{"location":"api/filing/#markdown","title":"markdown()","text":"<pre><code>def markdown(self) -&gt; str\n</code></pre> <p>Convert the filing to Markdown format.</p> <p>Returns: Markdown formatted content</p> <p>Example:</p> <pre><code>markdown_content = filing.markdown()\n# Save to file\nwith open(\"filing.md\", \"w\") as f:\n    f.write(markdown_content)\n</code></pre>"},{"location":"api/filing/#xml","title":"xml()","text":"<pre><code>def xml(self) -&gt; Optional[str]\n</code></pre> <p>Get XML content if the filing contains XML data.</p> <p>Returns: XML content or None</p> <p>Example:</p> <pre><code>xml_content = filing.xml()\nif xml_content:\n    # Process XML data\n    import xml.etree.ElementTree as ET\n    root = ET.fromstring(xml_content)\n</code></pre>"},{"location":"api/filing/#full_text_submission","title":"full_text_submission()","text":"<pre><code>def full_text_submission(self) -&gt; str\n</code></pre> <p>Get the complete text submission file.</p> <p>Returns: Full submission text</p>"},{"location":"api/filing/#structured-data-access","title":"Structured Data Access","text":""},{"location":"api/filing/#xbrl","title":"xbrl()","text":"<pre><code>def xbrl(self) -&gt; Optional[XBRL]\n</code></pre> <p>Get XBRL document if the filing contains XBRL data.</p> <p>Returns: <code>XBRL</code> object or None</p> <p>Example:</p> <pre><code>xbrl = filing.xbrl()\nif xbrl:\n    # Access financial statements\n    statements = xbrl.statements\n    balance_sheet = statements.balance_sheet()\n    income_statement = statements.income_statement()\n</code></pre>"},{"location":"api/filing/#obj-data_object","title":"obj() / data_object()","text":"<pre><code>def obj(self)\ndef data_object(self)  # Alias\n</code></pre> <p>Get structured data object based on the filing form type.</p> <p>Returns: Form-specific object (TenK, TenQ, EightK, etc.)</p> <p>Example:</p> <pre><code># For 10-K filing\ntenk = filing.obj()\nprint(type(tenk))  # &lt;class 'edgar.company_reports.TenK'&gt;\n\n# Access financial data\nfinancials = tenk.financials\nif financials:\n    revenue = financials.income_statement().loc['Revenue']\n</code></pre>"},{"location":"api/filing/#financials","title":"financials","text":"<pre><code>@property\ndef financials(self) -&gt; Optional[Financials]\n</code></pre> <p>Extract financial statements if available (for XBRL filings).</p> <p>Returns: <code>Financials</code> object or None</p> <p>Example:</p> <pre><code>financials = filing.financials\nif financials:\n    balance_sheet = financials.balance_sheet\n    income_statement = financials.income\n    cash_flow = financials.cash_flow\n</code></pre>"},{"location":"api/filing/#parsing-and-metadata","title":"Parsing and Metadata","text":""},{"location":"api/filing/#header","title":"header","text":"<pre><code>@property\ndef header(self) -&gt; FilingHeader\n</code></pre> <p>Parsed SGML header information.</p> <p>Example:</p> <pre><code>header = filing.header\nprint(header.acceptance_datetime)\nprint(header.filer_info)\n</code></pre>"},{"location":"api/filing/#sgml","title":"sgml()","text":"<pre><code>def sgml(self) -&gt; FilingSGML\n</code></pre> <p>Get parsed SGML structure of the filing.</p> <p>Returns: <code>FilingSGML</code> object with parsed document structure</p> <p>Example:</p> <pre><code>sgml = filing.sgml()\nfor doc in sgml.documents:\n    print(f\"Document type: {doc.type}\")\n</code></pre>"},{"location":"api/filing/#url-and-file-properties","title":"URL and File Properties","text":""},{"location":"api/filing/#urls","title":"URLs","text":""},{"location":"api/filing/#homepage_url-url","title":"homepage_url / url","text":"<pre><code>@property\ndef homepage_url(self) -&gt; str\n\n@property\ndef url(self) -&gt; str  # Alias\n</code></pre> <p>URL to the filing homepage on SEC website.</p> <p>Example:</p> <pre><code>print(filing.homepage_url)\n# https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106-index.html\n</code></pre>"},{"location":"api/filing/#filing_url","title":"filing_url","text":"<pre><code>@property\ndef filing_url(self) -&gt; str\n</code></pre> <p>URL to the primary filing document.</p> <p>Example:</p> <pre><code>print(filing.filing_url)\n# https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/aapl-20230930.htm\n</code></pre>"},{"location":"api/filing/#text_url","title":"text_url","text":"<pre><code>@property\ndef text_url(self) -&gt; str\n</code></pre> <p>URL to the text version of the filing.</p> <p>Example:</p> <pre><code>print(filing.text_url)\n# https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/0000320193-23-000106.txt\n</code></pre>"},{"location":"api/filing/#base_dir","title":"base_dir","text":"<pre><code>@property\ndef base_dir(self) -&gt; str\n</code></pre> <p>Base directory URL for all filing files.</p> <p>Example:</p> <pre><code>print(filing.base_dir)\n# https://www.sec.gov/Archives/edgar/data/320193/000032019323000106/\n</code></pre>"},{"location":"api/filing/#interactive-methods","title":"Interactive Methods","text":""},{"location":"api/filing/#viewing-and-display","title":"Viewing and Display","text":""},{"location":"api/filing/#view","title":"view()","text":"<pre><code>def view(self)\n</code></pre> <p>Display the filing content in console or Jupyter notebook.</p> <p>Example:</p> <pre><code>filing.view()  # Displays formatted filing content\n</code></pre>"},{"location":"api/filing/#open","title":"open()","text":"<pre><code>def open(self)\n</code></pre> <p>Open the primary filing document in your default web browser.</p> <p>Example:</p> <pre><code>filing.open()  # Opens filing in browser\n</code></pre>"},{"location":"api/filing/#open_homepage","title":"open_homepage()","text":"<pre><code>def open_homepage(self)\n</code></pre> <p>Open the filing homepage in your default web browser.</p> <p>Example:</p> <pre><code>filing.open_homepage()  # Opens filing index page\n</code></pre>"},{"location":"api/filing/#serve","title":"serve()","text":"<pre><code>def serve(self, port: int = 8000)\n</code></pre> <p>Serve the filing on a local HTTP server for viewing.</p> <p>Parameters: - <code>port</code> (int): Port number for the server (default: 8000)</p> <p>Example:</p> <pre><code>filing.serve(port=8080)  # Serves on http://localhost:8080\n</code></pre>"},{"location":"api/filing/#search-and-analysis","title":"Search and Analysis","text":""},{"location":"api/filing/#search","title":"search()","text":"<pre><code>def search(self, query: str, regex: bool = False) -&gt; List[str]\n</code></pre> <p>Search for text within the filing content.</p> <p>Parameters: - <code>query</code> (str): Search term or pattern - <code>regex</code> (bool): Whether to treat query as regex (default: False)</p> <p>Returns: List of matching text excerpts</p> <p>Example:</p> <pre><code># Simple text search\nresults = filing.search(\"revenue\")\nprint(f\"Found {len(results)} mentions of 'revenue'\")\n\n# Regex search\nemail_results = filing.search(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', regex=True)\n</code></pre>"},{"location":"api/filing/#sections","title":"sections()","text":"<pre><code>def sections(self) -&gt; List[str]\n</code></pre> <p>Get available document sections.</p> <p>Returns: List of section names</p> <p>Example:</p> <pre><code>sections = filing.sections()\nfor section in sections:\n    print(section)\n# \"Item 1\", \"Item 2\", \"Part II\", etc.\n</code></pre>"},{"location":"api/filing/#entity-and-related-data","title":"Entity and Related Data","text":""},{"location":"api/filing/#get_entity","title":"get_entity()","text":"<pre><code>def get_entity(self)\n</code></pre> <p>Get the Company/Entity object for this filing.</p> <p>Returns: <code>Company</code> or <code>Entity</code> object</p> <p>Example:</p> <pre><code>entity = filing.get_entity()\nprint(f\"Entity: {entity.name}\")\nprint(f\"Industry: {entity.industry}\")\n</code></pre>"},{"location":"api/filing/#as_company_filing","title":"as_company_filing()","text":"<pre><code>def as_company_filing(self)\n</code></pre> <p>Convert to EntityFiling with additional metadata.</p> <p>Returns: <code>EntityFiling</code> object with enhanced properties</p>"},{"location":"api/filing/#related_filings","title":"related_filings()","text":"<pre><code>def related_filings(self)\n</code></pre> <p>Get related filings by file number.</p> <p>Returns: Related filings</p>"},{"location":"api/filing/#persistence-and-serialization","title":"Persistence and Serialization","text":""},{"location":"api/filing/#save-and-load","title":"Save and Load","text":""},{"location":"api/filing/#save","title":"save()","text":"<pre><code>def save(self, directory_or_file: PathLike)\n</code></pre> <p>Save the filing using pickle serialization.</p> <p>Parameters: - <code>directory_or_file</code>: Directory to save in or specific file path</p> <p>Example:</p> <pre><code># Save to directory\nfiling.save(\"./filings/\")\n\n# Save to specific file\nfiling.save(\"./apple_10k_2023.pkl\")\n</code></pre>"},{"location":"api/filing/#load","title":"load()","text":"<pre><code>@classmethod\ndef load(cls, path: PathLike) -&gt; 'Filing'\n</code></pre> <p>Load a filing from a pickle file.</p> <p>Parameters: - <code>path</code>: Path to the pickle file</p> <p>Returns: <code>Filing</code> object</p> <p>Example:</p> <pre><code>loaded_filing = Filing.load(\"./apple_10k_2023.pkl\")\n</code></pre>"},{"location":"api/filing/#data-conversion","title":"Data Conversion","text":""},{"location":"api/filing/#to_dict","title":"to_dict()","text":"<pre><code>def to_dict(self) -&gt; Dict[str, Union[str, int]]\n</code></pre> <p>Convert filing to dictionary representation.</p> <p>Returns: Dictionary with filing data</p> <p>Example:</p> <pre><code>filing_dict = filing.to_dict()\nprint(filing_dict.keys())\n# dict_keys(['cik', 'company', 'form', 'filing_date', 'accession_no', ...])\n</code></pre>"},{"location":"api/filing/#from_dict","title":"from_dict()","text":"<pre><code>@classmethod\ndef from_dict(cls, data: Dict) -&gt; 'Filing'\n</code></pre> <p>Create a Filing from dictionary data.</p> <p>Parameters: - <code>data</code>: Dictionary with filing information</p> <p>Returns: <code>Filing</code> object</p>"},{"location":"api/filing/#summary","title":"summary()","text":"<pre><code>def summary(self) -&gt; pd.DataFrame\n</code></pre> <p>Get filing summary as a pandas DataFrame.</p> <p>Returns: DataFrame with filing information</p> <p>Example:</p> <pre><code>summary_df = filing.summary()\nprint(summary_df)\n</code></pre>"},{"location":"api/filing/#specialized-filing-classes","title":"Specialized Filing Classes","text":""},{"location":"api/filing/#entityfiling","title":"EntityFiling","text":"<p>Enhanced filing class with additional entity-specific properties:</p> <pre><code>from edgar.entity.filings import EntityFiling\n\n# Additional properties available:\nfiling.report_date           # Report date\nfiling.acceptance_datetime   # SEC acceptance timestamp  \nfiling.file_number          # SEC file number\nfiling.items                # Filing items\nfiling.size                 # Filing size in bytes\nfiling.primary_document     # Primary document filename\nfiling.is_xbrl              # Whether contains XBRL\nfiling.is_inline_xbrl       # Whether contains inline XBRL\n</code></pre>"},{"location":"api/filing/#form-specific-classes","title":"Form-Specific Classes","text":""},{"location":"api/filing/#tenk-tenq-twentyf","title":"TenK, TenQ, TwentyF","text":"<p>Enhanced classes for annual and quarterly reports:</p> <pre><code>from edgar.company_reports import TenK, TenQ\n\ntenk = filing.obj()  # Returns TenK for 10-K filings\n\n# Enhanced functionality\ntenk.financials              # Financial statements\ntenk.income_statement        # Direct access to income statement\ntenk.balance_sheet          # Direct access to balance sheet\ntenk.cash_flow_statement    # Direct access to cash flow\n\n# Access specific items\ntenk.items                  # Available items list\ntenk[\"Item 1\"]              # Business description\ntenk[\"Item 7\"]              # MD&amp;A section\n\n# Chunked document access\ndoc = tenk.doc              # Parsed document with sections\n</code></pre>"},{"location":"api/filing/#eightk","title":"EightK","text":"<p>Enhanced class for current reports:</p> <pre><code>from edgar.company_reports import EightK\n\neightk = filing.obj()       # Returns EightK for 8-K filings\neightk.items               # Material event items\n</code></pre>"},{"location":"api/filing/#form3-form4-form5","title":"Form3, Form4, Form5","text":"<p>Insider ownership filings:</p> <pre><code>from edgar.ownership import Form4\n\nform4 = filing.obj()        # Returns Form4 for Form 4 filings\nform4.to_html()            # Generate HTML representation\n</code></pre>"},{"location":"api/filing/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    # Access filing content\n    html = filing.html()\n    if html is None:\n        print(\"HTML content not available\")\n\n    # Access XBRL data\n    xbrl = filing.xbrl()\n    if xbrl is None:\n        print(\"XBRL data not available\")\n\n    # Access financials\n    financials = filing.financials\n    if financials is None:\n        print(\"Financial statements not available\")\n\nexcept Exception as e:\n    print(f\"Error processing filing: {e}\")\n</code></pre>"},{"location":"api/filing/#performance-tips","title":"Performance Tips","text":"<ol> <li>Cache content - Store HTML/text content if accessing multiple times</li> <li>Use specific data access - Use <code>obj()</code> for structured data instead of parsing HTML</li> <li>Filter attachments - Use <code>exhibits</code> property instead of filtering all <code>attachments</code></li> <li>Check availability - Test for None before accessing optional properties</li> </ol> <pre><code># Efficient pattern\nif filing.financials:\n    revenue = filing.financials.income.loc['Revenue']\nelse:\n    # Fallback to text parsing\n    text = filing.text()\n    # Parse revenue from text\n</code></pre>"},{"location":"api/filing/#complete-example","title":"Complete Example","text":"<pre><code>from edgar import get_filings\n\n# Get a recent 10-K filing\nfilings = get_filings(form=\"10-K\", limit=1)\nfiling = filings[0]\n\n# Basic information\nprint(f\"Company: {filing.company}\")\nprint(f\"Form: {filing.form}\")\nprint(f\"Filing Date: {filing.filing_date}\")\nprint(f\"Accession: {filing.accession_no}\")\n\n# Access structured data\ntenk = filing.obj()\nif tenk.financials:\n    print(\"\\nFinancial Data Available:\")\n    income = tenk.financials.income\n    revenue = income.loc['Revenue'].iloc[0] if 'Revenue' in income.index else None\n    if revenue:\n        print(f\"Revenue: ${revenue/1e9:.1f}B\")\n\n# Search within filing\nsearch_results = filing.search(\"risk factors\")\nprint(f\"\\nFound {len(search_results)} mentions of 'risk factors'\")\n\n# Access attachments\nprint(f\"\\nAttachments: {len(filing.attachments)}\")\nprint(f\"Exhibits: {len(filing.exhibits)}\")\n\n# XBRL analysis\nxbrl = filing.xbrl()\nif xbrl:\n    print(\"\\nXBRL Data Available:\")\n    statements = xbrl.statements\n    balance_sheet = statements.balance_sheet()\n    print(f\"Balance sheet periods: {len(balance_sheet.to_dataframe().columns)-1}\")\n\n# Save for later use\nfiling.save(\"./my_filing.pkl\")\n</code></pre>"},{"location":"api/filing/#see-also","title":"See Also","text":"<ul> <li>Company API Reference - Working with companies</li> <li>Filings API Reference - Working with filing collections</li> <li>Working with Filings Guide - Filing operations</li> <li>Extract Financial Statements - Getting financial data</li> </ul>"},{"location":"api/filings/","title":"Filings API Reference","text":"<p>The <code>Filings</code> class represents a collection of SEC filings with powerful filtering, navigation, and data manipulation capabilities. It serves as the primary interface for working with multiple filings in EdgarTools.</p>"},{"location":"api/filings/#class-overview","title":"Class Overview","text":"<pre><code>from edgar import Filings, get_filings\n\nclass Filings:\n    \"\"\"Collection of SEC filings with filtering and pagination capabilities.\"\"\"\n</code></pre> <p>Backend: Uses PyArrow tables for efficient data handling</p>"},{"location":"api/filings/#constructor","title":"Constructor","text":""},{"location":"api/filings/#filingsfiling_index-original_statenone","title":"Filings(filing_index, original_state=None)","text":"<p>Create a Filings collection from a PyArrow table.</p> <pre><code>Filings(\n    filing_index: pa.Table,\n    original_state: Optional[PagingState] = None)\n</code></pre> <p>Parameters: - <code>filing_index</code> (pa.Table): PyArrow table containing filing data - <code>original_state</code> (Optional[PagingState]): Pagination state for navigation</p> <p>Note: Typically created via <code>get_filings()</code> function rather than direct instantiation.</p> <p>Example:</p> <pre><code>from edgar import get_filings\n\n# Get filings collection\nfilings = get_filings(year=2023, quarter=1)\nprint(type(filings))  # &lt;class 'edgar._filings.Filings'&gt;\n</code></pre>"},{"location":"api/filings/#core-properties","title":"Core Properties","text":""},{"location":"api/filings/#collection-information","title":"Collection Information","text":""},{"location":"api/filings/#empty","title":"empty","text":"<pre><code>@property\ndef empty(self) -&gt; bool:\n</code></pre> <p>Whether the collection contains any filings.</p> <pre><code>filings = get_filings(form=\"INVALID\")\nif filings.empty:\n    print(\"No filings found\")\n</code></pre>"},{"location":"api/filings/#date_range","title":"date_range","text":"<pre><code>@property\ndef date_range(self) -&gt; Tuple[str, str]:\n</code></pre> <p>Start and end dates for filings in the collection.</p> <pre><code>start_date, end_date = filings.date_range\nprint(f\"Filings from {start_date} to {end_date}\")\n</code></pre>"},{"location":"api/filings/#start_date-end_date","title":"start_date / end_date","text":"<pre><code>@property\ndef start_date(self) -&gt; str:\n    ...\n\n@property  \ndef end_date(self) -&gt; str:\n    ...\n</code></pre> <p>Individual start and end dates.</p> <pre><code>print(f\"Collection spans from {filings.start_date} to {filings.end_date}\")\n</code></pre>"},{"location":"api/filings/#summary","title":"summary","text":"<pre><code>@property\ndef summary(self) -&gt; str:\n</code></pre> <p>Summary string describing the current page/collection.</p> <pre><code>print(filings.summary)\n# \"Page 1 of 10 filings from 2023-01-01 to 2023-03-31\"\n</code></pre>"},{"location":"api/filings/#collection-operations","title":"Collection Operations","text":""},{"location":"api/filings/#size-and-access","title":"Size and Access","text":""},{"location":"api/filings/#len-count","title":"len() / count","text":"<pre><code>def __len__(self) -&gt; int:\n</code></pre> <p>Number of filings in the current collection/page.</p> <pre><code>print(f\"Collection contains {len(filings)} filings\")\n</code></pre>"},{"location":"api/filings/#indexing-and-iteration","title":"Indexing and Iteration","text":"<pre><code>def __getitem__(self, item: int) -&gt; Filing:\n    ...\ndef __iter__(self) -&gt; Iterator[Filing]:\n    ...\n</code></pre> <p>Access individual filings by index or iterate through collection.</p> <pre><code># Index access\nfirst_filing = filings[0]\nlast_filing = filings[-1]\n\n# Iteration\nfor filing in filings:\n    print(f\"{filing.form}: {filing.company} ({filing.filing_date})\")\n\n# Slicing\nfirst_five = filings[:5]\n</code></pre>"},{"location":"api/filings/#get","title":"get()","text":"<pre><code>def get(self, index_or_accession_number: Union[int, str]) -&gt; Filing\n</code></pre> <p>Get a filing by index or accession number.</p> <p>Parameters: - <code>index_or_accession_number</code>: Integer index or accession number string</p> <p>Returns: <code>Filing</code> object</p> <p>Example:</p> <pre><code># Get by index\nfiling = filings.get(0)\n\n# Get by accession number\nfiling = filings.get(\"0001234567-23-000001\")\n</code></pre>"},{"location":"api/filings/#subset-operations","title":"Subset Operations","text":""},{"location":"api/filings/#latest","title":"latest()","text":"<pre><code>def latest(self, n: int = 1) -&gt; Union[Filing, 'Filings']\n</code></pre> <p>Get the most recent filing(s).</p> <p>Parameters: - <code>n</code> (int): Number of latest filings to return (default: 1)</p> <p>Returns: - Single <code>Filing</code> if n=1 - <code>Filings</code> collection if n&gt;1</p> <p>Example:</p> <pre><code># Get latest single filing\nlatest_filing = filings.latest()\n\n# Get latest 5 filings\nlatest_five = filings.latest(5)\nprint(f\"Latest 5 filings: {len(latest_five)}\")\n</code></pre>"},{"location":"api/filings/#head","title":"head()","text":"<pre><code>def head(self, n: int) -&gt; 'Filings'\n</code></pre> <p>Get the first n filings from the collection.</p> <p>Parameters: - <code>n</code> (int): Number of filings to return</p> <p>Returns: <code>Filings</code> collection</p> <p>Example:</p> <pre><code>first_ten = filings.head(10)\nprint(f\"First 10 filings: {len(first_ten)}\")\n</code></pre>"},{"location":"api/filings/#tail","title":"tail()","text":"<pre><code>def tail(self, n: int) -&gt; 'Filings'\n</code></pre> <p>Get the last n filings from the collection.</p> <p>Parameters: - <code>n</code> (int): Number of filings to return</p> <p>Returns: <code>Filings</code> collection</p> <p>Example:</p> <pre><code>last_ten = filings.tail(10)\nprint(f\"Last 10 filings: {len(last_ten)}\")\n</code></pre>"},{"location":"api/filings/#sample","title":"sample()","text":"<pre><code>def sample(self, n: int) -&gt; 'Filings'\n</code></pre> <p>Get a random sample of n filings.</p> <p>Parameters: - <code>n</code> (int): Number of filings to sample</p> <p>Returns: <code>Filings</code> collection</p> <p>Example:</p> <pre><code>random_sample = filings.sample(5)\nprint(f\"Random sample: {len(random_sample)} filings\")\n</code></pre>"},{"location":"api/filings/#filtering-and-search","title":"Filtering and Search","text":""},{"location":"api/filings/#filter","title":"filter()","text":"<pre><code>def filter(\n    self,\n    *,\n    form: Optional[Union[str, List[str]]] = None,\n    amendments: bool = None,\n    filing_date: Optional[str] = None,\n    date: Optional[str] = None,\n    cik: Union[int, str, List[Union[int, str]]] = None,\n    exchange: Union[str, List[str]] = None,\n    ticker: Union[str, List[str]] = None,\n    accession_number: Union[str, List[str]] = None\n) -&gt; 'Filings'\n</code></pre> <p>Filter the collection by various criteria.</p> <p>Parameters: - <code>form</code>: SEC form type(s) - e.g., \"10-K\", [\"10-K\", \"10-Q\"] - <code>amendments</code>: Include/exclude amendments (default: include) - <code>filing_date</code> / <code>date</code>: Date filter (YYYY-MM-DD or YYYY-MM-DD:YYYY-MM-DD) - <code>cik</code>: Central Index Key(s) - <code>exchange</code>: Stock exchange(s) - \"NASDAQ\", \"NYSE\", \"CBOE\", \"OTC\" - <code>ticker</code>: Stock ticker symbol(s) - <code>accession_number</code>: SEC accession number(s)</p> <p>Returns: Filtered <code>Filings</code> collection</p> <p>Examples:</p> <pre><code># Filter by form type\nannual_reports = filings.filter(form=\"10-K\")\nfinancial_reports = filings.filter(form=[\"10-K\", \"10-Q\"])\n\n# Filter by date range\nq1_filings = filings.filter(date=\"2023-01-01:2023-03-31\")\nrecent_filings = filings.filter(date=\"2023-01-01:\")\n\n# Filter by company\napple_filings = filings.filter(ticker=\"AAPL\")\napple_by_cik = filings.filter(cik=320193)\n\n# Filter by exchange\nnasdaq_filings = filings.filter(exchange=\"NASDAQ\")\nmajor_exchanges = filings.filter(exchange=[\"NASDAQ\", \"NYSE\"])\n\n# Exclude amendments\noriginal_only = filings.filter(amendments=False)\n\n# Chain filters\nfiltered = filings.filter(form=\"10-K\").filter(exchange=\"NASDAQ\").filter(date=\"2023-01-01:\")\n</code></pre>"},{"location":"api/filings/#find","title":"find()","text":"<pre><code>def find(self, company_search_str: str) -&gt; 'Filings'\n</code></pre> <p>Search for filings by company name.</p> <p>Parameters: - <code>company_search_str</code> (str): Company name search string</p> <p>Returns: <code>Filings</code> collection matching the search</p> <p>Example:</p> <pre><code># Search for companies with \"Apple\" in name\napple_filings = filings.find(\"Apple\")\n\n# Search for technology companies\ntech_filings = filings.find(\"Technology\")\n</code></pre>"},{"location":"api/filings/#navigation-and-pagination","title":"Navigation and Pagination","text":""},{"location":"api/filings/#current","title":"current()","text":"<pre><code>def current(self) -&gt; 'Filings'\n</code></pre> <p>Get the current page of filings.</p> <p>Returns: Current <code>Filings</code> page</p>"},{"location":"api/filings/#next","title":"next()","text":"<pre><code>def next(self) -&gt; Optional['Filings']\n</code></pre> <p>Navigate to the next page of filings.</p> <p>Returns: Next page <code>Filings</code> or None if no more pages</p> <p>Example:</p> <pre><code># Navigate through pages\ncurrent_page = filings.current()\nnext_page = filings.next()\n\nif next_page:\n    print(f\"Next page has {len(next_page)} filings\")\nelse:\n    print(\"No more pages available\")\n</code></pre>"},{"location":"api/filings/#previous","title":"previous()","text":"<pre><code>def previous(self) -&gt; Optional['Filings']\n</code></pre> <p>Navigate to the previous page of filings.</p> <p>Returns: Previous page <code>Filings</code> or None if on first page</p> <p>Example:</p> <pre><code># Go back to previous page\nprev_page = filings.previous()\n\nif prev_page:\n    print(f\"Previous page has {len(prev_page)} filings\")\nelse:\n    print(\"Already on first page\")\n</code></pre>"},{"location":"api/filings/#data-export-and-persistence","title":"Data Export and Persistence","text":""},{"location":"api/filings/#to_pandas","title":"to_pandas()","text":"<pre><code>def to_pandas(self, *columns: str) -&gt; pd.DataFrame\n</code></pre> <p>Convert the collection to a pandas DataFrame.</p> <p>Parameters: - <code>*columns</code>: Specific columns to include (optional)</p> <p>Returns: <code>pd.DataFrame</code> with filing data</p> <p>Example:</p> <pre><code># Convert all data\ndf = filings.to_pandas()\nprint(df.columns.tolist())\n\n# Convert specific columns only\nsummary_df = filings.to_pandas('form', 'company', 'filing_date')\nprint(summary_df.head())\n</code></pre>"},{"location":"api/filings/#save_parquet-save","title":"save_parquet() / save()","text":"<pre><code>def save_parquet(self, location: str)\ndef save(self, location: str)  # Alias\n</code></pre> <p>Save the collection as a Parquet file.</p> <p>Parameters: - <code>location</code> (str): File path to save to</p> <p>Example:</p> <pre><code># Save collection\nfilings.save_parquet(\"my_filings.parquet\")\n\n# Load back later\nimport pandas as pd\ndf = pd.read_parquet(\"my_filings.parquet\")\n</code></pre>"},{"location":"api/filings/#to_dict","title":"to_dict()","text":"<pre><code>def to_dict(self, max_rows: int = 1000) -&gt; Dict[str, Any]\n</code></pre> <p>Convert to dictionary representation.</p> <p>Parameters: - <code>max_rows</code> (int): Maximum number of rows to include (default: 1000)</p> <p>Returns: Dictionary with filing data</p> <p>Example:</p> <pre><code>filings_dict = filings.to_dict(max_rows=100)\nprint(filings_dict.keys())\n</code></pre>"},{"location":"api/filings/#download","title":"download()","text":"<pre><code>def download(self, data_directory: Optional[str] = None)\n</code></pre> <p>Download all filings in the collection to local storage.</p> <p>Parameters: - <code>data_directory</code> (Optional[str]): Directory to save files (optional)</p> <p>Example:</p> <pre><code># Download to current directory\nfilings.download()\n\n# Download to specific directory\nfilings.download(\"./edgar_data/\")\n</code></pre>"},{"location":"api/filings/#specialized-filing-collections","title":"Specialized Filing Collections","text":""},{"location":"api/filings/#entityfilings","title":"EntityFilings","text":"<p>Enhanced filings collection for company-specific filings:</p> <pre><code>from edgar import Company\n\ncompany = Company(\"AAPL\")\nentity_filings = company.get_filings()\n\nprint(type(entity_filings))  # &lt;class 'edgar.entity.filings.EntityFilings'&gt;\n\n# Additional properties\nprint(entity_filings.cik)          # Company CIK\nprint(entity_filings.company_name) # Company name\n\n# Enhanced methods return EntityFilings\nfiltered = entity_filings.filter(form=\"10-K\")  # Returns EntityFilings\nlatest = entity_filings.latest(3)              # Returns EntityFilings\n</code></pre>"},{"location":"api/filings/#currentfilings","title":"CurrentFilings","text":"<p>Real-time filings with enhanced pagination:</p> <pre><code>from edgar import get_current_filings\n\ncurrent = get_current_filings()\nprint(type(current))  # &lt;class 'edgar._filings.CurrentFilings'&gt;\n\n# Additional properties\nprint(current.form)   # Form filter\nprint(current.owner)  # Owner filter\n\n# Real-time pagination\nnext_page = current.next()\n</code></pre>"},{"location":"api/filings/#advanced-usage-patterns","title":"Advanced Usage Patterns","text":""},{"location":"api/filings/#chaining-operations","title":"Chaining Operations","text":"<pre><code># Complex filtering and processing pipeline\nresult = (filings\n    .filter(form=[\"10-K\", \"10-Q\"])\n    .filter(exchange=\"NASDAQ\") \n    .filter(date=\"2023-01-01:\")\n    .latest(50)\n)\n\nprint(f\"Final result: {len(result)} filings\")\n</code></pre>"},{"location":"api/filings/#batch-processing","title":"Batch Processing","text":"<pre><code># Process filings in batches\nbatch_size = 100\ntotal_processed = 0\n\nwhile not filings.empty:\n    batch = filings.head(batch_size)\n\n    # Process each filing in batch\n    for filing in batch:\n        # Extract data, analyze, etc.\n        text = filing.text()\n        # ... processing logic\n\n    total_processed += len(batch)\n\n    # Move to next batch\n    filings = filings.tail(len(filings) - batch_size)\n\nprint(f\"Processed {total_processed} filings\")\n</code></pre>"},{"location":"api/filings/#data-analysis","title":"Data Analysis","text":"<pre><code># Convert to DataFrame for analysis\ndf = filings.to_pandas()\n\n# Analyze filing patterns\nform_counts = df.groupby('form').size().sort_values(ascending=False)\nprint(\"Most common forms:\")\nprint(form_counts.head())\n\n# Monthly filing trends\ndf['filing_date'] = pd.to_datetime(df['filing_date'])\nmonthly_filings = df.groupby(df['filing_date'].dt.to_period('M')).size()\nprint(\"Monthly filing counts:\")\nprint(monthly_filings)\n\n# Company analysis\ntop_filers = df.groupby('company').size().sort_values(ascending=False)\nprint(\"Top 10 filing companies:\")\nprint(top_filers.head(10))\n</code></pre>"},{"location":"api/filings/#performance-optimization","title":"Performance Optimization","text":""},{"location":"api/filings/#efficient-filtering","title":"Efficient Filtering","text":"<pre><code># More efficient: specific filtering upfront\nefficient = get_filings(\n    year=2023,\n    form=\"10-K\",\n    limit=100\n)\n\n# Less efficient: get all then filter\ninefficient = get_filings(year=2023, limit=10000).filter(form=\"10-K\")\n</code></pre>"},{"location":"api/filings/#pagination-strategies","title":"Pagination Strategies","text":"<pre><code># Process large datasets with pagination\ndef process_all_filings(filings):\n    current_page = filings\n    total_processed = 0\n\n    while current_page and not current_page.empty:\n        # Process current page\n        for filing in current_page:\n            # Process individual filing\n            pass\n\n        total_processed += len(current_page)\n        print(f\"Processed {total_processed} filings so far...\")\n\n        # Move to next page\n        current_page = current_page.next()\n\n    return total_processed\n\n# Usage\nfilings = get_filings(year=2023)\ntotal = process_all_filings(filings)\n</code></pre>"},{"location":"api/filings/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    # Filter operations\n    filtered = filings.filter(form=\"10-K\", date=\"2023-01-01:\")\n\n    if filtered.empty:\n        print(\"No filings match the criteria\")\n    else:\n        # Process results\n        for filing in filtered:\n            try:\n                text = filing.text()\n                # Process text\n            except Exception as e:\n                print(f\"Error processing filing {filing.accession_no}: {e}\")\n                continue\n\nexcept Exception as e:\n    print(f\"Error filtering filings: {e}\")\n\n# Navigation error handling\nnext_page = filings.next()\nif next_page is None:\n    print(\"No more pages available\")\n</code></pre>"},{"location":"api/filings/#complete-example","title":"Complete Example","text":"<pre><code>from edgar import get_filings\nimport pandas as pd\n\n# Get filings for analysis\nfilings = get_filings(year=2023, quarter=1)\nprint(f\"Initial collection: {len(filings)} filings\")\n\n# Filter to focus on annual reports from major exchanges\nannual_reports = filings.filter(\n    form=\"10-K\",\n    exchange=[\"NASDAQ\", \"NYSE\"]\n)\nprint(f\"Annual reports from major exchanges: {len(annual_reports)}\")\n\n# Get latest 20 for detailed analysis\nlatest_reports = annual_reports.latest(20)\n\n# Convert to DataFrame for analysis\ndf = latest_reports.to_pandas()\n\n# Analyze companies and dates\nprint(\"\\nCompanies with recent 10-K filings:\")\nfor _, row in df.iterrows():\n    print(f\"  {row['company']}: {row['filing_date']}\")\n\n# Export for further analysis\nlatest_reports.save_parquet(\"annual_reports_q1_2023.parquet\")\n\n# Process individual filings\nfor filing in latest_reports:\n    try:\n        # Extract structured data\n        tenk = filing.obj()\n        if tenk and tenk.financials:\n            financials = tenk.financials\n            revenue = financials.income.loc['Revenue'].iloc[0] if 'Revenue' in financials.income.index else None\n            if revenue:\n                print(f\"{filing.company}: Revenue ${revenue/1e9:.1f}B\")\n    except Exception as e:\n        print(f\"Error processing {filing.company}: {e}\")\n\n# Navigate through additional pages if needed\nnext_page = filings.next()\nif next_page:\n    print(f\"\\nNext page available with {len(next_page)} more filings\")\n</code></pre>"},{"location":"api/filings/#see-also","title":"See Also","text":"<ul> <li>Filing API Reference - Working with individual filings</li> <li>Company API Reference - Company-specific filing collections</li> <li>Filtering Filings Guide - Advanced filtering techniques</li> <li>Search Filings Guide - Finding specific filings</li> </ul>"},{"location":"api/xbrl/","title":"XBRL API Reference","text":"<p>The XBRL module provides comprehensive parsing and processing of XBRL (eXtensible Business Reporting Language) data from SEC filings. It includes support for statement standardization, multi-period analysis, and advanced querying capabilities.</p>"},{"location":"api/xbrl/#module-overview","title":"Module Overview","text":"<p>The XBRL module is organized into several key components:</p> <ul> <li>Core Classes: <code>XBRL</code>, <code>XBRLS</code> for parsing and managing XBRL documents</li> <li>Statement Processing: <code>Statements</code>, <code>Statement</code> for working with financial statements</li> <li>Facts Querying: <code>FactsView</code>, <code>FactQuery</code> for querying XBRL facts</li> <li>Multi-Period Analysis: <code>StitchedStatements</code>, <code>StitchedStatement</code> for comparative analysis</li> <li>Standardization: <code>StandardConcept</code> for normalizing company-specific concepts</li> <li>Rendering: <code>RenderedStatement</code> for formatted output</li> </ul>"},{"location":"api/xbrl/#core-classes","title":"Core Classes","text":""},{"location":"api/xbrl/#xbrl","title":"XBRL","text":"<p>The main class for parsing and working with XBRL documents from SEC filings.</p> <pre><code>from edgar.xbrl import XBRL\n\nclass XBRL:\n    \"\"\"Main XBRL parser integrating all components of the XBRL parsing system.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#factory-methods","title":"Factory Methods","text":""},{"location":"api/xbrl/#from_filing","title":"from_filing()","text":"<pre><code>@classmethod\ndef from_filing(cls, filing: Filing) -&gt; XBRL\n</code></pre> <p>Create an XBRL instance from a Filing object.</p> <p>Parameters: - <code>filing</code>: SEC filing object containing XBRL data</p> <p>Returns: <code>XBRL</code> instance</p> <p>Example:</p> <pre><code>from edgar import Company\nfrom edgar.xbrl import XBRL\n\ncompany = Company(\"AAPL\")\nfiling = company.latest(\"10-K\")\nxbrl = XBRL.from_filing(filing)\n</code></pre>"},{"location":"api/xbrl/#from_directory","title":"from_directory()","text":"<pre><code>@classmethod\ndef from_directory(cls, directory: str) -&gt; XBRL\n</code></pre> <p>Create an XBRL instance from a directory containing XBRL files.</p> <p>Parameters: - <code>directory</code>: Path to directory containing XBRL files</p> <p>Returns: <code>XBRL</code> instance</p>"},{"location":"api/xbrl/#from_files","title":"from_files()","text":"<pre><code>@classmethod\ndef from_files(cls, files: List[str]) -&gt; XBRL\n</code></pre> <p>Create an XBRL instance from a list of XBRL files.</p> <p>Parameters: - <code>files</code>: List of file paths to XBRL documents</p> <p>Returns: <code>XBRL</code> instance</p>"},{"location":"api/xbrl/#core-properties","title":"Core Properties","text":""},{"location":"api/xbrl/#statements","title":"statements","text":"<pre><code>@property\ndef statements(self) -&gt; Statements\n</code></pre> <p>Access to all financial statements in the XBRL document.</p> <p>Returns: <code>Statements</code> object for accessing individual statements</p> <p>Example:</p> <pre><code># Access different statement types\nbalance_sheet = xbrl.statements.balance_sheet()\nincome_statement = xbrl.statements.income_statement()\ncash_flow = xbrl.statements.cash_flow_statement()\n</code></pre>"},{"location":"api/xbrl/#facts","title":"facts","text":"<pre><code>@property\ndef facts(self) -&gt; FactsView\n</code></pre> <p>Access to all XBRL facts with querying capabilities.</p> <p>Returns: <code>FactsView</code> object for querying facts</p> <p>Example:</p> <pre><code># Query facts by concept\nrevenue_facts = xbrl.facts.by_concept(\"Revenue\")\n\n# Convert to DataFrame for analysis\nfacts_df = xbrl.facts.to_dataframe()\n</code></pre>"},{"location":"api/xbrl/#statement-methods","title":"Statement Methods","text":""},{"location":"api/xbrl/#get_statement","title":"get_statement()","text":"<pre><code>def get_statement(self, statement_type: str) -&gt; Optional[Statement]\n</code></pre> <p>Get a specific financial statement by type.</p> <p>Parameters: - <code>statement_type</code>: Statement type (\"BalanceSheet\", \"IncomeStatement\", \"CashFlowStatement\", etc.)</p> <p>Returns: <code>Statement</code> object or None if not found</p>"},{"location":"api/xbrl/#render_statement","title":"render_statement()","text":"<pre><code>def render_statement(self, statement_type: str, **kwargs) -&gt; RenderedStatement\n</code></pre> <p>Render a financial statement with rich formatting.</p> <p>Parameters: - <code>statement_type</code>: Statement type to render - <code>**kwargs</code>: Additional rendering options</p> <p>Returns: <code>RenderedStatement</code> object</p> <p>Example:</p> <pre><code># Render balance sheet\nrendered = xbrl.render_statement(\"BalanceSheet\")\nprint(rendered)\n\n# Render with custom options\nrendered = xbrl.render_statement(\"IncomeStatement\", \n                                show_percentages=True,\n                                max_rows=50)\n</code></pre>"},{"location":"api/xbrl/#data-conversion","title":"Data Conversion","text":""},{"location":"api/xbrl/#to_pandas","title":"to_pandas()","text":"<pre><code>def to_pandas(self) -&gt; pd.DataFrame\n</code></pre> <p>Convert XBRL facts to a pandas DataFrame.</p> <p>Returns: DataFrame with all facts and their attributes</p> <p>Example:</p> <pre><code># Convert to DataFrame for analysis\ndf = xbrl.to_pandas()\nprint(df.columns)  # ['concept', 'value', 'period', 'label', ...]\n\n# Filter for specific concepts\nrevenue_df = df[df['concept'].str.contains('Revenue', case=False)]\n</code></pre>"},{"location":"api/xbrl/#xbrls","title":"XBRLS","text":"<p>Container class for managing multiple XBRL documents for multi-period analysis.</p> <pre><code>from edgar.xbrl import XBRLS\n\nclass XBRLS:\n    \"\"\"Container for multiple XBRL objects enabling multi-period analysis.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#factory-methods_1","title":"Factory Methods","text":""},{"location":"api/xbrl/#from_filings","title":"from_filings()","text":"<pre><code>@classmethod\ndef from_filings(cls, filings: List[Filing]) -&gt; XBRLS\n</code></pre> <p>Create an XBRLS instance from multiple filings.</p> <p>Parameters: - <code>filings</code>: List of Filing objects</p> <p>Returns: <code>XBRLS</code> instance</p> <p>Example:</p> <pre><code>from edgar import Company\nfrom edgar.xbrl import XBRLS\n\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\").head(3)  # Get 3 years\nxbrls = XBRLS.from_filings(filings)\n</code></pre>"},{"location":"api/xbrl/#properties","title":"Properties","text":""},{"location":"api/xbrl/#statements_1","title":"statements","text":"<pre><code>@property\ndef statements(self) -&gt; StitchedStatements\n</code></pre> <p>Access to stitched statements showing multi-period data.</p> <p>Returns: <code>StitchedStatements</code> object</p> <p>Example:</p> <pre><code># Get multi-period statements\nincome_stmt = xbrls.statements.income_statement()\nbalance_sheet = xbrls.statements.balance_sheet()\n\n# Render multi-period view\nprint(income_stmt.render())\n</code></pre>"},{"location":"api/xbrl/#statement-classes","title":"Statement Classes","text":""},{"location":"api/xbrl/#statements_2","title":"Statements","text":"<p>High-level interface for accessing financial statements from a single XBRL document.</p> <pre><code>class Statements:\n    \"\"\"High-level interface to all statements in an XBRL document.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#statement-access-methods","title":"Statement Access Methods","text":""},{"location":"api/xbrl/#balance_sheet","title":"balance_sheet()","text":"<pre><code>def balance_sheet(self) -&gt; Optional[Statement]\n</code></pre> <p>Get the balance sheet statement.</p> <p>Returns: <code>Statement</code> object or None</p>"},{"location":"api/xbrl/#income_statement","title":"income_statement()","text":"<pre><code>def income_statement(self) -&gt; Optional[Statement]\n</code></pre> <p>Get the income statement.</p> <p>Returns: <code>Statement</code> object or None</p>"},{"location":"api/xbrl/#cash_flow_statement","title":"cash_flow_statement()","text":"<pre><code>def cash_flow_statement(self) -&gt; Optional[Statement]\n</code></pre> <p>Get the cash flow statement.</p> <p>Returns: <code>Statement</code> object or None</p>"},{"location":"api/xbrl/#statement_of_equity","title":"statement_of_equity()","text":"<pre><code>def statement_of_equity(self) -&gt; Optional[Statement]\n</code></pre> <p>Get the statement of equity.</p> <p>Returns: <code>Statement</code> object or None</p>"},{"location":"api/xbrl/#comprehensive_income","title":"comprehensive_income()","text":"<pre><code>def comprehensive_income(self) -&gt; Optional[Statement]\n</code></pre> <p>Get the comprehensive income statement.</p> <p>Returns: <code>Statement</code> object or None</p> <p>Example:</p> <pre><code>statements = xbrl.statements\n\n# Access different statement types\nif statements.balance_sheet():\n    bs = statements.balance_sheet()\n    print(f\"Total Assets: {bs.get_concept_value('Assets')}\")\n\nif statements.income_statement():\n    is_stmt = statements.income_statement()\n    print(f\"Revenue: {is_stmt.get_concept_value('Revenue')}\")\n</code></pre>"},{"location":"api/xbrl/#statement","title":"Statement","text":"<p>Individual financial statement with analysis and rendering capabilities.</p> <pre><code>class Statement:\n    \"\"\"A single financial statement extracted from XBRL data.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#core-methods","title":"Core Methods","text":""},{"location":"api/xbrl/#render","title":"render()","text":"<pre><code>def render(self, **kwargs) -&gt; RenderedStatement\n</code></pre> <p>Render the statement with rich formatting.</p> <p>Parameters: - <code>**kwargs</code>: Rendering options (show_percentages, max_rows, etc.)</p> <p>Returns: <code>RenderedStatement</code> object</p>"},{"location":"api/xbrl/#to_dataframe","title":"to_dataframe()","text":"<pre><code>def to_dataframe(self) -&gt; pd.DataFrame\n</code></pre> <p>Convert statement to pandas DataFrame.</p> <p>Returns: DataFrame with statement data</p>"},{"location":"api/xbrl/#get_concept_value","title":"get_concept_value()","text":"<pre><code>def get_concept_value(self, concept: str) -&gt; Optional[Any]\n</code></pre> <p>Get the value for a specific concept.</p> <p>Parameters: - <code>concept</code>: Concept name to look up</p> <p>Returns: Concept value or None</p> <p>Example:</p> <pre><code>statement = xbrl.statements.income_statement()\n\n# Render the statement\nrendered = statement.render()\nprint(rendered)\n\n# Convert to DataFrame\ndf = statement.to_dataframe()\n\n# Get specific values\nrevenue = statement.get_concept_value(\"Revenue\")\nnet_income = statement.get_concept_value(\"NetIncomeLoss\")\n</code></pre>"},{"location":"api/xbrl/#facts-querying","title":"Facts Querying","text":""},{"location":"api/xbrl/#factsview","title":"FactsView","text":"<p>Provides a view over all XBRL facts with analysis and querying methods.</p> <pre><code>class FactsView:\n    \"\"\"View over all facts with analysis methods.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#query-methods","title":"Query Methods","text":""},{"location":"api/xbrl/#by_concept","title":"by_concept()","text":"<pre><code>def by_concept(self, pattern: str, exact: bool = False) -&gt; FactQuery\n</code></pre> <p>Filter facts by concept name.</p> <p>Parameters: - <code>pattern</code>: Pattern to match against concept names - <code>exact</code>: If True, require exact match; otherwise, use regex</p> <p>Returns: <code>FactQuery</code> object for further filtering</p>"},{"location":"api/xbrl/#by_label","title":"by_label()","text":"<pre><code>def by_label(self, pattern: str, exact: bool = False) -&gt; FactQuery\n</code></pre> <p>Filter facts by element label.</p> <p>Parameters: - <code>pattern</code>: Pattern to match against labels - <code>exact</code>: If True, require exact match; otherwise, use regex</p> <p>Returns: <code>FactQuery</code> object for further filtering</p>"},{"location":"api/xbrl/#by_value","title":"by_value()","text":"<pre><code>def by_value(self, min_value: float = None, max_value: float = None) -&gt; FactQuery\n</code></pre> <p>Filter facts by value range.</p> <p>Parameters: - <code>min_value</code>: Minimum value threshold - <code>max_value</code>: Maximum value threshold</p> <p>Returns: <code>FactQuery</code> object for further filtering</p>"},{"location":"api/xbrl/#by_period","title":"by_period()","text":"<pre><code>def by_period(self, start_date: str = None, end_date: str = None) -&gt; FactQuery\n</code></pre> <p>Filter facts by period range.</p> <p>Parameters: - <code>start_date</code>: Start date (YYYY-MM-DD format) - <code>end_date</code>: End date (YYYY-MM-DD format)</p> <p>Returns: <code>FactQuery</code> object for further filtering</p>"},{"location":"api/xbrl/#analysis-methods","title":"Analysis Methods","text":""},{"location":"api/xbrl/#pivot_by_period","title":"pivot_by_period()","text":"<pre><code>def pivot_by_period(self, concepts: List[str] = None) -&gt; pd.DataFrame\n</code></pre> <p>Create a pivot table showing concepts by period.</p> <p>Parameters: - <code>concepts</code>: List of concepts to include (default: all)</p> <p>Returns: DataFrame with concepts as rows and periods as columns</p>"},{"location":"api/xbrl/#time_series","title":"time_series()","text":"<pre><code>def time_series(self, concept: str) -&gt; pd.Series\n</code></pre> <p>Get time series data for a specific concept.</p> <p>Parameters: - <code>concept</code>: Concept name</p> <p>Returns: pandas Series with time series data</p>"},{"location":"api/xbrl/#data-conversion_1","title":"Data Conversion","text":""},{"location":"api/xbrl/#to_dataframe_1","title":"to_dataframe()","text":"<pre><code>def to_dataframe(self) -&gt; pd.DataFrame\n</code></pre> <p>Convert facts to pandas DataFrame.</p> <p>Returns: DataFrame with all facts and metadata</p> <p>Example:</p> <pre><code>facts = xbrl.facts\n\n# Query by concept\nrevenue_query = facts.by_concept(\"Revenue\")\nrevenue_facts = revenue_query.execute()\n\n# Query by label and value\nlarge_expenses = facts.by_label(\"expense\").by_value(min_value=1000000)\nexpense_facts = large_expenses.to_dataframe()\n\n# Time series analysis\nrevenue_ts = facts.time_series(\"Revenue\")\nprint(revenue_ts.head())\n\n# Pivot analysis\npivot_df = facts.pivot_by_period([\"Revenue\", \"NetIncomeLoss\"])\n</code></pre>"},{"location":"api/xbrl/#factquery","title":"FactQuery","text":"<p>Fluent query builder for filtering and manipulating XBRL facts.</p> <pre><code>class FactQuery:\n    \"\"\"A query builder for XBRL facts with fluent interface.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#filtering-methods","title":"Filtering Methods","text":"<p>All filtering methods return <code>self</code> for method chaining.</p>"},{"location":"api/xbrl/#by_concept_1","title":"by_concept()","text":"<pre><code>def by_concept(self, pattern: str, exact: bool = False) -&gt; FactQuery\n</code></pre>"},{"location":"api/xbrl/#by_label_1","title":"by_label()","text":"<pre><code>def by_label(self, pattern: str, exact: bool = False) -&gt; FactQuery\n</code></pre>"},{"location":"api/xbrl/#by_value_1","title":"by_value()","text":"<pre><code>def by_value(self, min_value: float = None, max_value: float = None) -&gt; FactQuery\n</code></pre>"},{"location":"api/xbrl/#by_period_1","title":"by_period()","text":"<pre><code>def by_period(self, start_date: str = None, end_date: str = None) -&gt; FactQuery\n</code></pre>"},{"location":"api/xbrl/#by_statement","title":"by_statement()","text":"<pre><code>def by_statement(self, statement_type: str) -&gt; FactQuery\n</code></pre> <p>Filter facts by statement type.</p> <p>Parameters: - <code>statement_type</code>: Statement type to filter by</p> <p>Returns: <code>FactQuery</code> object for method chaining</p>"},{"location":"api/xbrl/#execution-methods","title":"Execution Methods","text":""},{"location":"api/xbrl/#execute","title":"execute()","text":"<pre><code>def execute(self) -&gt; List[Dict]\n</code></pre> <p>Execute the query and return matching facts.</p> <p>Returns: List of fact dictionaries</p>"},{"location":"api/xbrl/#to_dataframe_2","title":"to_dataframe()","text":"<pre><code>def to_dataframe(self) -&gt; pd.DataFrame\n</code></pre> <p>Execute the query and return results as DataFrame.</p> <p>Returns: DataFrame with query results</p>"},{"location":"api/xbrl/#first","title":"first()","text":"<pre><code>def first(self) -&gt; Optional[Dict]\n</code></pre> <p>Get the first matching fact.</p> <p>Returns: First fact dictionary or None</p>"},{"location":"api/xbrl/#count","title":"count()","text":"<pre><code>def count(self) -&gt; int\n</code></pre> <p>Count matching facts without retrieving them.</p> <p>Returns: Number of matching facts</p> <p>Example:</p> <pre><code># Chain multiple filters\nquery = (xbrl.facts\n         .by_concept(\"Revenue\")\n         .by_period(start_date=\"2023-01-01\")\n         .by_value(min_value=1000000))\n\n# Execute in different ways\nfacts_list = query.execute()\nfacts_df = query.to_dataframe()\nfirst_fact = query.first()\ncount = query.count()\n</code></pre>"},{"location":"api/xbrl/#multi-period-analysis","title":"Multi-Period Analysis","text":""},{"location":"api/xbrl/#stitchedstatements","title":"StitchedStatements","text":"<p>Interface for accessing multi-period statements that combine data across multiple XBRL documents.</p> <pre><code>class StitchedStatements:\n    \"\"\"Interface for multi-period statements.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#statement-access-methods_1","title":"Statement Access Methods","text":"<p>Similar to <code>Statements</code> but returns <code>StitchedStatement</code> objects:</p>"},{"location":"api/xbrl/#balance_sheet_1","title":"balance_sheet()","text":"<pre><code>def balance_sheet(self) -&gt; Optional[StitchedStatement]\n</code></pre>"},{"location":"api/xbrl/#income_statement_1","title":"income_statement()","text":"<pre><code>def income_statement(self) -&gt; Optional[StitchedStatement]\n</code></pre>"},{"location":"api/xbrl/#cash_flow_statement_1","title":"cash_flow_statement()","text":"<pre><code>def cash_flow_statement(self) -&gt; Optional[StitchedStatement]\n</code></pre> <p>Example:</p> <pre><code># Multi-period analysis\nstitched_statements = xbrls.statements\nincome_stmt = stitched_statements.income_statement()\n\n# Shows multiple years of data\nprint(income_stmt.render())\n</code></pre>"},{"location":"api/xbrl/#stitchedstatement","title":"StitchedStatement","text":"<p>Individual statement showing multi-period data with comparative analysis.</p> <pre><code>class StitchedStatement:\n    \"\"\"Individual stitched statement showing multi-period data.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#analysis-methods_1","title":"Analysis Methods","text":""},{"location":"api/xbrl/#render_1","title":"render()","text":"<pre><code>def render(self, **kwargs) -&gt; RenderedStatement\n</code></pre> <p>Render multi-period statement with rich formatting.</p>"},{"location":"api/xbrl/#to_dataframe_3","title":"to_dataframe()","text":"<pre><code>def to_dataframe(self) -&gt; pd.DataFrame\n</code></pre> <p>Convert to DataFrame with periods as columns.</p>"},{"location":"api/xbrl/#standardization","title":"Standardization","text":""},{"location":"api/xbrl/#standardconcept","title":"StandardConcept","text":"<p>Represents a standardized concept that normalizes company-specific terminology.</p> <pre><code>class StandardConcept:\n    \"\"\"Standardized concept representation.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#properties_1","title":"Properties","text":""},{"location":"api/xbrl/#name","title":"name","text":"<pre><code>@property\ndef name(self) -&gt; str\n</code></pre> <p>Standardized concept name.</p>"},{"location":"api/xbrl/#label","title":"label","text":"<pre><code>@property\ndef label(self) -&gt; str\n</code></pre> <p>Standardized human-readable label.</p> <p>Example:</p> <pre><code># Standardization is applied automatically in statements\nstatement = xbrl.statements.income_statement()\ndf = statement.to_dataframe()\n\n# Check for standardized vs original labels\nprint(df[['label', 'original_label']].head())\n</code></pre>"},{"location":"api/xbrl/#rendering","title":"Rendering","text":""},{"location":"api/xbrl/#renderedstatement","title":"RenderedStatement","text":"<p>Formatted statement output with rich console display capabilities.</p> <pre><code>class RenderedStatement:\n    \"\"\"Rich formatted statement output.\"\"\"\n</code></pre>"},{"location":"api/xbrl/#display-methods","title":"Display Methods","text":""},{"location":"api/xbrl/#str","title":"str()","text":"<pre><code>def __str__(self) -&gt; str\n</code></pre> <p>Plain text representation of the statement.</p>"},{"location":"api/xbrl/#rich","title":"rich()","text":"<pre><code>def __rich__(self) -&gt; RichRenderable\n</code></pre> <p>Rich console representation with formatting.</p> <p>Example:</p> <pre><code># Rich rendering in console\nrendered = xbrl.render_statement(\"BalanceSheet\")\nprint(rendered)  # Displays with rich formatting\n\n# Plain text for export\ntext_output = str(rendered)\n</code></pre>"},{"location":"api/xbrl/#utility-functions","title":"Utility Functions","text":""},{"location":"api/xbrl/#stitch_statements","title":"stitch_statements()","text":"<pre><code>def stitch_statements(statements: List[Statement]) -&gt; StitchedStatement\n</code></pre> <p>Combine multiple statements into a stitched statement.</p> <p>Parameters: - <code>statements</code>: List of Statement objects to combine</p> <p>Returns: <code>StitchedStatement</code> object</p>"},{"location":"api/xbrl/#render_stitched_statement","title":"render_stitched_statement()","text":"<pre><code>def render_stitched_statement(stitched_statement: StitchedStatement, **kwargs) -&gt; RenderedStatement\n</code></pre> <p>Render a stitched statement with formatting.</p> <p>Parameters: - <code>stitched_statement</code>: StitchedStatement to render - <code>**kwargs</code>: Rendering options</p> <p>Returns: <code>RenderedStatement</code> object</p>"},{"location":"api/xbrl/#to_pandas_1","title":"to_pandas()","text":"<pre><code>def to_pandas(obj: Union[XBRL, Statement, FactsView]) -&gt; pd.DataFrame\n</code></pre> <p>Convert various XBRL objects to pandas DataFrame.</p> <p>Parameters: - <code>obj</code>: Object to convert (XBRL, Statement, or FactsView)</p> <p>Returns: DataFrame representation</p>"},{"location":"api/xbrl/#advanced-usage-examples","title":"Advanced Usage Examples","text":""},{"location":"api/xbrl/#multi-period-financial-analysis","title":"Multi-Period Financial Analysis","text":"<pre><code>from edgar import Company\nfrom edgar.xbrl import XBRLS\n\n# Get multiple years of data\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\").head(3)\nxbrls = XBRLS.from_filings(filings)\n\n# Analyze income statement trends\nincome_stmt = xbrls.statements.income_statement()\nrevenue_trend = income_stmt.get_trend(\"Revenue\")\nrevenue_growth = income_stmt.calculate_growth(\"Revenue\")\n\nprint(f\"Revenue Growth: {revenue_growth.iloc[-1]:.2%}\")\n</code></pre>"},{"location":"api/xbrl/#complex-fact-querying","title":"Complex Fact Querying","text":"<pre><code>from edgar import Company\nfrom edgar.xbrl import XBRL\n\ncompany = Company(\"MSFT\")\nfiling = company.latest(\"10-K\")\nxbrl = XBRL.from_filing(filing)\n\n# Complex query with multiple filters\nhigh_value_revenue = (xbrl.facts\n                     .by_concept(\"Revenue\")\n                     .by_value(min_value=50000000000)  # $50B+\n                     .by_period(start_date=\"2023-01-01\")\n                     .to_dataframe())\n\n# Pivot analysis\npivot_df = xbrl.facts.pivot_by_period([\n    \"Revenue\", \n    \"NetIncomeLoss\", \n    \"OperatingIncomeLoss\"\n])\n</code></pre>"},{"location":"api/xbrl/#statement-comparison","title":"Statement Comparison","text":"<pre><code># Compare statements across different companies\ncompanies = [\"AAPL\", \"MSFT\", \"GOOGL\"]\nstatements = []\n\nfor ticker in companies:\n    company = Company(ticker)\n    filing = company.latest(\"10-K\")\n    xbrl = XBRL.from_filing(filing)\n    if xbrl.statements.income_statement():\n        statements.append(xbrl.statements.income_statement())\n\n# Create comparison DataFrame\ncomparison_data = []\nfor stmt in statements:\n    df = stmt.to_dataframe()\n    comparison_data.append(df)\n\n# Analyze key metrics across companies\nkey_metrics = [\"Revenue\", \"NetIncomeLoss\", \"OperatingIncomeLoss\"]\nfor metric in key_metrics:\n    print(f\"\\n{metric} Comparison:\")\n    for i, stmt in enumerate(statements):\n        value = stmt.get_concept_value(metric)\n        if value:\n            print(f\"  {companies[i]}: ${value/1e9:.1f}B\")\n</code></pre>"},{"location":"api/xbrl/#import-reference","title":"Import Reference","text":"<pre><code># Core classes\nfrom edgar.xbrl import XBRL, XBRLS\n\n# Statement classes\nfrom edgar.xbrl import Statements, Statement\nfrom edgar.xbrl import StitchedStatements, StitchedStatement\n\n# Facts querying\nfrom edgar.xbrl import FactsView, FactQuery\nfrom edgar.xbrl import StitchedFactsView, StitchedFactQuery\n\n# Standardization and rendering\nfrom edgar.xbrl import StandardConcept, RenderedStatement\n\n# Utility functions\nfrom edgar.xbrl import stitch_statements, render_stitched_statement, to_pandas\n</code></pre>"},{"location":"api/xbrl/#error-handling","title":"Error Handling","text":"<pre><code>from edgar.xbrl import XBRL, XBRLFilingWithNoXbrlData\n\ntry:\n    xbrl = XBRL.from_filing(filing)\nexcept XBRLFilingWithNoXbrlData:\n    print(\"Filing does not contain XBRL data\")\nexcept Exception as e:\n    print(f\"Error parsing XBRL: {e}\")\n\n# Check for statement availability\nif xbrl.statements.income_statement():\n    income_stmt = xbrl.statements.income_statement()\n    df = income_stmt.to_dataframe()\nelse:\n    print(\"Income statement not found\")\n</code></pre>"},{"location":"api/xbrl/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use specific queries - Filter facts early to reduce processing time</li> <li>Cache XBRL objects - Parsing is expensive, reuse when possible</li> <li>Limit statement rendering - Use <code>max_rows</code> parameter for large statements</li> <li>Batch processing - Use <code>XBRLS</code> for efficient multi-period analysis</li> </ol>"},{"location":"api/xbrl/#see-also","title":"See Also","text":"<ul> <li>Company API Reference - Working with company data</li> <li>Filing API Reference - Working with individual filings</li> <li>Extract Financial Statements Guide - Practical examples</li> <li>Working with Filing Guide - Filing workflows</li> </ul>"},{"location":"concepts/data-objects/","title":"Understanding Data Objects","text":""},{"location":"concepts/data-objects/#introduction","title":"Introduction","text":"<p>One of the most powerful features of edgartools is its Data Objects system. This system transforms raw SEC filing data into structured, easy-to-use Python objects that expose filing-specific properties and methods. Instead of dealing with complex HTML, XML, or XBRL parsing yourself, Data Objects handle all the heavy lifting, allowing you to focus on analysis rather than data extraction.</p> <p>This guide explains the conceptual framework behind Data Objects, how they work under the hood, and how to leverage them effectively in your SEC data analysis workflows.</p>"},{"location":"concepts/data-objects/#the-problem-data-objects-solve","title":"The Problem Data Objects Solve","text":"<p>SEC filings are notoriously complex documents:</p> <ul> <li>They contain a mix of structured and unstructured data</li> <li>They use different formats (HTML, XML, XBRL) depending on filing type and date</li> <li>Their structure evolves over time as SEC requirements change</li> <li>They often contain inconsistencies in formatting and organization</li> <li>They require domain knowledge to interpret correctly</li> </ul> <p>Without Data Objects, working with SEC filings would require:</p> <ol> <li>Downloading raw filing documents</li> <li>Writing custom parsers for each filing type</li> <li>Handling edge cases and inconsistencies</li> <li>Extracting and organizing the data manually</li> <li>Converting data into usable formats for analysis</li> </ol> <p>Data Objects eliminate these challenges by providing a consistent, intuitive interface to SEC filing data, regardless of the underlying format or structure.</p>"},{"location":"concepts/data-objects/#the-data-objects-architecture","title":"The Data Objects Architecture","text":""},{"location":"concepts/data-objects/#core-principles","title":"Core Principles","text":"<p>The Data Objects system is built on several key principles:</p> <ol> <li>Type-Specific Interfaces: Each filing type has its own specialized interface that exposes only the relevant properties and methods.</li> <li>Lazy Parsing: Content is parsed on-demand to minimize memory usage and processing time.</li> <li>Consistent Access Patterns: Similar data is accessed through consistent patterns across different filing types.</li> <li>Rich Metadata: Each object includes metadata about the filing, such as dates, filer information, and document structure.</li> <li>Transformation Capabilities: Data can be easily transformed into formats like pandas DataFrames for analysis.</li> </ol>"},{"location":"concepts/data-objects/#object-hierarchy","title":"Object Hierarchy","text":"<p>Data Objects follow a hierarchical structure:</p> <pre><code>Filing (base class)\n\u251c\u2500\u2500 CompanyFiling\n\u2502   \u251c\u2500\u2500 TenK (10-K Annual Report)\n\u2502   \u251c\u2500\u2500 TenQ (10-Q Quarterly Report)\n\u2502   \u2514\u2500\u2500 EightK (8-K Current Report)\n\u251c\u2500\u2500 OwnershipFiling\n\u2502   \u251c\u2500\u2500 Form3 (Initial Ownership)\n\u2502   \u251c\u2500\u2500 Form4 (Changes in Ownership)\n\u2502   \u2514\u2500\u2500 Form5 (Annual Ownership Summary)\n\u251c\u2500\u2500 InvestmentFiling\n\u2502   \u2514\u2500\u2500 ThirteenF (13F Holdings Report)\n\u2514\u2500\u2500 Other specialized filing types\n</code></pre> <p>Each object in this hierarchy inherits common functionality while adding specialized features for its filing type.</p>"},{"location":"concepts/data-objects/#how-data-objects-work","title":"How Data Objects Work","text":""},{"location":"concepts/data-objects/#the-creation-process","title":"The Creation Process","text":"<p>When you call the <code>.obj()</code> method on a Filing object, the following process occurs:</p> <ol> <li>Filing Type Detection: The system identifies the filing type based on the form type and content.</li> <li>Parser Selection: The appropriate parser is selected for that filing type.</li> <li>Object Instantiation: A new Data Object of the correct type is created.</li> <li>Initial Parsing: Basic metadata is parsed immediately.</li> <li>Lazy Loading Setup: More complex content is set up for on-demand parsing.</li> </ol>"},{"location":"concepts/data-objects/#parsing-strategies","title":"Parsing Strategies","text":"<p>Data Objects use different parsing strategies depending on the filing type:</p> <ul> <li>HTML Parsing: For narrative sections like business descriptions and risk factors</li> <li>XML Parsing: For structured data like ownership transactions and fund holdings</li> <li>XBRL Processing: For financial statements and other tagged financial data</li> <li>Table Extraction: For tabular data embedded in filings</li> <li>Text Processing: For extracting plain text from complex HTML structures</li> </ul> <p>These strategies are applied automatically based on the content being accessed.</p>"},{"location":"concepts/data-objects/#working-with-data-objects","title":"Working with Data Objects","text":""},{"location":"concepts/data-objects/#common-patterns","title":"Common Patterns","text":"<p>Across all Data Objects, you'll find these common patterns:</p> <ol> <li>Property Access: Access filing sections or data through properties (e.g., <code>tenk.risk_factors</code>)</li> <li>Method Calls: Perform operations on the data (e.g., <code>form4.get_net_shares_traded()</code>)</li> <li>Dictionary-Like Access: Access specific items by key (e.g., <code>eightk[\"Item 2.01\"]</code>)</li> <li>Iteration: Iterate over collections within the filing (e.g., <code>for holding in thirteen_f.infotable</code>)</li> <li>Conversion: Transform data into other formats (e.g., <code>balance_sheet.to_dataframe()</code>)</li> </ol>"},{"location":"concepts/data-objects/#object-persistence","title":"Object Persistence","text":"<p>Data Objects are designed to be lightweight and don't persist the entire filing content in memory. Instead, they:</p> <ol> <li>Store references to the original filing content</li> <li>Parse specific sections only when accessed</li> <li>Cache parsed results to avoid repeated parsing</li> <li>Release memory when no longer needed</li> </ol> <p>This approach allows you to work with very large filings efficiently.</p>"},{"location":"concepts/data-objects/#advanced-usage-patterns","title":"Advanced Usage Patterns","text":""},{"location":"concepts/data-objects/#combining-multiple-data-objects","title":"Combining Multiple Data Objects","text":"<p>You can combine data from multiple Data Objects for more sophisticated analysis:</p> <pre><code># Compare financial data across quarters\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=[\"10-K\", \"10-Q\"]).head(5)\ndata_objects = [filing.obj() for filing in filings]\n\n# Extract revenue from each filing\nrevenues = []\nfor obj in data_objects:\n    if hasattr(obj, \"income_statement\"):\n        period_end = obj.period_end_date\n        revenue = obj.income_statement.get_value(\"Revenues\")\n        revenues.append((period_end, revenue))\n\n# Sort by date and analyze trend\nrevenues.sort(key=lambda x: x[0])\n</code></pre>"},{"location":"concepts/data-objects/#custom-data-extraction","title":"Custom Data Extraction","text":"<p>You can extend Data Objects with your own extraction logic:</p> <pre><code>def extract_cybersecurity_risks(tenk):\n    \"\"\"Extract cybersecurity-related content from risk factors.\"\"\"\n    if not hasattr(tenk, \"risk_factors\"):\n        return None\n\n    risk_text = tenk.risk_factors\n    cyber_keywords = [\"cyber\", \"hack\", \"breach\", \"data security\", \"privacy\"]\n\n    # Find paragraphs containing cyber keywords\n    paragraphs = risk_text.split(\"\\n\\n\")\n    cyber_paragraphs = [p for p in paragraphs if any(k in p.lower() for k in cyber_keywords)]\n\n    return cyber_paragraphs\n\n# Apply to a 10-K\ntenk = company.latest(\"10-K\").obj()\ncyber_risks = extract_cybersecurity_risks(tenk)\n</code></pre>"},{"location":"concepts/data-objects/#batch-processing","title":"Batch Processing","text":"<p>For processing many filings efficiently:</p> <pre><code>\n# Process all 8-Ks from the past year\ncompany = Company(\"MSFT\")\nfilings = company.get_filings(form=\"8-K\", start_date=\"2024-01-01\")\n\n# Extract all press releases\nall_press_releases = []\nfor filing in filings:\n    try:\n        eightk = filing.obj()\n        if eightk.has_press_release:\n            for pr in eightk.press_releases:\n                all_press_releases.append({\n                    \"date\": eightk.date_of_report,\n                    \"title\": pr.title,\n                    \"content\": pr.content\n                })\n    except Exception as e:\n        print(f\"Error processing filing {filing.accession_number}: {e}\")\n\nprint(f\"Found {len(all_press_releases)} press releases\")\n</code></pre>"},{"location":"concepts/data-objects/#common-challenges-and-solutions","title":"Common Challenges and Solutions","text":""},{"location":"concepts/data-objects/#challenge-handling-missing-data","title":"Challenge: Handling Missing Data","text":"<p>Not all filings contain all expected sections or data points:</p> <pre><code># Safe access pattern\ntenk = filing.obj()\nif hasattr(tenk, \"risk_factors\") and tenk.risk_factors:\n    # Process risk factors\n    pass\nelse:\n    print(\"No risk factors section found\")\n\n# For financial data\ntry:\n    revenue = income_stmt.get_value(\"Revenues\")\nexcept ValueError:\n    revenue = income_stmt.get_value(\"RevenueFromContractWithCustomerExcludingAssessedTax\")\nexcept:\n    revenue = None\n</code></pre>"},{"location":"concepts/data-objects/#challenge-handling-format-changes","title":"Challenge: Handling Format Changes","text":"<p>SEC filing formats evolve over time:</p> <pre><code># Version-aware code\ntenk = filing.obj()\nfiling_year = tenk.period_end_date.year\n\nif filing_year &gt;= 2021:\n    # Use newer XBRL taxonomy concepts\n    revenue = income_stmt.get_value(\"RevenueFromContractWithCustomerExcludingAssessedTax\")\nelse:\n    # Use older concepts\n    revenue = income_stmt.get_value(\"Revenues\")\n</code></pre>"},{"location":"concepts/data-objects/#challenge-processing-large-filings","title":"Challenge: Processing Large Filings","text":"<p>Some filings (especially 10-Ks) can be very large:</p> <pre><code># Memory-efficient processing\ntenk = filing.obj()\n\n# Process one section at a time\nsections = [\"business\", \"risk_factors\", \"management_discussion\"]\nfor section_name in sections:\n    if hasattr(tenk, section_name):\n        section = getattr(tenk, section_name)\n        # Process section\n        # ...\n        # Explicitly delete to free memory\n        del section\n</code></pre>"},{"location":"concepts/data-objects/#best-practices","title":"Best Practices","text":""},{"location":"concepts/data-objects/#1-use-the-right-object-for-the-task","title":"1. Use the Right Object for the Task","text":"<p>Choose the most specific Data Object for your needs:</p> <ul> <li>Use <code>TenK</code>/<code>TenQ</code> for financial statement analysis</li> <li>Use <code>EightK</code> for event monitoring</li> <li>Use <code>Form4</code> for insider trading analysis</li> <li>Use <code>ThirteenF</code> for fund holdings analysis</li> </ul>"},{"location":"concepts/data-objects/#2-leverage-built-in-methods","title":"2. Leverage Built-in Methods","text":"<p>Data Objects include many helpful methods that save you from writing custom code:</p> <pre><code># Instead of parsing manually:\nform4 = filing.obj()\nnet_shares = form4.get_net_shares_traded()  # Built-in method\n\n# Instead of calculating manually:\nthirteen_f = filing.obj()\ntop_10 = thirteen_f.get_top_holdings(10)  # Built-in method\n</code></pre>"},{"location":"concepts/data-objects/#3-handle-errors-gracefully","title":"3. Handle Errors Gracefully","text":"<p>SEC filings can have inconsistencies that cause parsing errors:</p> <pre><code>try:\n    data_obj = filing.obj()\n    # Work with the object\nexcept Exception as e:\n    print(f\"Error parsing filing {filing.accession_number}: {e}\")\n    # Fall back to simpler access methods\n    text = filing.text\n</code></pre>"},{"location":"concepts/data-objects/#4-use-local-storage","title":"4. Use Local Storage","text":"<ul> <li>Data Objects parse filing content on-demand</li> <li>Large filings (like 10-Ks) may take a few seconds to parse</li> <li>Consider using local storage for batch processing</li> </ul>"},{"location":"concepts/data-objects/#conclusion","title":"Conclusion","text":"<p>Data Objects are the heart of edgartools' power and usability. By abstracting away the complexities of SEC filing formats and structures, they allow you to focus on analysis rather than data extraction. Understanding how Data Objects work and how to use them effectively will help you build more powerful, efficient, and maintainable SEC data analysis workflows.</p> <p>Whether you're analyzing financial statements, tracking insider trading, or researching investment funds, Data Objects provide a consistent, intuitive interface that makes working with SEC data a breeze.</p>"},{"location":"concepts/data-objects/#additional-resources","title":"Additional Resources","text":"<ul> <li>Working with Financial Statements</li> <li>Analyzing Insider Trading</li> </ul>"},{"location":"concepts/sec-filings/","title":"Understanding SEC Filings","text":""},{"location":"concepts/sec-filings/#introduction","title":"Introduction","text":"<p>The U.S. Securities and Exchange Commission (SEC) requires public companies, investment funds, and certain individuals to submit various regulatory filings. These documents provide transparency into financial performance, significant events, insider activities, and investment decisions. The SEC's Electronic Data Gathering, Analysis, and Retrieval system (EDGAR) makes these filings publicly available.</p> <p>This guide explains the key SEC filing types, their purposes, and how to access and analyze them using the <code>edgartools</code> library.</p>"},{"location":"concepts/sec-filings/#why-sec-filings-matter","title":"Why SEC Filings Matter","text":"<p>SEC filings are the most authoritative source of company information available to the public. Unlike press releases, investor presentations, or news articles, SEC filings:</p> <ul> <li>Are legally required to be accurate and complete</li> <li>Follow standardized formats for consistency</li> <li>Contain detailed financial data and disclosures</li> <li>Are subject to strict liability for false or misleading information</li> <li>Provide a historical record of a company's development</li> </ul>"},{"location":"concepts/sec-filings/#common-sec-filing-types","title":"Common SEC Filing Types","text":""},{"location":"concepts/sec-filings/#company-reporting-forms","title":"Company Reporting Forms","text":"Form Description Frequency Key Information 10-K Annual report Annual Comprehensive financial statements, business description, risk factors, management discussion 10-Q Quarterly report Quarterly Interim financial statements, updates since last 10-K 8-K Current report As needed Material events (acquisitions, executive changes, bankruptcy) S-1 Registration statement Before IPO Business model, financials, risk factors, use of proceeds DEF 14A Proxy statement Annual Executive compensation, board members, shareholder proposals"},{"location":"concepts/sec-filings/#ownership-and-investment-forms","title":"Ownership and Investment Forms","text":"Form Description Filed By Key Information Form 3 Initial ownership Insiders Initial positions when becoming an insider Form 4 Changes in ownership Insiders Purchases, sales, and other transactions Form 5 Annual ownership Insiders Summary of transactions for the year 13F Holdings report Investment funds Portfolio holdings of investment managers 13D/G Beneficial ownership 5%+ shareholders Significant ownership positions and intentions"},{"location":"concepts/sec-filings/#anatomy-of-key-filings","title":"Anatomy of Key Filings","text":""},{"location":"concepts/sec-filings/#10-k-annual-report","title":"10-K Annual Report","text":"<p>The 10-K is the most comprehensive filing and typically contains:</p> <ol> <li>Business Overview (Part I, Item 1)</li> <li>Company operations, products/services, markets</li> <li>Revenue breakdown by segment</li> <li> <p>Competitive landscape</p> </li> <li> <p>Risk Factors (Part I, Item 1A)</p> </li> <li>Detailed disclosure of business risks</li> <li> <p>Industry, operational, and financial risks</p> </li> <li> <p>Management's Discussion &amp; Analysis (Part II, Item 7)</p> </li> <li>Analysis of financial condition and results</li> <li>Liquidity and capital resources</li> <li> <p>Critical accounting policies</p> </li> <li> <p>Financial Statements (Part II, Item 8)</p> </li> <li>Balance sheet</li> <li>Income statement</li> <li>Cash flow statement</li> <li>Statement of shareholders' equity</li> <li> <p>Notes to financial statements</p> </li> <li> <p>Controls and Procedures (Part II, Item 9)</p> </li> <li>Disclosure controls</li> <li>Internal control over financial reporting</li> </ol>"},{"location":"concepts/sec-filings/#10-q-quarterly-report","title":"10-Q Quarterly Report","text":"<p>The 10-Q is a condensed version of the 10-K filed quarterly, containing:</p> <ul> <li>Unaudited financial statements</li> <li>Management's discussion of results</li> <li>Updates on risk factors</li> <li>Disclosure of material events</li> </ul>"},{"location":"concepts/sec-filings/#8-k-current-report","title":"8-K Current Report","text":"<p>The 8-K reports significant events that occur between 10-K and 10-Q filings:</p> <ul> <li>Item 1.01: Entry into a Material Agreement</li> <li>Item 2.01: Completion of Acquisition or Disposition</li> <li>Item 5.02: Departure/Election of Directors or Officers</li> <li>Item 7.01: Regulation FD Disclosure</li> <li>Item 8.01: Other Events</li> </ul>"},{"location":"concepts/sec-filings/#form-4-insider-transactions","title":"Form 4 (Insider Transactions)","text":"<p>Form 4 discloses transactions by company insiders (directors, officers, 10%+ shareholders):</p> <ul> <li>Transaction date and type (purchase, sale, grant, exercise)</li> <li>Number of securities involved</li> <li>Price per share</li> <li>Resulting ownership after transaction</li> </ul>"},{"location":"concepts/sec-filings/#13f-investment-fund-holdings","title":"13F (Investment Fund Holdings)","text":"<p>13F reports show investment portfolios of funds managing over $100 million:</p> <ul> <li>Securities held at quarter-end</li> <li>Number of shares</li> <li>Market value</li> <li>Investment discretion</li> </ul>"},{"location":"concepts/sec-filings/#working-with-sec-filings-in-edgartools","title":"Working with SEC Filings in edgartools","text":""},{"location":"concepts/sec-filings/#accessing-filings","title":"Accessing Filings","text":"<pre><code>from edgar import Company, Filings\n\n# Get all filings for a specific company\napple = Company(\"AAPL\")\nfilings = apple.get_filings()\n\n# Filter by form type\nannual_reports = filings.filter(form=\"10-K\")\nquarterly_reports = filings.filter(form=\"10-Q\")\ncurrent_reports = filings.filter(form=\"8-K\")\n\n# Get the most recent annual report\nlatest_10k = annual_reports.latest()\n\n# Search across multiple companies\ntech_filings = Filings.search(\n    companies=[\"AAPL\", \"MSFT\", \"GOOGL\"],\n    form=\"8-K\",\n    start_date=\"2023-01-01\",\n    end_date=\"2023-12-31\"\n)\n</code></pre>"},{"location":"concepts/sec-filings/#extracting-financial-data","title":"Extracting Financial Data","text":"<pre><code># Get financial statements from a 10-K\nfiling = annual_reports.latest()\nfinancials = filing.get_financials()\n\n# Access specific statements\nbalance_sheet = financials.get_balance_sheet()\nincome_stmt = financials.get_income_statement()\ncash_flow = financials.get_cash_flow_statement()\n\n# Query specific financial items\nrevenue = income_stmt.get_value(\"Revenues\")\nnet_income = income_stmt.get_value(\"NetIncomeLoss\")\ntotal_assets = balance_sheet.get_value(\"Assets\")\n</code></pre>"},{"location":"concepts/sec-filings/#analyzing-insider-trading","title":"Analyzing Insider Trading","text":"<pre><code>from edgar import Company\n\n# Get insider transactions\ntesla = Company(\"TSLA\")\ninsider_filings = tesla.get_insider_transactions(start_date=\"2023-01-01\")\n\n# Analyze transactions by insider\nfor filing in insider_filings:\n    print(f\"Insider: {filing.reporting_owner}\")\n    print(f\"Transaction: {filing.transaction_type}\")\n    print(f\"Shares: {filing.shares}\")\n    print(f\"Value: ${filing.value:,.2f}\")\n    print(f\"Date: {filing.transaction_date}\")\n</code></pre>"},{"location":"concepts/sec-filings/#researching-investment-funds","title":"Researching Investment Funds","text":"<pre><code>from edgar import Fund\n\n# Get fund holdings\nblackrock = Fund(\"BlackRock\")\nholdings = blackrock.get_holdings()\n\n# Analyze portfolio\nfor holding in holdings.top(10):\n    print(f\"Company: {holding.company_name}\")\n    print(f\"Ticker: {holding.ticker}\")\n    print(f\"Shares: {holding.shares:,}\")\n    print(f\"Value: ${holding.value:,.2f}\")\n    print(f\"% of Portfolio: {holding.portfolio_percent:.2f}%\")\n</code></pre>"},{"location":"concepts/sec-filings/#best-practices-for-working-with-sec-filings","title":"Best Practices for Working with SEC Filings","text":""},{"location":"concepts/sec-filings/#1-understand-filing-timelines","title":"1. Understand Filing Timelines","text":"<ul> <li>10-K: Due 60-90 days after fiscal year-end (depending on company size)</li> <li>10-Q: Due 40-45 days after quarter-end</li> <li>8-K: Due within 4 business days of the event</li> <li>Form 4: Due within 2 business days of the transaction</li> <li>13F: Due within 45 days of quarter-end</li> </ul>"},{"location":"concepts/sec-filings/#2-be-aware-of-filing-amendments","title":"2. Be Aware of Filing Amendments","text":"<p>Amendments are indicated with a suffix: - 10-K/A, 10-Q/A, 8-K/A, etc.</p> <pre><code># Get original and amended filings\nfilings = company.get_filings(form=\"10-K\")\namendments = filings.filter(form=\"10-K/A\")\n</code></pre>"},{"location":"concepts/sec-filings/#3-handle-historical-data-carefully","title":"3. Handle Historical Data Carefully","text":"<ul> <li>Financial restatements can change historical data</li> <li>Company structures change over time (mergers, spin-offs)</li> <li>Accounting standards evolve</li> </ul>"},{"location":"concepts/sec-filings/#4-respect-sec-access-guidelines","title":"4. Respect SEC Access Guidelines","text":"<p>The SEC has rate limits for EDGAR access: - Identify yourself properly with <code>edgar.set_identity()</code> - Implement appropriate delays between requests - Consider using local caching for repeated access</p> <pre><code>from edgar import set_identity, enable_cache\n\n# Set your identity for SEC access\nset_identity(\"your.email@example.com\")\n\n</code></pre>"},{"location":"concepts/sec-filings/#conclusion","title":"Conclusion","text":"<p>SEC filings provide a wealth of structured and unstructured data for financial analysis, investment research, and regulatory compliance. With <code>edgartools</code>, you can efficiently access, parse, and analyze these filings to extract valuable insights.</p> <p>Understanding the different filing types, their purposes, and how to work with them programmatically allows you to build sophisticated financial analysis workflows and make more informed investment decisions.</p>"},{"location":"concepts/sec-filings/#additional-resources","title":"Additional Resources","text":"<ul> <li>SEC EDGAR Website</li> <li>SEC Filing Deadlines</li> <li>EDGAR Filing Codes</li> </ul>"},{"location":"examples/chart_generation_README/","title":"XBRL vs XBRL2 Chart Generation","text":"<p>This directory contains scripts and documentation for analyzing the XBRL2 rewrite compared to the original XBRL package.</p>"},{"location":"examples/chart_generation_README/#documentation","title":"Documentation","text":"<ul> <li><code>docs/xbrl2-rewrite-analysis.md</code>: Main analysis comparing XBRL vs XBRL2 features and structure</li> <li><code>docs/xbrl2-complexity-analysis.md</code>: Focused analysis of complexity, method size, and development speed</li> </ul>"},{"location":"examples/chart_generation_README/#chart-generation-script","title":"Chart Generation Script","text":"<p>The <code>generate_xbrl2_charts.py</code> script creates visualizations for both markdown files.</p>"},{"location":"examples/chart_generation_README/#installation-requirements","title":"Installation Requirements","text":"<p>To generate the charts, you need the following Python packages:</p> <pre><code>pip install matplotlib numpy pandas seaborn\n</code></pre>"},{"location":"examples/chart_generation_README/#usage","title":"Usage","text":"<p>Run the script from the project root directory:</p> <pre><code>python generate_xbrl2_charts.py\n</code></pre> <p>This will generate the following charts in the <code>docs/images/</code> directory:</p> <ol> <li>Basic Comparison Charts:</li> <li><code>xbrl2-code-metrics.png</code> - Code size and structure metrics</li> <li><code>xbrl2-code-distribution.png</code> - Distribution of code across files</li> <li><code>xbrl2-api-functionality.png</code> - API functionality comparison</li> <li><code>xbrl2-feature-comparison.png</code> - Feature availability comparison</li> <li> <p><code>xbrl2-code-quality.png</code> - Code quality metrics</p> </li> <li> <p>Complexity Analysis Charts:</p> </li> <li><code>xbrl2-development-timeline.png</code> - Development speed over time</li> <li><code>xbrl2-method-complexity.png</code> - Method-level complexity metrics</li> <li><code>xbrl2-method-size.png</code> - Method size distribution</li> <li><code>xbrl2-architectural-complexity.png</code> - Architectural design patterns</li> </ol>"},{"location":"examples/chart_generation_README/#manual-chart-creation","title":"Manual Chart Creation","text":"<p>If you're unable to run the script, you can manually create visualizations for the markdown files:</p> <ol> <li>Use any visualization tool (Excel, Google Sheets, etc.) to create charts with the data</li> <li>Save the charts in PNG format in <code>docs/images/</code> with the names listed above</li> <li>The markdown files will automatically display these charts</li> </ol>"},{"location":"examples/chart_generation_README/#data-sources","title":"Data Sources","text":"<p>The statistics and metrics in this analysis were derived from:</p> <ul> <li>Git logs for commit statistics</li> <li>Line counts from <code>wc -l</code> command</li> <li>Code analysis using <code>grep</code> and other Unix tools</li> <li>Manual code analysis for architectural and design patterns</li> </ul>"},{"location":"examples/user_journeys/","title":"User Journeys: Solve Real Problems with EdgarTools","text":"<p>This document showcases common workflows and tasks that financial professionals, developers, and researchers can accomplish using EdgarTools. Each journey addresses a specific problem and provides a concise code example.</p> 1. Company Financial Analysis - Analyze a company's financial health across multiple periods  **Problem:** Need to analyze a company's financial health across multiple periods.   <pre><code>from edgar import find\n\n# Get Microsoft's financial data for the last 3 years\ncompany = find(\"MSFT\")\nfinancials = company.financials()\n\n# Compare key metrics across years\nrevenue = financials.extract(\"Revenues\")\nnet_income = financials.extract(\"NetIncomeLoss\")\n\n# Create a financial dashboard\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10, 6))\nrevenue.plot(kind='bar', ax=ax, position=1, width=0.3, color='blue', alpha=0.7)\nnet_income.plot(kind='bar', ax=ax, position=0, width=0.3, color='green', alpha=0.7)\n\nax.set_title('Microsoft Financial Performance')\nax.legend(['Revenue', 'Net Income'])\nax.set_ylabel('USD (millions)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n</code></pre> 2. Investment Fund Research - Analyze fund holdings and compare share classes  **Problem:** Need to analyze fund holdings and compare share classes.   <pre><code>from edgar import find\n\n# Find a fund by ticker\nfund = find(\"VFIAX\")  # Vanguard 500 Index Fund\n\n# Get the fund's structure\nclasses = fund.get_classes()\nprint(f\"Fund has {len(classes)} share classes\")\n\n# Get the latest portfolio holdings\nportfolio = fund.get_portfolio()\n\n# Show top 10 holdings by value\ntop_holdings = portfolio.sort_values('value', ascending=False).head(10)\ntop_holdings\n</code></pre> 3. Insider Trading Analysis - Monitor insider transactions for investment signals  **Problem:** Monitor insider transactions for investment signals.   <pre><code>from edgar import find, get_insider_transaction_filings\n\n# Get recent insider transactions for Tesla\ncompany = find(\"TSLA\")\ninsider_filings = company.get_filings(form=[3, 4, 5], limit=20)\n\n# Extract and analyze the transactions\ntransactions = []\nfor filing in insider_filings:\n    form = obj(filing)\n    if hasattr(form, 'transactions') and form.transactions is not None:\n        for t in form.transactions:\n            transactions.append({\n                'date': t.transaction_date,\n                'name': form.reporting_owner.name,\n                'title': form.reporting_owner.title or 'Unknown',\n                'type': t.transaction_code,\n                'shares': t.shares,\n                'price': t.price_per_share,\n                'value': t.shares * t.price_per_share if t.price_per_share else None\n            })\n\n# Convert to DataFrame and analyze\nimport pandas as pd\ntx_df = pd.DataFrame(transactions)\n\n# Summarize by transaction type\ntx_df.groupby('type').agg({\n    'shares': 'sum',\n    'value': 'sum'\n}).sort_values('value', ascending=False)\n</code></pre> 4. SEC Filing Discovery - Find specific types of filings across companies or time periods  **Problem:** Find specific types of filings across companies or time periods.   <pre><code>from edgar import get_filings\n\n# Get all 8-K filings (material events) from the last week\nrecent_8ks = get_filings(form=\"8-K\", limit=50)\n\n# Filter to find filings mentioning \"acquisition\"\nacquisition_filings = []\nfor filing in recent_8ks:\n    text = filing.text()\n    if text and \"acquisition\" in text.lower():\n        acquisition_filings.append({\n            'company': filing.company_name,\n            'date': filing.filing_date,\n            'accession_no': filing.accession_no,\n            'items': filing.items if hasattr(filing, 'items') else None\n        })\n\n# Convert to DataFrame\nimport pandas as pd\npd.DataFrame(acquisition_filings)\n</code></pre> 5. Financial Data Extraction - Extract structured financial data for analysis or modeling  **Problem:** Extract structured financial data for analysis or modeling.   <pre><code>from edgar import find, obj\n\n# Get the latest 10-Q for Amazon\ncompany = find(\"AMZN\")\nlatest_10q = company.get_filings(form=\"10-Q\")[0]\ntenq = obj(latest_10q)\n\n# Extract all financial statements\nbalance_sheet = tenq.financials.balance_sheet\nincome_statement = tenq.financials.income_statement\ncash_flow = tenq.financials.cash_flow\n\n# Calculate key financial ratios\ncurrent_ratio = balance_sheet.loc['AssetsCurrent'] / balance_sheet.loc['LiabilitiesCurrent']\ndebt_to_equity = balance_sheet.loc['Liabilities'] / balance_sheet.loc['StockholdersEquity']\nnet_margin = income_statement.loc['NetIncomeLoss'] / income_statement.loc['Revenues']\n\nprint(f\"Current Ratio: {current_ratio.iloc[0]:.2f}\")\nprint(f\"Debt-to-Equity: {debt_to_equity.iloc[0]:.2f}\")\nprint(f\"Net Margin: {net_margin.iloc[0]:.2%}\")\n</code></pre> 6. Fund Holdings Analysis - Analyze what stocks funds are holding and track changes  **Problem:** Analyze what stocks funds are holding and track changes.   <pre><code>from edgar import find\n\n# Find a major investment manager\nblackrock = find(\"BLK\")\n\n# Get their recent 13F filings\nfilings_13f = blackrock.get_filings(form=\"13F-HR\", limit=2)\n\n# Extract holdings from the two most recent quarters\ncurrent_quarter = obj(filings_13f[0])\nprevious_quarter = obj(filings_13f[1])\n\n# Compare holdings between quarters\ncurrent_holdings = current_quarter.holdings\nprevious_holdings = previous_quarter.holdings\n\n# Merge to compare\nimport pandas as pd\nmerged = pd.merge(current_holdings, previous_holdings, \n                   on='nameOfIssuer', suffixes=('_current', '_previous'))\n\n# Calculate changes\nmerged['value_change'] = merged['value_current'] - merged['value_previous']\nmerged['value_change_pct'] = (merged['value_change'] / merged['value_previous']) * 100\n\n# Show biggest position increases\nmerged.sort_values('value_change', ascending=False).head(10)\n</code></pre> 7. Regulatory Filing Monitoring - Stay updated on new filings from watched companies  **Problem:** Stay updated on new filings from watched companies.   <pre><code>from edgar import find, get_current_filings\n\n# Define a watchlist of companies\nwatchlist = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META']\nwatchlist_ciks = [find(ticker).cik for ticker in watchlist]\n\n# Get today's filings\ntoday_filings = get_current_filings()\n\n# Filter to only show filings from companies on our watchlist\nwatchlist_filings = today_filings[today_filings.cik.isin(watchlist_ciks)]\n\n# Display the filings\nwatchlist_filings[['company_name', 'form', 'filing_date', 'html_link']]\n</code></pre> 8. AI/LLM Integration - Clean, structured text from SEC filings for AI analysis or LLM processing  **Problem:** Need clean, structured text from SEC filings for AI analysis or LLM processing.   <pre><code>from edgar import find\n\n# Get a 10-K filing\ncompany = find(\"NVDA\")  # NVIDIA\nfiling = company.get_filings(form=\"10-K\")[0]\n\n# Extract clean, readable text (not raw HTML)\nclean_text = filing.text()\n\n# View the formatted text in a notebook or terminal\nfiling.view()\n\n# Extract specific sections for targeted analysis\nrisk_factors = filing.get_section(\"Item 1A\", \"Risk Factors\")\n\n# Chunk text for LLM context windows\nchunks = filing.chunk_text(chunk_size=4000, overlap=200)\n\n# Process with your favorite LLM library\nfrom langchain.llms import OpenAI\n\nllm = OpenAI()\nfor i, chunk in enumerate(chunks[:3]):  # Process first 3 chunks as example\n    print(f\"Analysis of chunk {i+1}:\n\")\n    response = llm.generate([f\"Summarize the key points in this SEC filing text: {chunk}\"])\n    print(response.generations[0][0].text)\n    print(\"\\n---\\n\")\n</code></pre>"},{"location":"guides/extract-statements/","title":"Extract Financial Statements","text":"<p>Learn how to extract and work with financial statements from SEC filings using EdgarTools' powerful XBRL processing capabilities.</p>"},{"location":"guides/extract-statements/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic understanding of financial statements (balance sheet, income statement, cash flow)</li> <li>Familiarity with finding companies and searching filings</li> </ul>"},{"location":"guides/extract-statements/#quick-start-single-period-statements","title":"Quick Start: Single Period Statements","text":""},{"location":"guides/extract-statements/#get-latest-financial-statements","title":"Get Latest Financial Statements","text":"<p>The fastest way to get financial statements is using the Company.financials property:</p> <pre><code>from edgar import Company\n\n# Get Apple's latest financials\ncompany = Company(\"AAPL\")\nfinancials = company.get_financials()\n\n# Access individual statements\nbalance_sheet = financials.balance_sheet\nincome_statement = financials.income_statement()\ncash_flow = financials.cashflow_statement()\n</code></pre>"},{"location":"guides/extract-statements/#alternative-from-specific-filing","title":"Alternative: From Specific Filing","text":"<p>For more control, extract statements from a specific filing:</p> <pre><code>from edgar import Company\n\n# Get a specific filing\ncompany = Company(\"AAPL\")\nfiling = company.get_filings(form=\"10-K\").latest()\n\n# Parse XBRL data\nxbrl = filing.xbrl()\n\n# Access statements through the user-friendly API\nstatements = xbrl.statements\n\n# Display financial statements\nbalance_sheet = statements.balance_sheet()\nincome_statement = statements.income_statement()\ncash_flow = statements.cashflow_statement()\n\nprint(balance_sheet)  # Rich formatted output\n</code></pre>"},{"location":"guides/extract-statements/#multi-period-analysis","title":"Multi-Period Analysis","text":""},{"location":"guides/extract-statements/#method-1-using-multifinancials","title":"Method 1: Using MultiFinancials","text":"<p>Get financials across multiple years for trend analysis:</p> <pre><code>from edgar import Company, MultiFinancials\n\n# Get multiple years of 10-K filings\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\").head(3)  # Last 3 annual reports\n\n# Create multi-period financials\nmulti_financials = MultiFinancials.extract(filings)\n\n# Access statements spanning multiple years\nbalance_sheet = multi_financials.balance_sheet()\nincome_statement = multi_financials.income_statement()\ncash_flow = multi_financials.cashflow_statement()\n\nprint(\"Multi-Year Income Statement:\")\nprint(income_statement)\n</code></pre>"},{"location":"guides/extract-statements/#method-2-using-xbrl-stitching","title":"Method 2: Using XBRL Stitching","text":"<p>For more advanced multi-period analysis with intelligent period matching:</p> <pre><code>from edgar import Company\nfrom edgar.xbrl import XBRLS\n\n# Get multiple filings for trend analysis\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\").head(3)\n\n# Create stitched view across multiple filings\nxbrls = XBRLS.from_filings(filings)\n\n# Access stitched statements\nstitched_statements = xbrls.statements\n\n# Display multi-period statements with intelligent period selection\nincome_trend = stitched_statements.income_statement()\nbalance_sheet_trend = stitched_statements.balance_sheet()\ncashflow_trend = stitched_statements.cashflow_statement()\n\nprint(\"Three-Year Revenue Trend:\")\nrevenue_trend = income_trend.to_dataframe()\nrevenue_row = revenue_trend.loc[revenue_trend['label'] == 'Revenue']\nprint(revenue_row)\n</code></pre>"},{"location":"guides/extract-statements/#working-with-individual-statements","title":"Working with Individual Statements","text":""},{"location":"guides/extract-statements/#balance-sheet-analysis","title":"Balance Sheet Analysis","text":"<pre><code># Get balance sheet\nbalance_sheet = statements.balance_sheet()\n\n# Convert to DataFrame for analysis\nbs_df = balance_sheet.to_dataframe()\n\n# Extract key balance sheet items\ntotal_assets = bs_df[bs_df['label'] == 'Total Assets']\ntotal_liabilities = bs_df[bs_df['label'] == 'Total Liabilities']\nshareholders_equity = bs_df[bs_df['label'] == \"Total Stockholders' Equity\"]\n\nprint(\"Balance Sheet Summary:\")\nprint(f\"Total Assets: ${total_assets.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Total Liabilities: ${total_liabilities.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Shareholders' Equity: ${shareholders_equity.iloc[0, -1]/1e9:.1f}B\")\n\n# Calculate debt-to-equity ratio\ndebt_to_equity = total_liabilities.iloc[0, -1] / shareholders_equity.iloc[0, -1]\nprint(f\"Debt-to-Equity Ratio: {debt_to_equity:.2f}\")\n</code></pre>"},{"location":"guides/extract-statements/#income-statement-analysis","title":"Income Statement Analysis","text":"<pre><code># Get income statement\nincome_statement = statements.income_statement()\n\n# Convert to DataFrame\nis_df = income_statement.to_dataframe()\n\n# Extract key income statement items\nrevenue = is_df[is_df['label'] == 'Revenue']\ngross_profit = is_df[is_df['label'] == 'Gross Profit']\noperating_income = is_df[is_df['label'] == 'Operating Income']\nnet_income = is_df[is_df['label'] == 'Net Income']\n\nprint(\"Income Statement Analysis:\")\nprint(f\"Revenue: ${revenue.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Gross Profit: ${gross_profit.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Operating Income: ${operating_income.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Net Income: ${net_income.iloc[0, -1]/1e9:.1f}B\")\n\n# Calculate margins\ngross_margin = (gross_profit.iloc[0, -1] / revenue.iloc[0, -1]) * 100\noperating_margin = (operating_income.iloc[0, -1] / revenue.iloc[0, -1]) * 100\nnet_margin = (net_income.iloc[0, -1] / revenue.iloc[0, -1]) * 100\n\nprint(f\"\\nMargin Analysis:\")\nprint(f\"Gross Margin: {gross_margin:.1f}%\")\nprint(f\"Operating Margin: {operating_margin:.1f}%\")\nprint(f\"Net Margin: {net_margin:.1f}%\")\n</code></pre>"},{"location":"guides/extract-statements/#cash-flow-analysis","title":"Cash Flow Analysis","text":"<pre><code># Get cash flow statement\ncash_flow = statements.cashflow_statement()\n\n# Convert to DataFrame\ncf_df = cash_flow.to_dataframe()\n\n# Extract cash flow components\noperating_cf = cf_df[cf_df['label'] == 'Net Cash from Operating Activities']\ninvesting_cf = cf_df[cf_df['label'] == 'Net Cash from Investing Activities']\nfinancing_cf = cf_df[cf_df['label'] == 'Net Cash from Financing Activities']\n\nprint(\"Cash Flow Analysis:\")\nprint(f\"Operating Cash Flow: ${operating_cf.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Investing Cash Flow: ${investing_cf.iloc[0, -1]/1e9:.1f}B\")\nprint(f\"Financing Cash Flow: ${financing_cf.iloc[0, -1]/1e9:.1f}B\")\n\n# Calculate free cash flow (Operating CF - Capital Expenditures)\ncapex = cf_df[cf_df['label'].str.contains('Capital Expenditures', case=False, na=False)]\nif not capex.empty:\n    free_cash_flow = operating_cf.iloc[0, -1] + capex.iloc[0, -1]  # CapEx is usually negative\n    print(f\"Free Cash Flow: ${free_cash_flow/1e9:.1f}B\")\n</code></pre>"},{"location":"guides/extract-statements/#advanced-statement-customization","title":"Advanced Statement Customization","text":""},{"location":"guides/extract-statements/#period-views-and-formatting","title":"Period Views and Formatting","text":"<pre><code># Get available period views for income statement\nperiod_views = statements.get_period_views(\"IncomeStatement\")\nprint(\"Available period views:\")\nfor view in period_views:\n    print(f\"- {view['name']}: {view['description']}\")\n\n# Render with specific period view\nannual_comparison = statements.income_statement(period_view=\"Annual Comparison\")\nquarterly_comparison = statements.income_statement(period_view=\"Quarterly Comparison\")\n\n# Show full date ranges for duration periods\nincome_with_dates = statements.income_statement(show_date_range=True)\n\nprint(\"Income Statement with Date Ranges:\")\nprint(income_with_dates)\n</code></pre>"},{"location":"guides/extract-statements/#standardized-vs-company-specific-labels","title":"Standardized vs Company-Specific Labels","text":"<pre><code># Use standardized labels for cross-company comparison (default)\nstandardized = statements.income_statement(standard=True)\n\n# Use company-specific labels as reported in filing\ncompany_specific = statements.income_statement(standard=False)\n\nprint(\"Standardized Labels:\")\nprint(standardized.to_dataframe()['label'].head(10))\n\nprint(\"\\nCompany-Specific Labels:\")\nprint(company_specific.to_dataframe()['label'].head(10))\n</code></pre>"},{"location":"guides/extract-statements/#cross-company-analysis","title":"Cross-Company Analysis","text":""},{"location":"guides/extract-statements/#compare-multiple-companies","title":"Compare Multiple Companies","text":"<pre><code>import pandas as pd\n\ndef get_key_metrics(ticker):\n    \"\"\"Extract key financial metrics for a company.\"\"\"\n    try:\n        company = Company(ticker)\n        financials = company.financials\n\n        # Get statements\n        bs = financials.balance_sheet\n        inc = financials.income\n        cf = financials.cash_flow\n\n        # Extract key metrics\n        return {\n            'ticker': ticker,\n            'revenue': inc.loc['Revenue'].iloc[0] if 'Revenue' in inc.index else None,\n            'net_income': inc.loc['Net Income'].iloc[0] if 'Net Income' in inc.index else None,\n            'total_assets': bs.loc['Total Assets'].iloc[0] if 'Total Assets' in bs.index else None,\n            'operating_cf': cf.loc['Net Cash from Operating Activities'].iloc[0] if 'Net Cash from Operating Activities' in cf.index else None\n        }\n    except Exception as e:\n        print(f\"Error processing {ticker}: {e}\")\n        return None\n\n# Analyze multiple companies\ntech_companies = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META']\nmetrics = []\n\nfor ticker in tech_companies:\n    result = get_key_metrics(ticker)\n    if result:\n        metrics.append(result)\n\n# Create comparison DataFrame\ncomparison_df = pd.DataFrame(metrics)\n\n# Convert to billions and calculate ratios\ncomparison_df['revenue_b'] = comparison_df['revenue'] / 1e9\ncomparison_df['net_income_b'] = comparison_df['net_income'] / 1e9\ncomparison_df['net_margin'] = (comparison_df['net_income'] / comparison_df['revenue']) * 100\n\nprint(\"Tech Giants Comparison:\")\nprint(comparison_df[['ticker', 'revenue_b', 'net_income_b', 'net_margin']].round(1))\n</code></pre>"},{"location":"guides/extract-statements/#advanced-xbrl-features","title":"Advanced XBRL Features","text":""},{"location":"guides/extract-statements/#access-raw-xbrl-facts","title":"Access Raw XBRL Facts","text":"<pre><code># Access the facts API for detailed XBRL data\nfacts = xbrl.facts\n\n# Query facts by concept\nrevenue_facts = facts.query().by_concept('Revenue').to_dataframe()\nprint(\"Revenue facts across all periods:\")\nprint(revenue_facts[['concept', 'label', 'period', 'value']])\n\n# Search for specific concepts\nearnings_facts = facts.search_facts(\"Earnings Per Share\")\nprint(\"EPS-related facts:\")\nprint(earnings_facts[['concept', 'label', 'value']])\n\n# Get facts by statement type\nbalance_sheet_facts = facts.query().by_statement_type('BalanceSheet').to_dataframe()\nprint(f\"Found {len(balance_sheet_facts)} balance sheet facts\")\n</code></pre>"},{"location":"guides/extract-statements/#time-series-analysis","title":"Time Series Analysis","text":"<pre><code># Get time series data for specific concepts\nrevenue_series = facts.time_series('Revenue')\nnet_income_series = facts.time_series('Net Income')\n\nprint(\"Revenue Time Series:\")\nprint(revenue_series)\n\n# Convert to DataFrame for analysis\nimport pandas as pd\nts_df = pd.DataFrame({\n    'revenue': revenue_series,\n    'net_income': net_income_series\n})\n\n# Calculate growth rates\nts_df['revenue_growth'] = ts_df['revenue'].pct_change() * 100\nts_df['income_growth'] = ts_df['net_income'].pct_change() * 100\n\nprint(\"Growth Analysis:\")\nprint(ts_df[['revenue_growth', 'income_growth']].round(1))\n</code></pre>"},{"location":"guides/extract-statements/#dimensional-analysis","title":"Dimensional Analysis","text":"<pre><code># Query facts by dimensions (if available)\nsegment_facts = facts.query().by_dimension('Segment').to_dataframe()\nif not segment_facts.empty:\n    print(\"Segment-specific financial data:\")\n    print(segment_facts[['concept', 'label', 'dimension_value', 'value']].head())\n\n# Get facts by geographic dimension\ngeographic_facts = facts.query().by_dimension('Geography').to_dataframe()\nif not geographic_facts.empty:\n    print(\"Geographic breakdown:\")\n    print(geographic_facts[['concept', 'dimension_value', 'value']].head())\n</code></pre>"},{"location":"guides/extract-statements/#export-and-integration","title":"Export and Integration","text":""},{"location":"guides/extract-statements/#export-to-different-formats","title":"Export to Different Formats","text":"<pre><code># Export statements to various formats\nincome_statement = statements.income_statement()\n\n# Export to pandas DataFrame\ndf = income_statement.to_dataframe()\n\n# Export to markdown\nmarkdown_text = income_statement.render().to_markdown()\n\n# Save to CSV\ndf.to_csv('apple_income_statement.csv', index=False)\n\n# Save markdown to file\nwith open('apple_income_statement.md', 'w') as f:\n    f.write(markdown_text)\n\nprint(\"Statements exported to CSV and Markdown\")\n</code></pre>"},{"location":"guides/extract-statements/#integration-with-analysis-libraries","title":"Integration with Analysis Libraries","text":"<pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Get multi-period data\nfilings = company.get_filings(form=\"10-K\").head(5)\nmulti_financials = MultiFinancials.extract(filings)\nincome_df = multi_financials.income.to_dataframe()\n\n# Extract revenue data for plotting\nrevenue_data = income_df[income_df['label'] == 'Revenue'].iloc[0, 1:].astype(float)\nperiods = revenue_data.index\n\n# Create visualization\nplt.figure(figsize=(10, 6))\nplt.plot(periods, revenue_data / 1e9, marker='o', linewidth=2)\nplt.title('Apple Revenue Trend (5 Years)')\nplt.xlabel('Period')\nplt.ylabel('Revenue (Billions USD)')\nplt.xticks(rotation=45)\nplt.grid(True, alpha=0.3)\nplt.tight_layout()\nplt.show()\n\n# Calculate year-over-year growth\nrevenue_growth = revenue_data.pct_change() * 100\nprint(\"Year-over-Year Revenue Growth:\")\nfor period, growth in revenue_growth.dropna().items():\n    print(f\"{period}: {growth:.1f}%\")\n</code></pre>"},{"location":"guides/extract-statements/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guides/extract-statements/#efficient-multi-company-analysis","title":"Efficient Multi-Company Analysis","text":"<pre><code># Efficient batch processing\ndef batch_analyze_companies(tickers, max_workers=5):\n    \"\"\"Analyze multiple companies efficiently.\"\"\"\n    from concurrent.futures import ThreadPoolExecutor\n\n    def analyze_single(ticker):\n        try:\n            company = Company(ticker)\n            financials = company.financials\n            return {\n                'ticker': ticker,\n                'revenue': financials.income.loc['Revenue'].iloc[0],\n                'assets': financials.balance_sheet.loc['Total Assets'].iloc[0]\n            }\n        except Exception as e:\n            return {'ticker': ticker, 'error': str(e)}\n\n    with ThreadPoolExecutor(max_workers=max_workers) as executor:\n        results = list(executor.map(analyze_single, tickers))\n\n    return [r for r in results if 'error' not in r]\n\n# Analyze S&amp;P 100 companies efficiently\nsp100_sample = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA', 'JPM']\nresults = batch_analyze_companies(sp100_sample)\n\ncomparison_df = pd.DataFrame(results)\nprint(\"Batch Analysis Results:\")\nprint(comparison_df.head())\n</code></pre>"},{"location":"guides/extract-statements/#caching-for-repeated-analysis","title":"Caching for Repeated Analysis","text":"<pre><code># Cache XBRL data for repeated use\ncompany = Company(\"AAPL\")\nfiling = company.get_filings(form=\"10-K\").latest()\n\n# Parse once, use multiple times\nxbrl = filing.xbrl()\n\n# Perform different analyses on same data\nbalance_sheet = xbrl.statements.balance_sheet()\nincome_statement = xbrl.statements.income_statement()\ncash_flow = xbrl.statements.cashflow_statement()\n\n# Access facts for custom queries\nfacts = xbrl.facts\nrevenue_facts = facts.query().by_concept('Revenue').to_dataframe()\nmargin_facts = facts.search_facts(\"margin\")\n</code></pre>"},{"location":"guides/extract-statements/#common-patterns-and-best-practices","title":"Common Patterns and Best Practices","text":""},{"location":"guides/extract-statements/#robust-financial-metric-extraction","title":"Robust Financial Metric Extraction","text":"<pre><code>def safe_extract_metric(statement_df, label, column=-1, default=None):\n    \"\"\"Safely extract a metric from financial statement DataFrame.\"\"\"\n    try:\n        rows = statement_df[statement_df['label'].str.contains(label, case=False, na=False)]\n        if not rows.empty:\n            return rows.iloc[0, column]\n        return default\n    except Exception:\n        return default\n\n# Use for robust metric extraction\nincome_df = statements.income_statement().to_dataframe()\n\nrevenue = safe_extract_metric(income_df, 'Revenue')\nnet_income = safe_extract_metric(income_df, 'Net Income')\noperating_income = safe_extract_metric(income_df, 'Operating Income')\n\nif revenue and net_income:\n    net_margin = (net_income / revenue) * 100\n    print(f\"Net Margin: {net_margin:.1f}%\")\n</code></pre>"},{"location":"guides/extract-statements/#handle-missing-or-inconsistent-data","title":"Handle Missing or Inconsistent Data","text":"<pre><code>def get_financial_metrics(company_ticker):\n    \"\"\"Get financial metrics with error handling.\"\"\"\n    try:\n        company = Company(company_ticker)\n        financials = company.financials\n\n        metrics = {}\n\n        # Try to get income statement metrics\n        try:\n            income = financials.income\n            metrics['revenue'] = income.loc['Revenue'].iloc[0] if 'Revenue' in income.index else None\n            metrics['net_income'] = income.loc['Net Income'].iloc[0] if 'Net Income' in income.index else None\n        except Exception as e:\n            print(f\"Income statement error for {company_ticker}: {e}\")\n\n        # Try to get balance sheet metrics\n        try:\n            balance_sheet = financials.balance_sheet\n            metrics['total_assets'] = balance_sheet.loc['Total Assets'].iloc[0] if 'Total Assets' in balance_sheet.index else None\n        except Exception as e:\n            print(f\"Balance sheet error for {company_ticker}: {e}\")\n\n        return metrics\n\n    except Exception as e:\n        print(f\"Company error for {company_ticker}: {e}\")\n        return {}\n\n# Test with various companies\ntest_companies = ['AAPL', 'INVALID_TICKER', 'MSFT']\nfor ticker in test_companies:\n    metrics = get_financial_metrics(ticker)\n    if metrics:\n        print(f\"{ticker}: {metrics}\")\n</code></pre>"},{"location":"guides/extract-statements/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"guides/extract-statements/#statement-not-available","title":"Statement Not Available","text":"<pre><code># Check what statements are available\ntry:\n    statements = xbrl.statements\n    available_statements = statements.available_statements()\n    print(f\"Available statements: {available_statements}\")\n\n    # Try alternative statement access\n    if 'IncomeStatement' in available_statements:\n        income = statements.income_statement()\n    elif 'ComprehensiveIncome' in available_statements:\n        income = statements['ComprehensiveIncome']\n    else:\n        print(\"No income statement available\")\n\nexcept Exception as e:\n    print(f\"Error accessing statements: {e}\")\n</code></pre>"},{"location":"guides/extract-statements/#period-selection-issues","title":"Period Selection Issues","text":"<pre><code># Check available periods\nreporting_periods = xbrl.reporting_periods\nprint(\"Available reporting periods:\")\nfor period in reporting_periods[:5]:  # Show first 5\n    print(f\"- {period['date']} ({period['type']}): {period.get('duration', 'N/A')} days\")\n\n# Handle quarterly vs annual periods\nif any(p.get('duration', 0) &lt; 120 for p in reporting_periods):\n    print(\"Quarterly periods detected\")\n    quarterly_income = statements.income_statement(period_view=\"Quarterly Comparison\")\nelse:\n    print(\"Annual periods only\")\n    annual_income = statements.income_statement(period_view=\"Annual Comparison\")\n</code></pre>"},{"location":"guides/extract-statements/#next-steps","title":"Next Steps","text":"<p>Now that you can extract financial statements, explore these advanced topics:</p>"},{"location":"guides/extract-statements/#-query-xbrl-data-advanced-xbrl-fact-querying-and-analysis","title":"- Query XBRL Data - Advanced XBRL fact querying and analysis","text":""},{"location":"guides/extract-statements/#related-documentation","title":"Related Documentation","text":"<ul> <li>Getting XBRL from Filings - Original XBRL documentation</li> <li>Company Financials - Company financials API</li> <li>XBRL API Reference - Complete XBRL class documentation</li> </ul>"},{"location":"guides/filing-attachments/","title":"Attachments","text":"<p>Once you have a <code>Filing</code> instance you can access the attachments for the filing using the <code>attachments</code> property.</p> <pre><code>filing.attachments\n</code></pre> <p></p>"},{"location":"guides/filing-attachments/#get-an-attachment-by-index","title":"Get an attachment by index","text":"<p>You can get an attachment by index using the <code>[]</code> operator and using the <code>Seq</code> number of the attachment. The primary filing document is always at index 1, and is usually HTML or XML.</p> <pre><code>attachment = filing.attachments[1]\nattachment\n</code></pre> <p></p>"},{"location":"guides/filing-attachments/#viewing-an-attachment","title":"Viewing an attachment","text":"<p>You can view the attachment in a browser using the <code>view()</code> method. This works if the attachment is a text or html file.</p> <pre><code>attachment.view()\n</code></pre> <p></p> <p>This extracts the text of the attachment and renders it in the console. If you need to get the text use the <code>text()</code> method.</p>"},{"location":"guides/filing-attachments/#getting-the-text-content-of-an-attachment","title":"Getting the text content of an attachment","text":"<p>You can get the text content of an attachment using the <code>text()</code> function.</p> <pre><code>text = attachment.text()\nprint(text)\n</code></pre> <p>This will print the text content of the attachment.</p>"},{"location":"guides/filing-attachments/#downloading-an-attachment","title":"Downloading an attachment","text":"<p>You can download the attachment using the <code>download()</code> method. This will download the attachment to the current working directory.</p> <pre><code>attachment.download('/path/to/download')\n</code></pre> <p>If the path is a directory the attachment will be downloaded to that directory using the original name of the file.</p> <p>If the path is a file the attachment will be downloaded to that file. This allows you to rename the attachment.</p> <p>If you don't provide a path the content of the attachment will be returned as a string.</p>"},{"location":"guides/filtering-filings/","title":"Filtering filings","text":"<p>Filings can be filtered in many different ways like by <code>form</code>, <code>date</code>, <code>CIK</code>, <code>ticker</code>, and accession number. You also filter while getting filings using the <code>get_filings</code> function or after getting filings using the <code>filter</code> method.</p> <p>For the most part these approaches will give identical results, except that with get_filings you are filtering from all available filings in the SEC, while with <code>filter</code> you are reducing the nu,ber of filings in a <code>Filings</code> object.</p>"},{"location":"guides/filtering-filings/#filtering-using-parameters-of-get_filings","title":"Filtering using parameters of <code>get_filings</code>","text":"<p>You can filter using parameters of the <code>get_filings</code> function. </p>"},{"location":"guides/filtering-filings/#get-filings-by-form","title":"Get filings by form","text":"<p>To get filings of a specific form type like 10-K, you can use the <code>form</code> parameter. For example:</p> <pre><code>filings = get_filings(form='10-K')\n</code></pre> <p>The <code>form</code> can also be a list of forms. For example:</p> <pre><code>filings = get_filings(form=['10-K', '10-Q'])\n</code></pre> <p>By default the <code>amendments</code> parameter is set to <code>True</code> so that amended filings are included. You can set it to <code>False</code> to exclude amended filings. For example:</p> <pre><code>filings = get_filings(form='10-K', amendments=False)\n</code></pre>"},{"location":"guides/filtering-filings/#filtering-by-date","title":"Filtering by date","text":"<p>You can filter filings by date using the <code>filing_date</code> parameter. For example:</p> <pre><code>filings = get_filings(filing_date='2022-01-01')\n</code></pre> <p>You can also filter by a range of dates. For example:</p> <pre><code>filings = get_filings(filing_date='2022-01-01:2022-01-10')\n</code></pre> <p>You can filter up to a date. For example:</p> <pre><code>filings = get_filings(filing_date=':2022-01-10')\n</code></pre> <p>as well as after a date. For example:</p> <pre><code>filings = get_filings(filing_date='2022-01-10:')\n</code></pre>"},{"location":"guides/filtering-filings/#more-filtering-examples","title":"More filtering examples","text":"<pre><code>\nfrom edgar import get_filings\n\n# Get filings for 2021\nfilings_ = get_filings(2021) \n\n# Get filings for 2021 Q4\nfilings_ = get_filings(2021, 4) \n\n# Get filings for 2021 Q3 and Q4\nfilings_ = get_filings(2021, [3,4]) \n\n# Get filings for 2020 and 2021\nfilings_ = get_filings([2020, 2021]) \n\n# Get filings for Q4 of 2020 and 2021\nfilings_ = get_filings([2020, 2021], 4) \n\n# Get filings between 2010 and 2021 - does not include 2021\nfilings_ = get_filings(range(2010, 2021)) \n\n# Get filings for 2021 Q4 for form D\nfilings_ = get_filings(2021, 4, form=\"D\") \n\n# Get filings for 2021 Q4 on \"2021-10-01\"\nfilings_ = get_filings(2021, 4, filing_date=\"2021-10-01\") \n\n# Get filings for 2021 Q4 between \"2021-10-01\" and \"2021-10-10\"\nfilings_ = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") \n\n</code></pre>"},{"location":"guides/filtering-filings/#filtering-using-filingsfilter","title":"Filtering using <code>Filings.filter</code>","text":"<p>You can filter filings using the <code>filter</code> method after getting filings. This work mostly identically to filtering using <code>get_filings</code>. The difference is that <code>filter</code> reduces from an existing <code>Filings</code> object rather that the entire SEC.</p> <p>Example:</p> <pre><code>filings().filter(form='10-K')\n</code></pre> <pre><code>def filter(self, *,\n    form: Optional[Union[str, List[IntString]]] = None,\n    amendments: bool = None,\n    filing_date: Optional[str] = None,\n    date: Optional[str] = None,\n    cik: Union[IntString, List[IntString]] = None,\n    exchange: Union[str, List[str], Exchange, List[Exchange]] = None,\n    ticker: Union[str, List[str]] = None,\n    accession_number: Union[str, List[str]] = None) -&gt; Optional['Filings']:\n\n    :param form: The form or list of forms to filter by\n    :param amendments: Whether to include amendments to the forms e.g. include \"10-K/A\"\n    :param filing_date: The filing date\n    :param date: An alias for the filing date\n    :param cik: The CIK or list of CIKs to filter by\n    :param exchange: The exchange or list of exchanges to filter by\n    :param ticker: The ticker or list of tickers to filter by\n    :param accession_number: The accession number or list of accession numbers to filter by\n</code></pre>"},{"location":"guides/filtering-filings/#filtering-by-cik","title":"Filtering by CIK","text":"<p>You can filter filings by CIK by using the <code>filter</code> function with the <code>cik</code> parameter to get all filings for a company. For example:</p> <pre><code>filings = get_filings.filter(cik='0000320193')\n</code></pre>"},{"location":"guides/filtering-filings/#filtering-by-ticker","title":"Filtering by ticker","text":"<p>You can filter filings by ticker  by using the <code>filter</code> function with the <code>ticker</code> parameter. For example:</p> <pre><code>filings = get_filings.filter(ticker='AAPL')\n</code></pre> <p>Note that this first does a lookup of the CIK for the ticker and then gets filings for the CIK. So if you know the CIK, it is better to use that directly.</p> <p>Note that you can also get use <code>Company(&lt;ticker&gt;)</code> OR  <code>Company(&lt;cik&gt;)</code> and then use the <code>get_filings</code> method to get filings for the company. For example:</p>"},{"location":"guides/filtering-filings/#filtering-by-exchange","title":"Filtering by exchange","text":"<p>You can filter filings by <code>exchange</code>. </p> <pre><code>filings = get_filings().filter(exchange='NASDAQ')\n</code></pre> <p>There are the following exchanges available:</p> Exchange Nasdaq NYSE CBOE OTC"},{"location":"guides/filtering-filings/#using-head-tail-and-sample","title":"Using <code>head</code>, <code>tail</code>, and <code>sample</code>","text":"<p>You can subset filings using the <code>head</code> and <code>tail</code> and <code>sample</code> methods. For example:</p> <pre><code>filings = get_filings()\nfilings.head(10)\nfilings.tail(10)\nfilings.sample(10)\n</code></pre>"},{"location":"guides/finding-companies/","title":"Find Companies by Name/Ticker","text":"<p>Learn how to locate companies in the SEC database using tickers, CIKs, or company names.</p>"},{"location":"guides/finding-companies/#method-1-find-by-ticker-symbol","title":"Method 1: Find by Ticker Symbol","text":"<p>The most common way to find a company is by its stock ticker symbol:</p> <pre><code>from edgar import Company\n\n# Find Apple by ticker (case-insensitive)\napple = Company(\"AAPL\")\nprint(apple)\n</code></pre> <p>Output:</p> <pre><code>Company(AAPL - Apple Inc.)\n  CIK: 0000320193\n  Industry: ELECTRONIC COMPUTERS\n  Website: https://www.apple.com\n  Location: Cupertino, CA\n</code></pre> <p>Key points: - Tickers are case-insensitive: <code>Company(\"aapl\")</code> works the same as <code>Company(\"AAPL\")</code> - This performs a ticker lookup then loads the company data - Some companies have multiple tickers for the same entity</p>"},{"location":"guides/finding-companies/#method-2-find-by-cik-central-index-key","title":"Method 2: Find by CIK (Central Index Key)","text":"<p>The CIK uniquely identifies every SEC filer and is more reliable than tickers:</p> <pre><code># Using numeric CIK\napple = Company(320193)\n\n# Using string CIK (with or without zero padding)\napple = Company(\"320193\")\napple = Company(\"0000320193\")\n\nprint(apple)\n</code></pre> <p>Why use CIK: - Unique: Every company has exactly one CIK - Permanent: CIKs don't change like tickers might - Faster: Direct lookup without ticker resolution</p>"},{"location":"guides/finding-companies/#method-3-search-by-company-name","title":"Method 3: Search by Company Name","text":"<p>When you don't know the exact ticker or CIK:</p> <pre><code>from edgar import find\n\n# Search for companies by name\nresults = find(\"Apple\")\nprint(f\"Found {len(results)} companies:\")\nfor company in results:\n    print(f\"  {company.ticker}: {company.name}\")\n</code></pre> <p>Output:</p> <pre><code>Found 3 companies:\n  AAPL: Apple Inc.\n  APPL: Apple Hospitality REIT Inc\n  APOG: Apogee Enterprises Inc\n</code></pre> <p>Then select the right one:</p> <pre><code># Get the first result\napple = results[0]\n\n# Or be more specific\napple = Company(\"AAPL\")  # If you know the ticker from search\n</code></pre>"},{"location":"guides/finding-companies/#working-with-company-objects","title":"Working with Company Objects","text":"<p>Once you have a Company object, you can access detailed information:</p> <pre><code>company = Company(\"MSFT\")\n\n# Basic information\nprint(f\"Name: {company.name}\")\nprint(f\"CIK: {company.cik}\")\nprint(f\"Ticker: {company.ticker}\")\nprint(f\"Industry: {company.industry}\")\nprint(f\"Website: {company.website}\")\nprint(f\"Location: {company.city}, {company.state}\")\n\n# SEC-specific information\nprint(f\"SIC Code: {company.sic}\")\nprint(f\"Fiscal Year End: {company.fiscal_year_end}\")\nprint(f\"Exchange: {company.exchange}\")\n</code></pre> <p>Output:</p> <pre><code>Name: Microsoft Corporation\nCIK: 0000789019\nTicker: MSFT\nIndustry: SERVICES-PREPACKAGED SOFTWARE\nWebsite: https://www.microsoft.com\nLocation: Redmond, WA\nSIC Code: 7372\nFiscal Year End: 0630\nExchange: Nasdaq\n</code></pre>"},{"location":"guides/finding-companies/#handling-edge-cases","title":"Handling Edge Cases","text":""},{"location":"guides/finding-companies/#company-not-found","title":"Company Not Found","text":"<pre><code>try:\n    company = Company(\"INVALID\")\nexcept Exception as e:\n    print(f\"Company not found: {e}\")\n    # Fallback to search\n    results = find(\"Invalid Corp\")\n    if results:\n        company = results[0]\n    else:\n        print(\"No companies found matching that name\")\n</code></pre>"},{"location":"guides/finding-companies/#multiple-tickers-for-same-company","title":"Multiple Tickers for Same Company","text":"<pre><code># Berkshire Hathaway has multiple share classes\nbrk_a = Company(\"BRK-A\")  # Class A shares\nbrk_b = Company(\"BRK-B\")  # Class B shares\n\n# Both point to the same CIK and SEC filings\nprint(f\"BRK-A CIK: {brk_a.cik}\")\nprint(f\"BRK-B CIK: {brk_b.cik}\")\n# Both will show: 0001067983\n</code></pre>"},{"location":"guides/finding-companies/#historical-tickers","title":"Historical Tickers","text":"<pre><code># Some companies change tickers over time\n# The Company object will find the current entity\ntry:\n    company = Company(\"FB\")  # Meta's old ticker\n    print(f\"Found: {company.name}\")  # May find Meta Platforms Inc\nexcept:\n    # Try the new ticker\n    company = Company(\"META\")\n    print(f\"Found: {company.name}\")\n</code></pre>"},{"location":"guides/finding-companies/#batch-company-lookup","title":"Batch Company Lookup","text":"<p>For analyzing multiple companies efficiently:</p> <pre><code>from edgar import Company\n\n# List of tickers to analyze\ntickers = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\ncompanies = []\n\nfor ticker in tickers:\n    try:\n        company = Company(ticker)\n        companies.append({\n            'ticker': ticker,\n            'name': company.name,\n            'cik': company.cik,\n            'industry': company.industry,\n            'market_cap': company.market_cap  # If available\n        })\n        print(f\"\u2713 Found {ticker}: {company.name}\")\n    except Exception as e:\n        print(f\"\u2717 Error with {ticker}: {e}\")\n\n# Convert to DataFrame for analysis\nimport pandas as pd\ndf = pd.DataFrame(companies)\nprint(df)\n</code></pre>"},{"location":"guides/finding-companies/#advanced-search-techniques","title":"Advanced Search Techniques","text":""},{"location":"guides/finding-companies/#search-by-industry","title":"Search by Industry","text":"<pre><code>from edgar import get_filings\n\n# Get recent filings and filter by industry keywords\nfilings = get_filings()\ntech_companies = []\n\nfor filing in filings:\n    if filing.company_name and any(keyword in filing.company_name.lower() \n                                  for keyword in ['tech', 'software', 'computer']):\n        try:\n            company = Company(filing.cik)\n            tech_companies.append(company)\n        except:\n            continue\n\n# Remove duplicates\nunique_companies = {c.cik: c for c in tech_companies}\nprint(f\"Found {len(unique_companies)} unique tech companies\")\n</code></pre>"},{"location":"guides/finding-companies/#search-by-filing-activity","title":"Search by Filing Activity","text":"<pre><code># Find companies that filed 8-K forms recently\nrecent_8k_filings = get_filings(form=\"8-K\", limit=100)\n\nactive_companies = []\nfor filing in recent_8k_filings:\n    try:\n        company = Company(filing.cik)\n        active_companies.append({\n            'ticker': company.ticker,\n            'name': company.name,\n            'filing_date': filing.filing_date,\n            'cik': company.cik\n        })\n    except:\n        continue\n\n# Show most recently active companies\ndf = pd.DataFrame(active_companies)\nrecent_activity = df.sort_values('filing_date', ascending=False).head(10)\nprint(recent_activity)\n</code></pre>"},{"location":"guides/finding-companies/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use CIK when possible: Faster than ticker lookup</li> <li>Cache company objects: If analyzing the same companies repeatedly</li> <li>Batch processing: Handle errors gracefully in loops</li> <li>Check data availability: Not all companies have all fields populated</li> </ol>"},{"location":"guides/finding-companies/#common-issues","title":"Common Issues","text":""},{"location":"guides/finding-companies/#ticker-vs-company-name-confusion","title":"Ticker vs Company Name Confusion","text":"<pre><code># This will fail - searching for ticker in name search\nresults = find(\"AAPL\")  # Returns companies with \"AAPL\" in name, not ticker\n\n# Use Company() for ticker lookup\ncompany = Company(\"AAPL\")  # Correct for ticker lookup\n</code></pre>"},{"location":"guides/finding-companies/#international-companies","title":"International Companies","text":"<pre><code># Some foreign companies trade on US exchanges\ntry:\n    company = Company(\"ASML\")  # Dutch company on NASDAQ\n    print(f\"Found: {company.name} in {company.country}\")\nexcept:\n    print(\"Company not found or not SEC-registered\")\n</code></pre>"},{"location":"guides/finding-companies/#delisted-companies","title":"Delisted Companies","text":"<pre><code># Some companies may be delisted but still have SEC filings\ntry:\n    company = Company(\"1234567\")  # Use CIK for delisted companies\n    print(f\"Company: {company.name}\")\n    print(f\"Status: {'Active' if company.ticker else 'Possibly delisted'}\")\nexcept:\n    print(\"Company not found in SEC database\")\n</code></pre>"},{"location":"guides/finding-companies/#next-steps","title":"Next Steps","text":"<p>Now that you can find companies, learn how to:</p> <ul> <li>Search for Specific Filings - Find the documents you need</li> <li>Extract Financial Statements - Get financial data</li> <li>Filter Filings by Date/Type - Narrow down your search</li> </ul>"},{"location":"guides/finding-companies/#related-documentation","title":"Related Documentation","text":"<ul> <li>Company API Reference - Complete Company class documentation</li> <li>Working with Companies - Original company documentation</li> </ul>"},{"location":"guides/searching-filings/","title":"Search for Specific Filings","text":"<p>Learn how to find the exact SEC filings you need using various search criteria and filtering methods.</p>"},{"location":"guides/searching-filings/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understanding of SEC filing types (10-K, 10-Q, 8-K, etc.)</li> </ul>"},{"location":"guides/searching-filings/#basic-filing-search","title":"Basic Filing Search","text":""},{"location":"guides/searching-filings/#get-recent-filings","title":"Get Recent Filings","text":"<p>Start with the most recent filings across all companies:</p> <pre><code>from edgar import get_filings\n\n# Get the 50 most recent filings\nrecent_filings = get_filings()\n\n# Display basic information\nfor filing in recent_filings[:5]:\n    print(f\"{filing.form}: {filing.company_name} ({filing.filing_date})\")\n</code></pre> <p>Output:</p> <pre><code>10-Q: Apple Inc. (2024-05-02)\n8-K: Microsoft Corporation (2024-05-01)\n10-K: Amazon.com Inc (2024-04-30)\n13F-HR: Berkshire Hathaway Inc (2024-04-29)\n4: Tesla Inc (2024-04-28)\n</code></pre>"},{"location":"guides/searching-filings/#search-by-filing-type","title":"Search by Filing Type","text":"<p>Find specific types of SEC forms:</p> <pre><code># Get recent 10-K annual reports\nannual_reports = get_filings(form=\"10-K\").head(20)\n\n# Get multiple form types\nquarterly_and_annual = get_filings(form=[\"10-K\", \"10-Q\"])\n\n# Exclude amendments (filings ending in /A)\noriginal_filings = get_filings(form=\"10-K\", amendments=False).head(20)\n\nprint(f\"Found {len(annual_reports)} annual reports\")\n</code></pre>"},{"location":"guides/searching-filings/#search-by-date-range","title":"Search by Date Range","text":""},{"location":"guides/searching-filings/#specific-date","title":"Specific Date","text":"<pre><code># Get all filings from a specific date\nfilings_jan_1 = get_filings(filing_date=\"2024-01-01\")\n\nprint(f\"Found {len(filings_jan_1)} filings on 2024-01-01\")\n</code></pre>"},{"location":"guides/searching-filings/#date-ranges","title":"Date Ranges","text":"<pre><code># Get filings from a date range\nq1_filings = get_filings(filing_date=\"2024-01-01:2024-03-31\")\n\n# Get filings after a specific date\nrecent_filings = get_filings(filing_date=\"2024-01-01:\")\n\n# Get filings before a specific date\nolder_filings = get_filings(filing_date=\":2023-12-31\")\n\nprint(f\"Q1 2024 filings: {len(q1_filings)}\")\n</code></pre>"},{"location":"guides/searching-filings/#year-and-quarter-search","title":"Year and Quarter Search","text":"<pre><code># Get filings for entire year\nfilings_2023 = get_filings(2023)\n\n# Get filings for specific quarter\nq4_2023 = get_filings(2023, 4)\n\n# Get multiple quarters\nq3_q4_2023 = get_filings(2023, [3, 4])\n\n# Get multiple years\nmulti_year = get_filings([2022, 2023])\n\n# Get range of years (excludes end year)\ndecade_filings = get_filings(range(2010, 2021))\n\nprint(f\"2023 filings: {len(filings_2023)}\")\nprint(f\"Q4 2023 filings: {len(q4_2023)}\")\n</code></pre>"},{"location":"guides/searching-filings/#company-specific-filing-search","title":"Company-Specific Filing Search","text":""},{"location":"guides/searching-filings/#get-all-company-filings","title":"Get All Company Filings","text":"<pre><code>from edgar import Company\n\n# Get all filings for a company\napple = Company(\"AAPL\")\nall_apple_filings = apple.get_filings()\n\nprint(f\"Apple has {len(all_apple_filings)} total filings\")\n</code></pre>"},{"location":"guides/searching-filings/#filter-company-filings","title":"Filter Company Filings","text":"<pre><code># Get specific form types for a company\napple_10k = apple.get_filings(form=\"10-K\")\napple_quarterly = apple.get_filings(form=[\"10-Q\", \"10-K\"])\n\n# Get XBRL filings only\napple_xbrl = apple.get_filings(is_xbrl=True)\n\n# Get inline XBRL filings\napple_ixbrl = apple.get_filings(is_inline_xbrl=True)\n\nprint(f\"Apple 10-K filings: {len(apple_10k)}\")\nprint(f\"Apple XBRL filings: {len(apple_xbrl)}\")\n</code></pre>"},{"location":"guides/searching-filings/#get-latest-filing","title":"Get Latest Filing","text":"<pre><code># Get the most recent filing of a specific type\nlatest_10k = apple.get_filings(form=\"10-K\").latest()\nlatest_10q = apple.get_filings(form=\"10-Q\").latest()\n\nprint(f\"Latest 10-K: {latest_10k.filing_date}\")\nprint(f\"Latest 10-Q: {latest_10q.filing_date}\")\n\n# Chain the calls for conciseness\nlatest_annual = Company(\"MSFT\").get_filings(form=\"10-K\").latest()\n</code></pre>"},{"location":"guides/searching-filings/#advanced-filtering","title":"Advanced Filtering","text":""},{"location":"guides/searching-filings/#filter-by-multiple-criteria","title":"Filter by Multiple Criteria","text":"<pre><code># Get Apple's 10-K filings from 2023 that are XBRL\napple_filtered = apple.get_filings(\n    form=\"10-K\",\n    is_xbrl=True\n).filter(filing_date=\"2023-01-01:2023-12-31\")\n\nprint(f\"Filtered results: {len(apple_filtered)}\")\n</code></pre>"},{"location":"guides/searching-filings/#filter-by-accession-number","title":"Filter by Accession Number","text":"<pre><code># Find specific filing by accession number\nspecific_filing = apple.get_filings(\n    accession_number=\"0000320193-23-000106\"\n)\n\nprint(f\"Found filing: {specific_filing[0].form}\")\n</code></pre>"},{"location":"guides/searching-filings/#filter-by-file-number","title":"Filter by File Number","text":"<pre><code># Filter by SEC file number\nfile_filtered = apple.get_filings(\n    file_number=\"001-36743\"\n)\n\nprint(f\"Filings with file number: {len(file_filtered)}\")\n</code></pre>"},{"location":"guides/searching-filings/#cross-company-search","title":"Cross-Company Search","text":""},{"location":"guides/searching-filings/#search-by-industry","title":"Search by Industry","text":"<pre><code># Get recent filings and filter by company characteristics\nall_filings = get_filings()\n\n# Filter for technology companies (requires loading each company)\ntech_filings = []\nfor filing in all_filings[:100]:  # Limit for performance\n    try:\n        company = Company(filing.cik)\n        if \"software\" in company.industry.lower() or \"computer\" in company.industry.lower():\n            tech_filings.append(filing)\n    except:\n        continue\n\nprint(f\"Found {len(tech_filings)} filings from tech companies\")\n</code></pre>"},{"location":"guides/searching-filings/#search-by-exchange","title":"Search by Exchange","text":"<pre><code># Filter existing filings by exchange\nnasdaq_filings = all_filings.filter(exchange=\"NASDAQ\")\nnyse_filings = all_filings.filter(exchange=\"NYSE\")\n\nprint(f\"NASDAQ filings: {len(nasdaq_filings)}\")\nprint(f\"NYSE filings: {len(nyse_filings)}\")\n</code></pre>"},{"location":"guides/searching-filings/#search-by-ticker-list","title":"Search by Ticker List","text":"<pre><code># Get filings for multiple specific companies\ntickers = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\"]\nticker_filings = all_filings.filter(ticker=tickers)\n\nprint(f\"Filings from specified tickers: {len(ticker_filings)}\")\n</code></pre>"},{"location":"guides/searching-filings/#specialized-filing-searches","title":"Specialized Filing Searches","text":""},{"location":"guides/searching-filings/#insider-trading-filings","title":"Insider Trading Filings","text":"<pre><code># Get recent insider trading filings\ninsider_filings = get_filings(form=[\"3\", \"4\", \"5\"])\n\nprint(\"Recent insider filings:\")\nfor filing in insider_filings[:10]:\n    print(f\"  Form {filing.form}: {filing.company_name} ({filing.filing_date})\")\n</code></pre>"},{"location":"guides/searching-filings/#fund-holdings-13f","title":"Fund Holdings (13F)","text":"<pre><code># Get recent 13F filings (institutional investment managers)\nfund_filings = get_filings(form=\"13F-HR\")\n\nprint(\"Recent fund holdings filings:\")\nfor filing in fund_filings:\n    print(f\"  {filing.company_name}: {filing.filing_date}\")\n</code></pre>"},{"location":"guides/searching-filings/#material-events-8-k","title":"Material Events (8-K)","text":"<pre><code># Get recent 8-K filings (material corporate events)\nevent_filings = get_filings(form=\"8-K\")\n\nprint(\"Recent material events:\")\nfor filing in event_filings[:10]:\n    print(f\"  {filing.company_name}: {filing.filing_date}\")\n</code></pre>"},{"location":"guides/searching-filings/#ipo-and-registration-statements","title":"IPO and Registration Statements","text":"<pre><code># Get S-1 filings (IPO registrations)\nipo_filings = get_filings(form=\"S-1\")\n\nprint(\"Recent IPO filings:\")\nfor filing in ipo_filings:\n    print(f\"  {filing.company_name}: {filing.filing_date}\")\n</code></pre>"},{"location":"guides/searching-filings/#working-with-search-results","title":"Working with Search Results","text":""},{"location":"guides/searching-filings/#subset-and-sample","title":"Subset and Sample","text":"<pre><code>filings = get_filings(form=\"10-K\")\n\n# Get first 10 results\nfirst_ten = filings.head(10)\n\n# Get last 10 results\nlast_ten = filings.tail(10)\n\n# Get random sample of 5 results\nrandom_sample = filings.sample(5)\n\nprint(f\"Total: {len(filings)}, Sample: {len(random_sample)}\")\n</code></pre>"},{"location":"guides/searching-filings/#convert-to-pandas-dataframe","title":"Convert to Pandas DataFrame","text":"<pre><code>import pandas as pd\n\n# Convert filings to DataFrame for analysis\nfilings_df = filings.to_pandas()\n\n# Analyze filing patterns\nfiling_counts = filings_df.groupby(['form', 'company_name']).size()\nprint(\"Filing counts by company and form:\")\nprint(filing_counts.head(10))\n</code></pre>"},{"location":"guides/searching-filings/#access-underlying-data","title":"Access Underlying Data","text":"<pre><code># Access the PyArrow table directly\nimport pyarrow as pa\n\nfilings = get_filings(form=\"10-K\")\ndata_table: pa.Table = filings.data\n\n# Convert to Pandas for advanced analysis\ndf = data_table.to_pandas()\nprint(f\"Columns available: {df.columns.tolist()}\")\n</code></pre>"},{"location":"guides/searching-filings/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guides/searching-filings/#efficient-searching","title":"Efficient Searching","text":"<pre><code># More efficient: Use specific parameters in get_filings()\nefficient = get_filings(form=\"10-K\", filing_date=\"2023-01-01:\")\n\n# Less efficient: Get all then filter\ninefficient = get_filings().filter(form=\"10-K\").filter(filing_date=\"2023-01-01:\")\n\nprint(f\"Efficient approach found: {len(efficient)} filings\")\n</code></pre>"},{"location":"guides/searching-filings/#caching-results","title":"Caching Results","text":"<pre><code># Store frequently used searches\napple = Company(\"AAPL\")\napple_10k_cache = apple.get_filings(form=\"10-K\")\n\n# Reuse cached results for different analyses\nrecent_10k = apple_10k_cache.head(5)\noldest_10k = apple_10k_cache.tail(5)\n</code></pre>"},{"location":"guides/searching-filings/#error-handling","title":"Error Handling","text":""},{"location":"guides/searching-filings/#handle-missing-data","title":"Handle Missing Data","text":"<pre><code>try:\n    filings = get_filings(form=\"INVALID-FORM\")\n    print(f\"Found {len(filings)} filings\")\nexcept Exception as e:\n    print(f\"Error searching filings: {e}\")\n</code></pre>"},{"location":"guides/searching-filings/#validate-search-results","title":"Validate Search Results","text":"<pre><code>filings = get_filings(form=\"10-K\", limit=10)\n\nif len(filings) == 0:\n    print(\"No filings found matching criteria\")\nelse:\n    print(f\"Found {len(filings)} filings\")\n    # Verify first result\n    first_filing = filings[0]\n    print(f\"First result: {first_filing.form} from {first_filing.company_name}\")\n</code></pre>"},{"location":"guides/searching-filings/#common-search-patterns","title":"Common Search Patterns","text":""},{"location":"guides/searching-filings/#earnings-season-analysis","title":"Earnings Season Analysis","text":"<pre><code># Find quarterly reports filed in typical earnings periods\nearnings_dates = [\n    \"2024-01-15:2024-02-15\",  # Q4 earnings\n    \"2024-04-15:2024-05-15\",  # Q1 earnings\n    \"2024-07-15:2024-08-15\",  # Q2 earnings\n    \"2024-10-15:2024-11-15\"   # Q3 earnings\n]\n\nearnings_filings = []\nfor date_range in earnings_dates:\n    filings = get_filings(form=\"10-Q\", filing_date=date_range)\n    earnings_filings.extend(filings)\n\nprint(f\"Found {len(earnings_filings)} earnings period filings\")\n</code></pre>"},{"location":"guides/searching-filings/#ma-activity-monitoring","title":"M&amp;A Activity Monitoring","text":"<pre><code># Look for 8-K filings that might indicate M&amp;A activity\nma_filings = get_filings(form=\"8-K\")\n\n# Filter for potential M&amp;A keywords (requires examining filing content)\npotential_ma = []\nfor filing in ma_filings[:50]:  # Limit for performance\n    try:\n        text = filing.text()\n        if any(keyword in text.lower() for keyword in \n               ['acquisition', 'merger', 'tender offer', 'purchase agreement']):\n            potential_ma.append(filing)\n    except:\n        continue\n\nprint(f\"Found {len(potential_ma)} potential M&amp;A filings\")\n</code></pre>"},{"location":"guides/searching-filings/#next-steps","title":"Next Steps","text":"<p>Now that you can search for filings effectively, learn how to:</p> <ul> <li>Filter Filings by Date/Type - Advanced filtering techniques</li> <li>Access Filing Attachments - Get supporting documents</li> </ul>"},{"location":"guides/searching-filings/#related-documentation","title":"Related Documentation","text":"<ul> <li>Filing API Reference - Complete Filing class documentation</li> <li>Filings API Reference - Filings collection methods</li> <li>Working with Filings - Original filing documentation</li> </ul>"},{"location":"guides/track-form4/","title":"Tracking Insider Trading with Form 4","text":""},{"location":"guides/track-form4/#introduction","title":"Introduction","text":"<p>Form 4 filings provide valuable insights into insider trading activity. When corporate insiders (directors, officers, or beneficial owners of more than 10% of a company's stock) buy or sell shares of their company, they must report these transactions to the SEC via Form 4 filings. These filings can reveal important signals about insiders' confidence in their company's future.</p> <p>edgartools makes it easy to retrieve, parse, and analyze Form 4 filings programmatically, allowing you to track insider trading patterns without manual effort.</p>"},{"location":"guides/track-form4/#understanding-form-4-filings","title":"Understanding Form 4 Filings","text":"<p>Before diving into code, it's important to understand what Form 4 filings contain:</p> <ul> <li>Reporting Person Information: Name, relationship to the company (e.g., CEO, Director)</li> <li>Transaction Details: Date, type of security, number of shares, price per share</li> <li>Transaction Codes: Codes that indicate the nature of the transaction (e.g., P for purchase, S for sale)</li> <li>Ownership Information: Direct or indirect ownership, total shares held after transaction</li> </ul>"},{"location":"guides/track-form4/#retrieving-form-4-filings","title":"Retrieving Form 4 Filings","text":""},{"location":"guides/track-form4/#by-company","title":"By Company","text":"<p>To retrieve Form 4 filings for a specific company:</p> <pre><code>from edgar import Company, get_filings\n\n# Using Company object\ncompany = Company(\"AAPL\")\nform4_filings = company.get_filings(form=\"4\")\n\n# Or using global get_filings\nform4_filings = get_filings(form=\"4\", ticker=\"AAPL\")\n\n# View the most recent filings\nrecent_filings = form4_filings.head(5)\nfor filing in recent_filings:\n    print(f\"Date: {filing.filing_date}, Person: {filing.reporting_owner_name}\")\n</code></pre>"},{"location":"guides/track-form4/#by-date-range","title":"By Date Range","text":"<p>To find Form 4 filings within a specific date range:</p> <pre><code># Get Form 4 filings from Jan 1, 2024 to present\nform4_filings = get_filings(\n    form=\"4\",\n    ticker=\"MSFT\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-07-01\"\n)\n\nprint(f\"Found {len(form4_filings)} Form 4 filings\")\n</code></pre>"},{"location":"guides/track-form4/#by-reporting-person","title":"By Reporting Person","text":"<p>To focus on a specific insider's activity:</p> <pre><code>form4_filings = get_filings(form=\"4\", ticker=\"TSLA\")\n\n# Filter by reporting person's name\nmusk_filings = form4_filings.filter(reporting_owner_name=\"Musk Elon\")\n\nprint(f\"Found {len(musk_filings)} Form 4 filings by Elon Musk\")\n</code></pre>"},{"location":"guides/track-form4/#working-with-form-4-data-objects","title":"Working with Form 4 Data Objects","text":"<p>edgartools provides a specialized <code>Form4</code> data object that makes it easy to access structured data from these filings:</p> <pre><code># Get a specific Form 4 filing\nfiling = form4_filings.latest()\n\n# Convert to Form4 data object\nform4 = filing.obj()\n\n# Access basic metadata\nprint(f\"Filing date: {form4.filing_date}\")\nprint(f\"Reporting owner: {form4.reporting_owner_name}\")\nprint(f\"Relationship: {form4.reporting_owner_relationship}\")\nprint(f\"Company: {form4.issuer_name} ({form4.issuer_ticker})\")\n</code></pre>"},{"location":"guides/track-form4/#accessing-transaction-details","title":"Accessing Transaction Details","text":"<p>Form 4 filings can contain multiple transactions. Access them through the <code>transactions</code> property:</p> <pre><code># Examine all transactions in the filing\nfor i, transaction in enumerate(form4.transactions):\n    print(f\"\\nTransaction {i+1}:\")\n    print(f\"Date: {transaction.transaction_date}\")\n    print(f\"Type: {transaction.transaction_code} ({transaction.get_transaction_code_description()})\")\n    print(f\"Shares: {transaction.shares}\")\n    print(f\"Price: ${transaction.price_per_share:.2f}\")\n    print(f\"Value: ${transaction.value:.2f}\")\n    print(f\"Direct/Indirect: {transaction.ownership}\")\n    print(f\"Shares owned after: {transaction.shares_owned_following_transaction}\")\n</code></pre>"},{"location":"guides/track-form4/#understanding-transaction-codes","title":"Understanding Transaction Codes","text":"<p>Form 4 transactions use codes to indicate different types of transactions:</p> <pre><code># Common transaction codes and their meanings\ntransaction_codes = {\n    'P': 'Open market or private purchase of securities',\n    'S': 'Open market or private sale of securities',\n    'A': 'Grant, award, or other acquisition',\n    'D': 'Disposition to the issuer (e.g., forfeiture, cancellation)',\n    'M': 'Exercise or conversion of derivative security',\n    'G': 'Gift',\n    'V': 'Voluntary transaction with issuer'\n}\n\n# Check what type of transaction this is\nfor transaction in form4.transactions:\n    code = transaction.transaction_code\n    description = transaction_codes.get(code, \"Other transaction type\")\n    print(f\"Transaction code {code}: {description}\")\n    print(f\"Shares: {transaction.shares}\")\n</code></pre>"},{"location":"guides/track-form4/#analyzing-insider-transactions","title":"Analyzing Insider Transactions","text":""},{"location":"guides/track-form4/#calculating-net-shares-traded","title":"Calculating Net Shares Traded","text":"<p>Calculate whether an insider is buying or selling on net:</p> <pre><code># Calculate net shares traded in a filing\nnet_shares = form4.get_net_shares_traded()\nif net_shares &gt; 0:\n    print(f\"Insider BOUGHT a net {net_shares:,} shares\")\nelif net_shares &lt; 0:\n    print(f\"Insider SOLD a net {abs(net_shares):,} shares\")\nelse:\n    print(\"Insider had no net change in position\")\n</code></pre>"},{"location":"guides/track-form4/#aggregating-transactions-by-company","title":"Aggregating Transactions by Company","text":"<p>Track recent insider activity for a company:</p> <pre><code>import pandas as pd\nfrom datetime import datetime, timedelta\n\n# Get all Form 4 filings for a company in the last 90 days\nend_date = datetime.today()\nstart_date = end_date - timedelta(days=90)\n\ncompany = Company(\"NVDA\")\nrecent_form4 = company.get_filings(\n    form=\"4\",\n    start_date=start_date.strftime(\"%Y-%m-%d\"),\n    end_date=end_date.strftime(\"%Y-%m-%d\")\n)\n\n# Analyze all filings\ntransactions_data = []\nfor filing in recent_form4:\n    try:\n        form4 = filing.obj()\n        net_shares = form4.get_net_shares_traded()\n\n        transactions_data.append({\n            'date': form4.filing_date,\n            'name': form4.reporting_owner_name,\n            'relationship': form4.reporting_owner_relationship,\n            'net_shares': net_shares,\n            'transaction_type': 'BUY' if net_shares &gt; 0 else 'SELL' if net_shares &lt; 0 else 'NEUTRAL'\n        })\n    except Exception as e:\n        print(f\"Error processing filing {filing.accession_number}: {e}\")\n\n# Create a DataFrame for analysis\ndf = pd.DataFrame(transactions_data)\nif not df.empty:\n    # Summarize by person\n    person_summary = df.groupby('name').agg({\n        'net_shares': 'sum',\n        'date': 'count'\n    }).rename(columns={'date': 'num_transactions'}).sort_values('net_shares')\n\n    print(\"\\nInsider Activity by Person:\")\n    print(person_summary)\n\n    # Summarize by transaction type\n    type_counts = df['transaction_type'].value_counts()\n    print(f\"\\nTransaction Types: {dict(type_counts)}\")\n</code></pre>"},{"location":"guides/track-form4/#tracking-significant-transactions","title":"Tracking Significant Transactions","text":"<p>Identify large or otherwise noteworthy transactions:</p> <pre><code>def get_significant_transactions(company_ticker, min_value=1000000, days=180):\n    \"\"\"Find Form 4 transactions above a certain dollar value.\"\"\"\n    company = Company(company_ticker)\n    end_date = datetime.today()\n    start_date = end_date - timedelta(days=days)\n\n    form4_filings = company.get_filings(\n        form=\"4\",\n        start_date=start_date.strftime(\"%Y-%m-%d\"),\n        end_date=end_date.strftime(\"%Y-%m-%d\")\n    )\n\n    significant_transactions = []\n    for filing in form4_filings:\n        try:\n            form4 = filing.obj()\n\n            for transaction in form4.transactions:\n                if transaction.value and transaction.value &gt;= min_value:\n                    significant_transactions.append({\n                        'date': transaction.transaction_date,\n                        'filing_date': form4.filing_date,\n                        'name': form4.reporting_owner_name,\n                        'relationship': form4.reporting_owner_relationship,\n                        'shares': transaction.shares,\n                        'price': transaction.price_per_share,\n                        'value': transaction.value,\n                        'type': transaction.transaction_code,\n                        'accession': filing.accession_number\n                    })\n        except Exception as e:\n            print(f\"Error processing filing {filing.accession_number}: {e}\")\n\n    return pd.DataFrame(significant_transactions).sort_values('value', ascending=False)\n\n# Find significant transactions for a company\nsignificant_df = get_significant_transactions(\"AMZN\", min_value=5000000)\nprint(f\"\\nFound {len(significant_df)} significant transactions\")\nif not significant_df.empty:\n    print(significant_df.head())\n</code></pre>"},{"location":"guides/track-form4/#advanced-analysis-techniques","title":"Advanced Analysis Techniques","text":""},{"location":"guides/track-form4/#correlating-with-stock-price","title":"Correlating with Stock Price","text":"<p>Combine insider trading data with stock price data to identify patterns:</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport yfinance as yf  # You'll need to install this package\n\ndef analyze_insider_vs_price(ticker, days=180):\n    \"\"\"Compare insider transactions with stock price movement.\"\"\"\n    # Get stock price data\n    end_date = datetime.today()\n    start_date = end_date - timedelta(days=days)\n    stock_data = yf.download(ticker, start=start_date, end=end_date)\n\n    # Get insider transactions\n    company = Company(ticker)\n    form4_filings = company.get_filings(\n        form=\"4\",\n        start_date=start_date.strftime(\"%Y-%m-%d\"),\n        end_date=end_date.strftime(\"%Y-%m-%d\")\n    )\n\n    # Process transactions\n    insider_data = []\n    for filing in form4_filings:\n        try:\n            form4 = filing.obj()\n            net_shares = form4.get_net_shares_traded()\n\n            if net_shares != 0:  # Only include actual buys or sells\n                insider_data.append({\n                    'date': pd.to_datetime(form4.filing_date),\n                    'net_shares': net_shares,\n                    'transaction_type': 'BUY' if net_shares &gt; 0 else 'SELL'\n                })\n        except Exception as e:\n            print(f\"Error processing filing: {e}\")\n\n    insider_df = pd.DataFrame(insider_data)\n\n    # Skip plotting if we don't have both datasets\n    if insider_df.empty or stock_data.empty:\n        print(\"Insufficient data for analysis\")\n        return\n\n    # Create a plot\n    plt.figure(figsize=(12, 6))\n\n    # Plot stock price\n    plt.plot(stock_data.index, stock_data['Close'], label='Stock Price')\n\n    # Mark insider transactions\n    for _, row in insider_df.iterrows():\n        color = 'green' if row['transaction_type'] == 'BUY' else 'red'\n        marker = '^' if row['transaction_type'] == 'BUY' else 'v'\n        plt.scatter(row['date'], stock_data.loc[stock_data.index &gt;= row['date']].iloc[0]['Close'], \n                   color=color, s=100, marker=marker)\n\n    plt.title(f'{ticker} Stock Price vs Insider Transactions')\n    plt.legend(['Stock Price', 'Insider Buy', 'Insider Sell'])\n    plt.grid(True)\n    plt.savefig(f'{ticker}_insider_analysis.png')\n    plt.close()\n\n    return insider_df, stock_data\n\n# Run the analysis\nanalyze_insider_vs_price(\"MSFT\")\n</code></pre>"},{"location":"guides/track-form4/#best-practices-and-tips","title":"Best Practices and Tips","text":""},{"location":"guides/track-form4/#handling-transaction-complexities","title":"Handling Transaction Complexities","text":"<p>Form 4 filings can have complexities to watch out for:</p> <ol> <li>Multiple Transactions: A single Form 4 can contain multiple transactions</li> <li>Amended Filings: Form 4/A filings are amendments to previous filings</li> <li>Indirect Ownership: Transactions might involve indirect ownership through trusts or other entities</li> <li>Derivative Securities: Some transactions involve options, warrants, or other derivatives</li> </ol> <p>Handle these cases with careful code:</p> <pre><code>def process_form4_safely(filing):\n    try:\n        # Check if this is an amended filing\n        if filing.form_type == \"4/A\":\n            print(f\"This is an amended filing: {filing.accession_number}\")\n\n        form4 = filing.obj()\n\n        # Handle multiple transactions\n        transaction_count = len(form4.transactions)\n        if transaction_count &gt; 1:\n            print(f\"Filing has {transaction_count} transactions\")\n\n        # Check for indirect ownership\n        for transaction in form4.transactions:\n            if transaction.ownership == \"I\":  # Indirect ownership\n                print(f\"Indirect ownership transaction found: {transaction.ownership_nature}\")\n\n        # Check for derivative securities\n        if hasattr(form4, 'derivative_transactions') and form4.derivative_transactions:\n            print(f\"Filing includes {len(form4.derivative_transactions)} derivative transactions\")\n\n        return form4\n    except Exception as e:\n        print(f\"Error processing Form 4: {e}\")\n        return None\n</code></pre>"},{"location":"guides/track-form4/#performance-considerations","title":"Performance Considerations","text":"<p>When working with large volumes of Form 4 filings:</p> <ol> <li>Use Local Storage: Store filings locally to avoid repeated downloads</li> <li>Process in Batches: Process filings in manageable batches</li> <li>Filter Early: Apply filters early in your pipeline to reduce the dataset size</li> </ol> <pre><code>from edgar import enable_local_storage\n\n# Enable local storage\nenable_local_storage(\"/path/to/storage\")\n\n# Process filings in batches\nall_filings = get_filings(form=\"4\", year=2024)\nbatch_size = 100\n\nfor i in range(0, len(all_filings), batch_size):\n    batch = all_filings[i:i+batch_size]\n    print(f\"Processing batch {i//batch_size + 1} ({len(batch)} filings)\")\n\n    # Process this batch\n    for filing in batch:\n        # Your processing code here\n        pass\n</code></pre>"},{"location":"guides/track-form4/#conclusion","title":"Conclusion","text":"<p>Tracking insider trading with Form 4 filings can provide valuable insights into the sentiment of company insiders. edgartools makes it easy to retrieve, parse, and analyze these filings at scale, allowing you to incorporate insider trading data into your investment research or analysis workflows.</p> <p>By understanding the structure of Form 4 filings and leveraging edgartools' data objects, you can efficiently extract meaningful insights about insider activity without manual effort.</p> <p>Whether you're tracking transactions by company executives, monitoring significant purchases or sales, or correlating insider activity with stock price movements, edgartools provides the foundation for comprehensive insider trading analysis.</p>"},{"location":"guides/track-form4/#additional-resources","title":"Additional Resources","text":"<ul> <li>SEC Form 4 Guide</li> <li>Insider Trading Legal Framework</li> <li>Form 4 Data Objects API Reference</li> </ul>"},{"location":"guides/working-with-filing/","title":"Working with a Filing","text":"<p>A Filing represents a single SEC filing document in EdgarTools. It provides access to the filing's metadata, content, and attachments. This guide covers everything you need to know about working with Filing objects.</p>"},{"location":"guides/working-with-filing/#getting-a-filing","title":"Getting a Filing","text":"<p>There are several ways to obtain a Filing object:</p>"},{"location":"guides/working-with-filing/#from-a-filings-collection","title":"From a Filings Collection","text":"<pre><code>from edgar import get_filings\n\n# Get recent filings across all companies\nfilings = get_filings()\nfiling = filings[10]  # Get the 11th filing\n\nprint(filing)\nprint(type(filing))  # edgar._filings.Filing\n</code></pre>"},{"location":"guides/working-with-filing/#from-a-specific-company","title":"From a Specific Company","text":"<pre><code>from edgar import Company\n\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\")\nfiling = filings.latest()\n\nprint(filing)\nprint(type(filing))  # edgar.entity.filings.EntityFiling\n</code></pre>"},{"location":"guides/working-with-filing/#using-the-find-function","title":"Using the find() Function","text":"<pre><code>from edgar import find\n\n# Find by accession number\nfiling = find(\"0001641172-25-017130\")\n</code></pre>"},{"location":"guides/working-with-filing/#direct-construction","title":"Direct Construction","text":"<pre><code>from edgar import Filing\n\nfiling = Filing(\n    form='10-Q',\n    filing_date='2025-06-30',\n    company='Polomar Health Services, Inc.',\n    cik=1265521,\n    accession_no='0001641172-25-017130'\n)\n</code></pre>"},{"location":"guides/working-with-filing/#filing-types-and-properties","title":"Filing Types and Properties","text":"<p>EdgarTools has two main Filing classes with different sets of properties:</p>"},{"location":"guides/working-with-filing/#basic-filing-properties","title":"Basic Filing Properties","text":"<p>The basic <code>Filing</code> class includes these key properties:</p> Property Description <code>cik</code> Company's Central Index Key <code>company</code> Company name <code>form</code> SEC form type (e.g., \"10-K\", \"8-K\") <code>filing_date</code> Date when filing was submitted to SEC <code>report_date</code> Period end date for the report <code>accession_no</code> Unique SEC accession number"},{"location":"guides/working-with-filing/#entityfiling-properties","title":"EntityFiling Properties","text":"<p>When you get a filing from a specific company, you get an <code>EntityFiling</code> object (a subclass of <code>Filing</code>) with additional properties:</p> Property Description <code>cik</code> Company's Central Index Key <code>company</code> Company name <code>form</code> SEC form type (e.g., \"10-K\", \"8-K\") <code>filing_date</code> Date when filing was submitted to SEC <code>report_date</code> Period end date for the report <code>acceptance_datetime</code> SEC acceptance timestamp <code>accession_no</code> Unique SEC accession number <code>file_number</code> SEC file number <code>items</code> Form items (particularly relevant for 8-K filings) <code>size</code> Filing size in bytes <code>primary_document</code> Primary document filename <code>primary_doc_description</code> Description of the primary document <code>is_xbrl</code> Whether filing contains XBRL data <code>is_inline_xbrl</code> Whether filing uses inline XBRL format"},{"location":"guides/working-with-filing/#accessing-filing-content","title":"Accessing Filing Content","text":""},{"location":"guides/working-with-filing/#opening-in-browser","title":"Opening in Browser","text":"<p>Open the main document in your default browser:</p> <pre><code>filing.open()\n</code></pre>"},{"location":"guides/working-with-filing/#opening-the-filing-homepage","title":"Opening the Filing Homepage","text":"<p>View the SEC's landing page for the filing, which links to all documents and data files:</p> <pre><code>filing.open_homepage()\n</code></pre>"},{"location":"guides/working-with-filing/#viewing-in-consolenotebook","title":"Viewing in Console/Notebook","text":"<p>Preview the filing content directly in your console or Jupyter notebook:</p> <pre><code>filing.view()\n</code></pre> <p>Note: This downloads the HTML content and displays it as close to the original as possible, but may not be perfect. For an exact copy, use <code>filing.open()</code>.</p>"},{"location":"guides/working-with-filing/#getting-raw-content","title":"Getting Raw Content","text":""},{"location":"guides/working-with-filing/#html-content","title":"HTML Content","text":"<pre><code>html_content = filing.html()\n# Returns the filing's HTML content as a string\n</code></pre>"},{"location":"guides/working-with-filing/#text-content","title":"Text Content","text":"<pre><code>text_content = filing.text()\n# Returns the plain text content of the filing\n</code></pre>"},{"location":"guides/working-with-filing/#working-with-attachments","title":"Working with Attachments","text":"<p>Filings often contain multiple documents and attachments beyond the main filing document.</p>"},{"location":"guides/working-with-filing/#accessing-attachments","title":"Accessing Attachments","text":"<pre><code>attachments = filing.attachments\nprint(f\"Number of attachments: {len(attachments)}\")\n</code></pre>"},{"location":"guides/working-with-filing/#looping-through-attachments","title":"Looping Through Attachments","text":"<pre><code>for attachment in filing.attachments:\n    print(f\"Document: {attachment.document}\")\n    print(f\"Description: {attachment.description}\")\n    print(f\"Type: {attachment.type}\")\n    print(\"---\")\n</code></pre>"},{"location":"guides/working-with-filing/#getting-a-specific-attachment","title":"Getting a Specific Attachment","text":"<pre><code># Get the first attachment\nfirst_attachment = filing.attachments[0]\n\n# Get attachment by document name\nattachment = filing.attachments[\"ex-10_1.htm\"]\n</code></pre>"},{"location":"guides/working-with-filing/#viewing-attachment-content","title":"Viewing Attachment Content","text":"<pre><code># View text/HTML attachments in console\nattachment.view()\n\n# Get attachment content as string\ncontent = attachment.content()\n</code></pre>"},{"location":"guides/working-with-filing/#downloading-attachments","title":"Downloading Attachments","text":"<pre><code># Download all attachments to a specific folder\nfiling.attachments.download(\"/path/to/download/folder\")\n\n# Download a specific attachment\nattachment.download(\"/path/to/save/file.htm\")\n</code></pre>"},{"location":"guides/working-with-filing/#common-use-cases","title":"Common Use Cases","text":""},{"location":"guides/working-with-filing/#1-analyzing-recent-10-k-filings","title":"1. Analyzing Recent 10-K Filings","text":"<pre><code>from edgar import Company\n\napple = Company(\"AAPL\")\nlatest_10k = apple.get_filings(form=\"10-K\").latest()\n\nprint(f\"Filing Date: {latest_10k.filing_date}\")\nprint(f\"Report Period: {latest_10k.report_date}\")\nprint(f\"XBRL Available: {latest_10k.is_xbrl}\")\n\n# View the business section\nlatest_10k.view()\n</code></pre>"},{"location":"guides/working-with-filing/#2-processing-multiple-filings","title":"2. Processing Multiple Filings","text":"<pre><code>from edgar import get_filings\n\nrecent_filings = get_filings(form=\"8-K\", limit=50)\n\nfor filing in recent_filings:\n    if \"earnings\" in filing.text().lower():\n        print(f\"{filing.company} - {filing.filing_date}\")\n        # Process earnings-related 8-K\n</code></pre>"},{"location":"guides/working-with-filing/#3-extracting-exhibits","title":"3. Extracting Exhibits","text":"<pre><code>filing = find(\"0001065280-24-000123\")\n\n# Find all exhibits\nexhibits = [att for att in filing.attachments if att.document.startswith(\"ex-\")]\n\nfor exhibit in exhibits:\n    print(f\"Exhibit: {exhibit.document}\")\n    print(f\"Description: {exhibit.description}\")\n    # Save exhibit content\n    exhibit.download(f\"./exhibits/{exhibit.document}\")\n</code></pre>"},{"location":"guides/working-with-filing/#error-handling","title":"Error Handling","text":"<p>When working with filings, handle common exceptions:</p> <pre><code>from edgar import Filing, EdgarError\n\ntry:\n    filing = find(\"invalid-accession-number\")\nexcept EdgarError as e:\n    print(f\"Filing not found: {e}\")\n\ntry:\n    content = filing.html()\nexcept Exception as e:\n    print(f\"Error downloading content: {e}\")\n</code></pre>"},{"location":"guides/working-with-filing/#best-practices","title":"Best Practices","text":"<ol> <li>Check Filing Type: Use <code>filing.form</code> to determine the type of filing before processing</li> <li>Verify XBRL Availability: Check <code>filing.is_xbrl</code> before attempting to extract structured data</li> <li>Handle Large Files: Some filings can be very large; consider streaming or partial downloads for large attachments</li> <li>Cache Content: Store downloaded content locally to avoid repeated API calls</li> <li>Respect Rate Limits: Be mindful of SEC rate limits when processing many filings</li> </ol>"},{"location":"guides/working-with-filing/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about extracting financial statements from XBRL-enabled filings</li> <li>Explore filing attachments in more detail</li> <li>See how to filter filings to find specific types of documents</li> </ul>"},{"location":"resources/performance/","title":"Performance Optimization","text":"<p>Working with SEC data can be resource-intensive due to the volume of data, network latency, and SEC's rate limits. This guide provides strategies to optimize your edgartools workflows for better performance.</p>"},{"location":"resources/performance/#understanding-how-edgartools-fetches-data","title":"Understanding How edgartools Fetches Data","text":"<p>To optimize performance, it's important to understand how edgartools retrieves data from the SEC EDGAR system.</p>"},{"location":"resources/performance/#how-get_filings-works","title":"How <code>get_filings()</code> Works","text":"<p>The global <code>get_filings()</code> function operates as follows:</p> <ul> <li>It fetches quarterly filing indexes to cover the requested time period</li> <li>For the current year, it fetches complete data for the year to date</li> <li>For multiple years, it fetches quarterly indexes for each year</li> <li>Each quarterly index requires a separate HTTP request</li> </ul> <p>For example, requesting filings for 2024 requires 4 HTTP requests (one for each quarter), while requesting filings for 2020-2024 requires 20 HTTP requests.</p> <pre><code># This makes 4 HTTP requests (one per quarter)\nfilings_2024 = get_filings(year=2024)\n\n# This makes 20 HTTP requests (5 years \u00d7 4 quarters)\nfilings_multi_year = get_filings(start_date=\"2020-01-01\", end_date=\"2024-12-31\")\n</code></pre>"},{"location":"resources/performance/#how-companyget_filings-works","title":"How <code>company.get_filings()</code> Works","text":"<p>The <code>company.get_filings()</code> method works differently:</p> <ul> <li>It fetches the company's submission JSON file, which contains all available filings for that company</li> <li>This requires just one HTTP request, regardless of the date range</li> <li>The data is then filtered client-side based on your criteria</li> </ul> <pre><code># This makes just 1 HTTP request, regardless of date range\ncompany = Company(\"AAPL\")\ncompany_filings = company.get_filings(form=\"10-K\")\n</code></pre>"},{"location":"resources/performance/#filing-content-retrieval","title":"Filing Content Retrieval","text":"<p>Both methods above only return filing metadata (indexes). When you access the actual content of a filing, an additional HTTP request is made:</p> <pre><code># This makes an additional HTTP request when you access the filing\nfiling = filings.latest()\nfiling_text = filing.text  # HTTP request happens here\n</code></pre>"},{"location":"resources/performance/#choosing-the-right-access-pattern","title":"Choosing the Right Access Pattern","text":"<p>Based on your specific use case, choose the most efficient access pattern:</p> If your query is... Use this approach Why Focused on specific form types across companies <code>get_filings(form=\"4\")</code> Efficiently filters by form type Focused on a single company <code>company.get_filings()</code> Makes just one HTTP request Across multiple specific companies <code>get_filings().filter(cik=[\"0000320193\", \"0000789019\"])</code> Allows precise filtering Limited to a specific year <code>get_filings(year=2024)</code> Minimizes the number of index requests Focused on recent filings <code>get_filings().latest(100)</code> Gets only the most recent filings"},{"location":"resources/performance/#rate-limiting-considerations","title":"Rate Limiting Considerations","text":"<p>By default, edgartools limits requests to a maximum of 10 per second to comply with SEC EDGAR's rate limits. Exceeding these limits can result in your IP being temporarily blocked.</p> <pre><code># Default rate limit is 10 requests per second\n# You can adjust it if needed (use with caution)\nfrom edgar import set_rate_limit\n\n# Decrease rate limit for more conservative approach\nset_rate_limit(5)  # 5 requests per second\n</code></pre>"},{"location":"resources/performance/#using-local-storage-for-performance","title":"Using Local Storage for Performance","text":"<p>One of the most effective ways to improve performance is to use local storage. This allows you to:</p> <ol> <li>Cache filings locally to avoid repeated HTTP requests</li> <li>Process filings offline without network latency</li> <li>Batch download filings for later analysis</li> </ol>"},{"location":"resources/performance/#setting-up-local-storage","title":"Setting Up Local Storage","text":"<pre><code>from edgar import enable_local_storage\n\n# Enable local storage\nenable_local_storage(\"/path/to/storage\")\n\n# Now filings will be stored locally\ncompany = Company(\"MSFT\")\nfilings = company.get_filings(form=\"10-K\")\nfiling = filings.latest()\n\n# This will use the local copy if available, or download and cache it if not\ntext = filing.text\n</code></pre>"},{"location":"resources/performance/#batch-downloading-filings","title":"Batch Downloading Filings","text":"<p>For large-scale analysis, batch download filings first, then process them offline:</p> <pre><code>from edgar import download_filings\n\n# Get filing metadata\ncompanies = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\nall_filings = []\n\nfor ticker in companies:\n    company = Company(ticker)\n    filings = company.get_filings(form=\"10-K\").head(5)  # Last 5 10-Ks\n    all_filings.extend(filings)\n\n# Batch download all filings (this makes HTTP requests efficiently)\ndownload_filings(all_filings, \"/path/to/storage\")\n\n# Now process them offline (no HTTP requests)\nfor filing in all_filings:\n    # Process filing without network latency\n    text = filing.text  # Uses local copy\n</code></pre>"},{"location":"resources/performance/#memory-optimization","title":"Memory Optimization","text":"<p>When working with many filings or large filings, memory usage can become a concern.</p>"},{"location":"resources/performance/#processing-large-datasets","title":"Processing Large Datasets","text":"<p>For large datasets, use generators and process filings one at a time:</p> <pre><code>def process_filings_generator(filings):\n    for filing in filings:\n        # Process one filing at a time\n        result = process_filing(filing)\n        yield result\n        # Free memory\n        del filing\n\n# Process filings one at a time\nfor result in process_filings_generator(all_filings):\n    save_or_analyze(result)\n</code></pre>"},{"location":"resources/performance/#working-with-large-filings","title":"Working with Large Filings","text":"<p>For large filings (like 10-Ks), process sections individually:</p> <pre><code>filing = company.get_latest_filing(\"10-K\").obj()\n\n# Process one section at a time\nsections = [\"business\", \"risk_factors\", \"management_discussion\"]\nfor section_name in sections:\n    if hasattr(filing, section_name):\n        section = getattr(filing, section_name)\n        # Process section\n        process_section(section_name, section)\n        # Free memory\n        del section\n</code></pre>"},{"location":"resources/performance/#parallel-processing","title":"Parallel Processing","text":"<p>For computationally intensive tasks, consider parallel processing:</p> <pre><code>from concurrent.futures import ThreadPoolExecutor\nimport time\n\ndef process_filing_with_delay(filing):\n    # Add delay to respect rate limits\n    time.sleep(0.1)\n    # Process filing\n    return {\"accession\": filing.accession_number, \"text_length\": len(filing.text)}\n\n# Process filings in parallel with a thread pool\nwith ThreadPoolExecutor(max_workers=5) as executor:\n    results = list(executor.map(process_filing_with_delay, all_filings))\n</code></pre>"},{"location":"resources/performance/#caching-strategies","title":"Caching Strategies","text":"<p>Implement caching for expensive operations:</p> <pre><code>import functools\n\n@functools.lru_cache(maxsize=128)\ndef get_filing_sentiment(filing_accession):\n    # Expensive operation to calculate sentiment\n    filing = get_filing_by_accession(filing_accession)\n    text = filing.text\n    # Calculate sentiment (expensive operation)\n    return calculate_sentiment(text)\n\n# This will be cached after the first call\nsentiment = get_filing_sentiment(\"0000320193-20-000096\")\n</code></pre>"},{"location":"resources/performance/#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Here are some typical performance benchmarks to help you plan your workflows:</p> Operation Typical Time Notes <code>get_filings(year=2024)</code> 2-5 seconds Fetches 4 quarterly indexes <code>company.get_filings()</code> 1-2 seconds Single HTTP request Downloading a 10-K filing 1-3 seconds Depends on filing size Parsing a 10-K as Data Object 2-5 seconds First-time parsing Accessing a locally stored filing &lt; 0.1 seconds From disk cache Processing 100 filings sequentially 3-10 minutes With rate limiting Processing 100 filings in parallel 1-3 minutes With proper rate limiting"},{"location":"resources/performance/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Choose the right access pattern based on your specific use case</li> <li>Use <code>company.get_filings()</code> when focusing on a single company</li> <li>Enable local storage to avoid repeated HTTP requests</li> <li>Batch download filings before processing them</li> <li>Process filings one at a time for large datasets</li> <li>Respect SEC rate limits to avoid being blocked</li> <li>Implement caching for expensive operations</li> <li>Use parallel processing carefully with appropriate delays</li> <li>Filter filings early in your pipeline to reduce the number of filings to process</li> <li>Monitor memory usage when working with large filings or datasets</li> </ol> <p>By following these guidelines, you can significantly improve the performance of your edgartools workflows while respecting SEC EDGAR's rate limits and your system's resources.</p>"},{"location":"resources/performance/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"resources/performance/#custom-indexing","title":"Custom Indexing","text":"<p>For repeated analysis of the same dataset, consider creating your own indexes:</p> <pre><code>import pandas as pd\n\n# Create a custom index of filings\nfilings = get_filings(form=[\"10-K\", \"10-Q\"], year=2024)\nindex_data = []\n\nfor filing in filings:\n    index_data.append({\n        \"accession\": filing.accession_number,\n        \"cik\": filing.cik,\n        \"company\": filing.company_name,\n        \"form\": filing.form_type,\n        \"date\": filing.filing_date,\n        \"path\": filing.get_local_path() if filing.is_local() else None\n    })\n\n# Save as CSV for quick loading\nindex_df = pd.DataFrame(index_data)\nindex_df.to_csv(\"filings_index_2024.csv\", index=False)\n\n# Later, load the index instead of fetching again\nloaded_index = pd.read_csv(\"filings_index_2024.csv\")\n</code></pre>"},{"location":"resources/performance/#incremental-updates","title":"Incremental Updates","text":"<p>For ongoing analysis, implement incremental updates:</p> <pre><code>import datetime\n\n# Get the date of your last update\nlast_update = datetime.date(2024, 6, 1)\ntoday = datetime.date.today()\n\n# Only fetch filings since your last update\nnew_filings = get_filings(start_date=last_update, end_date=today)\n\n# Process only the new filings\nfor filing in new_filings:\n    process_filing(filing)\n\n# Update your last update date\nlast_update = today\n</code></pre> <p>By implementing these performance optimization strategies, you can make your edgartools workflows more efficient, faster, and more resilient.</p>"},{"location":"resources/sec-compliance/","title":"SEC Rate Limits &amp; Compliance","text":"<p>The SEC EDGAR system is a valuable public resource that provides access to corporate filings. To ensure fair access for all users, the SEC has established guidelines and rate limits for automated access. This guide explains these requirements and how to use edgartools in a compliant manner.</p>"},{"location":"resources/sec-compliance/#sec-edgar-access-requirements","title":"SEC EDGAR Access Requirements","text":""},{"location":"resources/sec-compliance/#fair-access-policy","title":"Fair Access Policy","text":"<p>The SEC maintains a Fair Access Policy that requires all automated EDGAR access to:</p> <ol> <li>Identify the accessing user/organization in the HTTP request</li> <li>Limit request rates to avoid overloading the system</li> <li>Respect the <code>robots.txt</code> directives</li> <li>Access data during appropriate hours</li> </ol>"},{"location":"resources/sec-compliance/#required-identity-information","title":"Required Identity Information","text":"<p>When using automated tools to access EDGAR, you must identify yourself by providing:</p> <ul> <li>Your name or organization name</li> <li>Your email address</li> </ul> <p>This allows the SEC to contact you if there are issues with your access patterns.</p>"},{"location":"resources/sec-compliance/#setting-your-identity-in-edgartools","title":"Setting Your Identity in edgartools","text":"<p>edgartools makes it easy to comply with SEC requirements by providing a simple way to set your identity:</p> <pre><code>from edgar import set_identity\n\n# Set your identity information\nset_identity(\n    name=\"Your Name\",\n    email=\"your.email@example.com\",\n    organization=\"Your Organization\"  # Optional\n)\n</code></pre> <p>This identity information will be included in the <code>User-Agent</code> header of all requests made by edgartools.</p>"},{"location":"resources/sec-compliance/#default-behavior","title":"Default Behavior","text":"<p>If you don't explicitly set your identity, edgartools will:</p> <ol> <li>Look for environment variables <code>EDGAR_NAME</code> and <code>EDGAR_EMAIL</code></li> <li>If not found, use a generic identity that indicates edgartools usage</li> </ol> <p>However, it's strongly recommended to set your own identity to ensure compliance with SEC requirements.</p>"},{"location":"resources/sec-compliance/#understanding-sec-rate-limits","title":"Understanding SEC Rate Limits","text":"<p>The SEC doesn't publish specific rate limits, but based on their guidelines and observed behavior, the following limits are recommended:</p> <ul> <li>No more than 10 requests per second</li> <li>Reasonable total volume per day</li> <li>Avoid excessive concurrent requests</li> </ul>"},{"location":"resources/sec-compliance/#edgartools-default-rate-limiting","title":"edgartools Default Rate Limiting","text":"<p>By default, edgartools implements conservative rate limiting:</p> <ul> <li>Maximum of 10 requests per second</li> <li>Built-in delays between requests</li> <li>Automatic retries with exponential backoff for 429 errors</li> </ul> <p>This default configuration is designed to keep you compliant with SEC guidelines while still providing good performance.</p>"},{"location":"resources/sec-compliance/#customizing-rate-limits","title":"Customizing Rate Limits","text":"<p>You can adjust the rate limits in edgartools if needed:</p> <pre><code>from edgar import set_rate_limit\n\n# Set a more conservative rate limit (requests per second)\nset_rate_limit(5)  # 5 requests per second\n</code></pre> <p>For high-volume or production use cases, consider being more conservative with your rate limits to avoid potential IP blocks.</p>"},{"location":"resources/sec-compliance/#signs-of-exceeding-rate-limits","title":"Signs of Exceeding Rate Limits","text":"<p>If you exceed SEC rate limits, you may experience:</p> <ol> <li>HTTP 429 (Too Many Requests) responses</li> <li>HTTP 403 (Forbidden) responses</li> <li>Temporary IP blocks (typically 10 minutes to 24 hours)</li> </ol> <p>edgartools will automatically handle 429 responses with retries, but persistent rate limit violations may result in longer blocks.</p>"},{"location":"resources/sec-compliance/#best-practices-for-compliant-access","title":"Best Practices for Compliant Access","text":""},{"location":"resources/sec-compliance/#1-always-set-your-identity","title":"1. Always Set Your Identity","text":"<pre><code>from edgar import set_identity\n\nset_identity(\n    name=\"Your Name\",\n    email=\"your.email@example.com\"\n)\n</code></pre>"},{"location":"resources/sec-compliance/#2-use-local-storage","title":"2. Use Local Storage","text":"<p>Reduce the number of requests by storing filings locally:</p> <pre><code>from edgar import enable_local_storage\n\nenable_local_storage(\"/path/to/storage\")\n</code></pre>"},{"location":"resources/sec-compliance/#3-implement-appropriate-delays","title":"3. Implement Appropriate Delays","text":"<p>For batch processing, add delays between operations:</p> <pre><code>import time\n\nfor filing in filings:\n    # Process filing\n    process_filing(filing)\n    # Add delay between filings\n    time.sleep(0.2)  # 200ms delay\n</code></pre>"},{"location":"resources/sec-compliance/#4-use-efficient-query-patterns","title":"4. Use Efficient Query Patterns","text":"<p>Choose the most efficient access pattern for your needs:</p> <pre><code># For company-specific queries, use company.get_filings()\n# (makes just one request for all filings)\ncompany = Company(\"AAPL\")\nfilings = company.get_filings(form=\"10-K\")\n\n# For form-specific queries across companies, use get_filings()\n# (makes requests for quarterly indexes)\nform4_filings = get_filings(form=\"4\", year=2024)\n</code></pre>"},{"location":"resources/sec-compliance/#5-implement-exponential-backoff","title":"5. Implement Exponential Backoff","text":"<p>For custom requests outside of edgartools:</p> <pre><code>import time\nimport random\n\ndef request_with_backoff(url, max_retries=5):\n    retries = 0\n    while retries &lt; max_retries:\n        try:\n            # Make request\n            response = make_request(url)\n            return response\n        except Exception as e:\n            if \"429\" in str(e) or \"403\" in str(e):\n                # Calculate backoff time\n                wait_time = (2 ** retries) + random.random()\n                print(f\"Rate limited. Waiting {wait_time:.1f} seconds...\")\n                time.sleep(wait_time)\n                retries += 1\n            else:\n                raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre>"},{"location":"resources/sec-compliance/#handling-rate-limit-errors","title":"Handling Rate Limit Errors","text":"<p>If you encounter rate limit errors despite following best practices:</p> <ol> <li>Reduce your request rate by setting a lower rate limit</li> <li>Increase delays between requests</li> <li>Implement circuit breakers to pause requests when errors occur</li> <li>Spread requests across a longer time period</li> <li>Use a different network if your IP has been temporarily blocked</li> </ol>"},{"location":"resources/sec-compliance/#sec-access-hours","title":"SEC Access Hours","text":"<p>While the SEC EDGAR system is available 24/7, it's good practice to avoid peak hours:</p> <ul> <li>Peak hours: 9:30 AM - 4:00 PM Eastern Time (market hours)</li> <li>Maintenance: Occasionally on weekends</li> </ul> <p>For large batch operations, consider running them during off-peak hours.</p>"},{"location":"resources/sec-compliance/#additional-compliance-considerations","title":"Additional Compliance Considerations","text":""},{"location":"resources/sec-compliance/#terms-of-service","title":"Terms of Service","text":"<p>The SEC provides EDGAR data as a public service. When using this data:</p> <ul> <li>Don't misrepresent the data or its source</li> <li>Don't claim affiliation with the SEC</li> <li>Provide proper attribution when republishing data</li> </ul>"},{"location":"resources/sec-compliance/#privacy-considerations","title":"Privacy Considerations","text":"<p>Some SEC filings contain personal information. Be mindful of privacy concerns when:</p> <ul> <li>Storing filings locally</li> <li>Processing personal information in filings</li> <li>Republishing or sharing filing data</li> </ul>"},{"location":"resources/sec-compliance/#monitoring-your-usage","title":"Monitoring Your Usage","text":"<p>To monitor your usage and ensure compliance:</p> <pre><code>from edgar import get_request_stats\n\n# Get statistics about your requests\nstats = get_request_stats()\nprint(f\"Requests made: {stats['total_requests']}\")\nprint(f\"Average rate: {stats['average_rate_per_second']:.2f} requests/second\")\nprint(f\"Rate limit errors: {stats['rate_limit_errors']}\")\n</code></pre>"},{"location":"resources/sec-compliance/#conclusion","title":"Conclusion","text":"<p>Complying with SEC EDGAR access requirements is straightforward with edgartools. By setting your identity, respecting rate limits, and following best practices, you can ensure reliable and compliant access to SEC filing data.</p> <p>Remember that the SEC provides this valuable data as a public service. Responsible usage helps ensure that EDGAR remains accessible to everyone.</p>"},{"location":"resources/sec-compliance/#additional-resources","title":"Additional Resources","text":"<ul> <li>SEC EDGAR Fair Access Policy</li> <li>SEC Developer Resources</li> <li>SEC EDGAR Robots.txt</li> </ul>"},{"location":"resources/troubleshooting/","title":"Common Issues &amp; Solutions","text":"<p>This guide addresses the most common issues users encounter when working with edgartools and provides practical solutions.</p>"},{"location":"resources/troubleshooting/#connection-and-access-issues","title":"Connection and Access Issues","text":""},{"location":"resources/troubleshooting/#sec-edgar-access-denied","title":"SEC EDGAR Access Denied","text":"<p>Symptom: Receiving <code>403 Forbidden</code> errors when accessing SEC EDGAR.</p> <p>Causes: - Missing or incorrect identity information - Exceeding SEC rate limits - IP address blocked by SEC</p> <p>Solutions:</p> <ol> <li>Set proper identity information:</li> </ol> <p>Use <code>set_identity</code> to provide your identity as required by the SEC. This requires your name and email, or just your email.</p> <pre><code>from edgar import set_identity\n\nset_identity(\"Mike McCalum mcallum@gmail.com\")\n\n</code></pre> <ol> <li>Implement rate limiting:</li> </ol> <pre><code>import time\n\n# Add delay between requests\nfor filing in filings:\n    # Process filing\n    time.sleep(0.1)  # 100ms delay\n</code></pre> <ol> <li>Use a different network if your IP has been temporarily blocked.</li> </ol>"},{"location":"resources/troubleshooting/#timeout-errors","title":"Timeout Errors","text":"<p>Symptom: Requests to SEC EDGAR time out.</p> <p>Solutions:</p> <ul> <li>Try again during off-peak hours (SEC EDGAR can be slow during market hours)</li> </ul>"},{"location":"resources/troubleshooting/#data-retrieval-issues","title":"Data Retrieval Issues","text":""},{"location":"resources/troubleshooting/#filing-not-found","title":"Filing Not Found","text":"<p>Symptom: <code>FilingNotFoundError</code> when trying to access a specific filing.</p> <p>Solutions:</p> <ol> <li>Verify the filing exists:</li> </ol> <pre><code># Check if the filing exists first\nfilings = company.get_filings(form=\"10-K\")\nif filings:\n    filing = filings.latest()\nelse:\n    print(\"No 10-K filings found\")\n</code></pre> <ol> <li>Check for alternative form types:</li> </ol> <pre><code> # Some companies use variant form types\nfilings = company.get_filings(form=[\"10-K\", \"10-K/A\", \"10KSB\"])\n</code></pre> <ol> <li>Expand your date range:</li> </ol> <pre><code>filings = company.get_filings(\n       form=\"10-K\",\n       start_date=\"2010-01-01\",  # Try a wider date range\n       end_date=\"2023-12-31\"\n   )\n</code></pre>"},{"location":"resources/troubleshooting/#company-not-found","title":"Company Not Found","text":"<p>Symptom: <code>CompanyNotFoundError</code> when trying to access a company.</p> <p>Solutions:</p> <ol> <li>Check ticker symbol or CIK:</li> </ol> <pre><code># Try using CIK instead of ticker\ncompany = Company(\"0000320193\")  # Apple Inc. CIK\n\n# Or search for the company\nfrom edgar import search_companies\nresults = search_companies(\"Apple\")\nfor r in results:\n    print(f\"{r.name} - {r.ticker} - {r.cik}\")\n</code></pre> <ol> <li>For delisted companies, try using the CIK number directly.</li> </ol>"},{"location":"resources/troubleshooting/#missing-financial-data","title":"Missing Financial Data","text":"<p>Symptom: Financial statements are empty or missing expected values.</p> <p>Solutions:</p> <ol> <li>Check if the filing has XBRL data:</li> </ol> <pre><code>filing = company.get_latest_filing(\"10-K\")\nif filing.has_xbrl():\n    financials = filing.get_financials()\nelse:\n    print(\"Filing does not contain XBRL data\")\n</code></pre> <ol> <li>Try different concept names:</li> </ol> <pre><code># Try alternative concept names\ntry:\n    revenue = income_stmt.get_value(\"Revenues\")\nexcept:\n    try:\n        revenue = income_stmt.get_value(\"RevenueFromContractWithCustomerExcludingAssessedTax\")\n    except:\n        revenue = income_stmt.get_value(\"SalesRevenueNet\")\n</code></pre> <ol> <li>For older filings (pre-2009), XBRL data may not be available.</li> </ol>"},{"location":"resources/troubleshooting/#parsing-issues","title":"Parsing Issues","text":""},{"location":"resources/troubleshooting/#html-parsing-errors","title":"HTML Parsing Errors","text":"<p>Symptom: Errors when trying to extract sections from filings.</p> <p>Solutions:</p> <ol> <li>Access raw text instead:</li> </ol> <pre><code>   # Fall back to raw text\n   filing_text = filing.text\n</code></pre> <ol> <li>Try a different filing:</li> </ol> <pre><code># Try the previous filing\nfilings = company.get_filings(form=\"10-K\")\nif len(filings) &gt; 1:\n    previous_filing = filings[1]\n</code></pre>"},{"location":"resources/troubleshooting/#xbrl-parsing-errors","title":"XBRL Parsing Errors","text":"<p>Symptom: Errors when trying to access XBRL data.</p> <p>Solutions:</p> <ol> <li>Check if the filing has valid XBRL:</li> </ol> <pre><code>if filing.has_xbrl():\n    try:\n        xbrl = filing.get_xbrl()\n        print(\"XBRL version:\", xbrl.version)\n    except Exception as e:\n        print(f\"XBRL parsing error: {e}\")\n</code></pre>"},{"location":"resources/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"resources/troubleshooting/#slow-data-retrieval","title":"Slow Data Retrieval","text":"<p>Symptom: Operations take a long time to complete.</p> <p>Solutions:</p> <ol> <li>Use local storage:</li> </ol> <pre><code>from edgar import use_local_storage\n\n# Store filings locally\nuse_local_storage()\n</code></pre> <ol> <li>Limit the number of filings:</li> </ol> <pre><code># Only get the 5 most recent filings\nfilings = company.get_filings(form=\"10-K\").head(5)\n</code></pre> <ol> <li>Use batch processing for large datasets.</li> </ol>"},{"location":"resources/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Symptom: Program crashes with memory errors when processing many filings.</p> <p>Solutions:</p> <ol> <li>Process filings one at a time:</li> </ol> <pre><code>for filing in filings:\n    # Process each filing\n    result = process_filing(filing)\n    # Save result and free memory\n    save_result(result)\n    del result\n</code></pre> <ol> <li>Use generators instead of lists:</li> </ol> <pre><code>def process_filings_generator(filings):\n    for filing in filings:\n        yield process_filing(filing)\n\n# Process one filing at a time\nfor result in process_filings_generator(filings):\n    save_result(result)\n</code></pre>"},{"location":"resources/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"resources/troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Symptom: Errors related to dependencies when installing or using edgartools.</p> <p>Solutions:</p> <ol> <li>Use a virtual environment:</li> </ol> <pre><code># Create a new virtual environment\npython -m venv edgar_env\n\n# Activate it\nsource edgar_env/bin/activate  # On Windows: edgar_env\\Scripts\\activate\n\n# Install edgartools\npip install edgartools\n</code></pre> <ol> <li>Update dependencies:</li> </ol> <pre><code>pip install --upgrade edgartools\n</code></pre>"},{"location":"resources/troubleshooting/#import-errors","title":"Import Errors","text":"<p>Symptom: <code>ImportError</code> or <code>ModuleNotFoundError</code> when importing edgartools.</p> <p>Solutions:</p> <ol> <li>Verify installation:</li> </ol> <pre><code>pip show edgartools\n</code></pre> <ol> <li>Reinstall the package:</li> </ol> <pre><code>pip uninstall -y edgartools\npip install edgartools\n</code></pre> <ol> <li>Access the raw filing content:</li> </ol> <pre><code># Access the raw content instead\nhtml = filing.html\ntext = filing.text\n</code></pre>"},{"location":"resources/troubleshooting/#sec-rate-limiting","title":"SEC Rate Limiting","text":""},{"location":"resources/troubleshooting/#too-many-requests","title":"Too Many Requests","text":"<ol> <li>Spread requests over time:</li> </ol> <pre><code>companies = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\nresults = {}\n\nfor ticker in companies:\n    company = Company(ticker)\n    results[ticker] = company.get_latest_filing(\"10-K\")\n    time.sleep(1)  # Wait 1 second between companies\n</code></pre>"},{"location":"resources/troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"resources/troubleshooting/#enable-logging","title":"Enable Logging","text":"<p>Turn on logging to get more information about what's happening:</p> <pre><code>import logging\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\n# For even more detailed logs\nlogging.getLogger('edgar').setLevel(logging.DEBUG)\n</code></pre>"},{"location":"resources/troubleshooting/#check-sec-edgar-status","title":"Check SEC EDGAR Status","text":"<p>The SEC EDGAR system occasionally experiences downtime or performance issues:</p> <ol> <li>Visit the SEC EDGAR Status page to check for any announced issues.</li> </ol>"},{"location":"resources/troubleshooting/#verify-your-data","title":"Verify Your Data","text":"<p>Always verify the data you're working with:</p> <pre><code># Print filing metadata to verify\nprint(f\"Filing: {filing.accession_number}\")\nprint(f\"Form Type: {filing.form_type}\")\nprint(f\"Filing Date: {filing.filing_date}\")\nprint(f\"Has XBRL: {filing.has_xbrl()}\")\n\n# Check financial statement structure\nfinancials = filing.get_financials()\nprint(f\"Available statements: {financials.available_statements()}\")\nprint(f\"Available periods: {financials.get_periods()}\")\n</code></pre>"},{"location":"resources/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li> <p>Check the documentation: Make sure you're using the API correctly.</p> </li> <li> <p>Search GitHub Issues: Your issue may have been reported and solved already.</p> </li> <li> <p>Ask the community: Post your question on Stack Overflow with the <code>edgartools</code> tag.</p> </li> <li> <p>Report a bug: If you believe you've found a bug, report it on the GitHub repository with a minimal reproducible example.</p> </li> </ol>"},{"location":"resources/troubleshooting/#common-error-messages-and-their-meanings","title":"Common Error Messages and Their Meanings","text":"Error Message Likely Cause Solution <code>CompanyNotFoundError</code> Invalid ticker or CIK Verify the ticker or try using CIK <code>FilingNotFoundError</code> Filing doesn't exist or is not accessible Check form type and date range <code>XBRLNotFoundError</code> Filing doesn't contain XBRL data Try a different filing or use text extraction <code>ParsingError</code> Issue parsing the filing content Try accessing raw content instead <code>HTTPError 403</code> SEC has blocked your requests Set proper identity and respect rate limits <code>HTTPError 429</code> Too many requests in a short time Implement rate limiting and backoff <code>ConnectionError</code> Network issues Check your internet connection <code>UnsupportedFilingTypeError</code> Data Object not available for this filing type Use generic access methods <p>Remember that SEC filings can vary significantly in structure and content, especially across different years and companies. Always implement robust error handling in your code to deal with these variations.</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/","title":"Cross-Company Standardization Analysis: NVIDIA vs Apple 10-K Filings","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#executive-summary","title":"Executive Summary","text":"<p>This analysis compares attachment and XBRL statement naming patterns between NVIDIA and Apple 10-K filings to identify standardization opportunities and develop a common framework. While both companies follow SEC XBRL requirements, there are significant differences in naming conventions, statement organization, and disclosure granularity that present both challenges and opportunities for creating standardized access patterns.</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/#company-comparison-overview","title":"Company Comparison Overview","text":"Metric NVIDIA (2023) Apple (2024) Standardization Opportunity Total Attachments 115 106 Similar scale, common framework viable Core Financial Statements 6 5 Standard GAAP statements, high standardization potential R-file HTML Renderings R1-R89 (89 files) R1-R73 (73 files) Common R-file pattern, different granularity XBRL Statement Count 88+ 74+ Similar structure, different detail levels Exhibit Pattern EX-4.6 to EX-32.2 EX-4.1 to EX-97.1 Standard SEC exhibit numbers"},{"location":"xbrl-development/cross-company-standardization-analysis/#naming-pattern-analysis","title":"Naming Pattern Analysis","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#1-core-financial-statements-high-standardization-potential","title":"1. Core Financial Statements - HIGH STANDARDIZATION POTENTIAL","text":"Statement Type NVIDIA Apple Standard Name Proposal Income Statement CONSOLIDATEDSTATEMENTSOFINCOME CONSOLIDATEDSTATEMENTSOFOPERATIONS <code>ConsolidatedIncomeStatement</code> Balance Sheet CONSOLIDATEDBALANCESHEETS CONSOLIDATEDBALANCESHEETS <code>ConsolidatedBalanceSheet</code> \u2713 Cash Flow CONSOLIDATEDSTATEMENTSOFCASHFLOWS CONSOLIDATEDSTATEMENTSOFCASHFLOWS <code>ConsolidatedCashFlowStatement</code> \u2713 Comprehensive Income CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME <code>ConsolidatedComprehensiveIncomeStatement</code> \u2713 Equity Statement CONSOLIDATEDSTATEMENTSOFSHAREHOLDERSEQUITY CONSOLIDATEDSTATEMENTSOFSHAREHOLDERSEQUITY <code>ConsolidatedShareholdersEquityStatement</code> \u2713 <p>Findings: 80% naming consistency across core statements. Only income statement varies (INCOME vs OPERATIONS).</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/#2-r-file-html-attachment-patterns-medium-standardization-potential","title":"2. R-File HTML Attachment Patterns - MEDIUM STANDARDIZATION POTENTIAL","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#core-statement-r-files-perfect-match","title":"Core Statement R-Files (Perfect Match)","text":"R-File NVIDIA Description Apple Description Standardizable R1.htm Cover Page Cover Page \u2713 Perfect Match R2.htm Audit Information Auditor Information \u2713 Close Match R3.htm CONSOLIDATED STATEMENTS OF INCOME CONSOLIDATED STATEMENTS OF OPERATIONS \u2713 Core Statement R4.htm CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME CONSOLIDATED STATEMENTS OF COMPREHENSIVE INCOME \u2713 Perfect Match R5.htm CONSOLIDATED BALANCE SHEETS CONSOLIDATED BALANCE SHEETS \u2713 Perfect Match R6.htm CONSOLIDATED BALANCE SHEETS (Parenthetical) CONSOLIDATED BALANCE SHEETS (Parenthetical) \u2713 Perfect Match R7.htm CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY \u2713 Perfect Match R8.htm CONSOLIDATED STATEMENTS OF SHAREHOLDERS' EQUITY (Parenthetical) CONSOLIDATED STATEMENTS OF CASH FLOWS \u274c Different Content R9.htm CONSOLIDATED STATEMENTS OF CASH FLOWS Summary of Significant Accounting Policies \u274c Different Content <p>Key Finding: R1-R7 show high consistency, but R8+ diverge significantly between companies.</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/#3-business-section-organization-differences","title":"3. Business Section Organization Differences","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#nvidia-approach-detailed-granularity","title":"NVIDIA Approach: Detailed Granularity","text":"<ul> <li>Business Combination: 6 detailed sections (R11, R29, R43-R47)</li> <li>Stock Compensation: 4 sections (R13, R31, R51-R54)  </li> <li>Leases: 3 sections (R12, R30, R48-R50)</li> <li>Segment Information: 7 sections (R26, R41, R84-R88)</li> </ul>"},{"location":"xbrl-development/cross-company-standardization-analysis/#apple-approach-streamlined-organization","title":"Apple Approach: Streamlined Organization","text":"<ul> <li>Revenue: 4 sections (R10, R26, R38-R40)</li> <li>Share-Based Compensation: 4 sections (R19, R35, R66-R68)</li> <li>Leases: 4 sections (R16, R32, R57-R59)</li> <li>Segment Information: 6 sections (R21, R37, R70-R73)</li> </ul>"},{"location":"xbrl-development/cross-company-standardization-analysis/#4-company-specific-disclosure-patterns","title":"4. Company-Specific Disclosure Patterns","text":"Disclosure Area NVIDIA Unique Apple Unique Standardization Challenge Business Combinations Mellanox acquisition details Not applicable Company-specific events Revenue Recognition Basic disclosure Detailed product/service breakdown Business model differences Geographic Segments Market-based segmentation Country-based segmentation Different segment strategies Executive Compensation Standard disclosure Pay vs Performance + Insider Trading Apple has enhanced disclosures"},{"location":"xbrl-development/cross-company-standardization-analysis/#framework-standardization-opportunities","title":"Framework Standardization Opportunities","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#1-universal-r-file-mapping-high-confidence","title":"1. Universal R-File Mapping (HIGH CONFIDENCE)","text":"<pre><code># Proposed Standard R-File Framework\nSTANDARD_R_FILES = {\n    'R1.htm': 'cover_page',\n    'R2.htm': 'auditor_information', \n    'R3.htm': 'income_statement',\n    'R4.htm': 'comprehensive_income_statement',\n    'R5.htm': 'balance_sheet',\n    'R6.htm': 'balance_sheet_parenthetical',\n    'R7.htm': 'shareholders_equity_statement',\n    'R8.htm': 'cash_flow_statement',  # Apple pattern\n    'R9.htm': 'accounting_policies'   # Apple pattern\n}\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#2-business-section-pattern-recognition-medium-confidence","title":"2. Business Section Pattern Recognition (MEDIUM CONFIDENCE)","text":"<pre><code># Standardizable Business Sections\nSTANDARD_BUSINESS_SECTIONS = {\n    'leases': {\n        'main': r'R\\d+\\.htm.*Leases(?!\\s*\\()',\n        'tables': r'R\\d+\\.htm.*Leases.*\\(Tables\\)',\n        'details': r'R\\d+\\.htm.*Leases.*Details',\n        'schedules': r'R\\d+\\.htm.*Lease.*Schedule'\n    },\n    'stock_compensation': {\n        'main': r'R\\d+\\.htm.*(Stock-Based|Share-Based)\\s*Compensation(?!\\s*\\()',\n        'tables': r'R\\d+\\.htm.*(Stock-Based|Share-Based).*\\(Tables\\)',\n        'details': r'R\\d+\\.htm.*(Stock-Based|Share-Based).*Details'\n    },\n    'segment_information': {\n        'main': r'R\\d+\\.htm.*Segment\\s*Information(?!\\s*\\()',\n        'tables': r'R\\d+\\.htm.*Segment.*\\(Tables\\)',\n        'geographic': r'R\\d+\\.htm.*Geographic',\n        'reconciliation': r'R\\d+\\.htm.*Reconcil'\n    }\n}\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#3-xbrl-statement-standardization-high-confidence","title":"3. XBRL Statement Standardization (HIGH CONFIDENCE)","text":"<pre><code># Core XBRL Statements - Universal\nUNIVERSAL_XBRL_STATEMENTS = {\n    'balance_sheet': [\n        'CONSOLIDATEDBALANCESHEETS',\n        'CONSOLIDATEDBALANCESHEETSParenthetical'\n    ],\n    'income_statement': [\n        'CONSOLIDATEDSTATEMENTSOFINCOME',      # NVIDIA\n        'CONSOLIDATEDSTATEMENTSOFOPERATIONS'   # Apple\n    ],\n    'cash_flow': ['CONSOLIDATEDSTATEMENTSOFCASHFLOWS'],\n    'comprehensive_income': ['CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME'],\n    'equity': ['CONSOLIDATEDSTATEMENTSOFSHAREHOLDERSEQUITY']\n}\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#proposed-common-framework-architecture","title":"Proposed Common Framework Architecture","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#1-adaptive-r-file-discovery","title":"1. Adaptive R-File Discovery","text":"<pre><code>class StandardizedAttachmentMapper:\n    def __init__(self, filing):\n        self.filing = filing\n        self.r_file_map = self._build_r_file_map()\n\n    def _build_r_file_map(self):\n        \"\"\"Build adaptive mapping based on content patterns\"\"\"\n        attachments = self.filing.attachments\n        mapping = {}\n\n        # Find core statements using content analysis\n        for attachment in attachments:\n            if 'Cover Page' in attachment.description:\n                mapping['cover_page'] = attachment\n            elif 'STATEMENTS OF OPERATIONS' in attachment.description:\n                mapping['income_statement'] = attachment\n            elif 'STATEMENTS OF INCOME' in attachment.description:\n                mapping['income_statement'] = attachment\n            # ... continue pattern matching\n\n        return mapping\n\n    def get_lease_details(self):\n        \"\"\"Get all lease-related attachments\"\"\"\n        lease_files = []\n        for attachment in self.filing.attachments:\n            if re.search(r'Lease.*Details|Lease.*Schedule', attachment.description):\n                lease_files.append(attachment)\n        return lease_files\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#2-universal-business-section-access","title":"2. Universal Business Section Access","text":"<pre><code>class StandardizedBusinessSections:\n    def __init__(self, filing):\n        self.filing = filing\n        self.mapper = StandardizedAttachmentMapper(filing)\n\n    def get_lease_schedule(self):\n        \"\"\"Get lease payment schedule regardless of company\"\"\"\n        # Try common patterns\n        patterns = [\n            r'Future.*Lease.*Payment',\n            r'Lease.*Liability.*Maturities', \n            r'Minimum.*Lease.*Payment'\n        ]\n\n        for pattern in patterns:\n            matches = self._find_by_pattern(pattern)\n            if matches:\n                return matches[0]  # Return first match\n        return None\n\n    def get_stock_compensation_details(self):\n        \"\"\"Get detailed stock compensation data\"\"\"\n        patterns = [\n            r'Stock.*Compensation.*Expense.*Details',\n            r'Share.*Based.*Compensation.*Details',\n            r'Equity.*Awards.*Details'\n        ]\n\n        return self._find_by_patterns(patterns)\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#implementation-recommendations","title":"Implementation Recommendations","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#1-multi-tier-standardization-strategy","title":"1. Multi-Tier Standardization Strategy","text":"<p>Tier 1: Universal Elements (Implement First) - Core financial statements (R1-R7) - Standard XBRL statements - Common exhibits (21.1, 23.1, 31.1, 31.2, 32.1)</p> <p>Tier 2: Pattern-Based Elements (Implement Second) - Business section discovery using regex patterns - Common disclosure types (leases, stock compensation, segments) - Table vs Detail vs Narrative classification</p> <p>Tier 3: Company-Specific Elements (Handle as Exceptions) - Unique business combinations - Industry-specific disclosures - Non-standard segment definitions</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/#2-flexible-framework-design","title":"2. Flexible Framework Design","text":"<pre><code>class UniversalFilingParser:\n    def __init__(self, filing):\n        self.filing = filing\n        self.company_profile = self._detect_company_patterns()\n        self.standardizer = self._get_standardizer()\n\n    def _detect_company_patterns(self):\n        \"\"\"Detect company-specific patterns\"\"\"\n        # Analyze attachment descriptions, XBRL structure\n        # Return profile: 'nvidia_style', 'apple_style', 'generic'\n        pass\n\n    def _get_standardizer(self):\n        \"\"\"Return appropriate standardizer for detected pattern\"\"\"\n        if self.company_profile == 'nvidia_style':\n            return NvidiaStyleStandardizer(self.filing)\n        elif self.company_profile == 'apple_style':\n            return AppleStyleStandardizer(self.filing)\n        else:\n            return GenericStandardizer(self.filing)\n</code></pre>"},{"location":"xbrl-development/cross-company-standardization-analysis/#3-progressive-enhancement-strategy","title":"3. Progressive Enhancement Strategy","text":"<p>Phase 1: Implement core statement standardization (high confidence, immediate value) Phase 2: Add pattern-based business section discovery Phase 3: Build company-specific adapters as needed Phase 4: Add AI-powered content classification for edge cases</p>"},{"location":"xbrl-development/cross-company-standardization-analysis/#key-standardization-challenges","title":"Key Standardization Challenges","text":""},{"location":"xbrl-development/cross-company-standardization-analysis/#1-business-model-differences","title":"1. Business Model Differences","text":"<ul> <li>Apple: Product-focused revenue breakdown</li> <li>NVIDIA: Technology platform segmentation  </li> <li>Solution: Abstract common patterns, handle specifics via adapters</li> </ul>"},{"location":"xbrl-development/cross-company-standardization-analysis/#2-disclosure-granularity-variations","title":"2. Disclosure Granularity Variations","text":"<ul> <li>NVIDIA: 89 R-files, highly detailed</li> <li>Apple: 73 R-files, more consolidated</li> <li>Solution: Multi-level access APIs (summary + detail levels)</li> </ul>"},{"location":"xbrl-development/cross-company-standardization-analysis/#3-temporal-filing-format-evolution","title":"3. Temporal Filing Format Evolution","text":"<ul> <li>Companies change disclosure patterns over time</li> <li>SEC requirements evolve</li> <li>Solution: Version-aware standardization with fallback patterns</li> </ul>"},{"location":"xbrl-development/cross-company-standardization-analysis/#conclusion-and-next-steps","title":"Conclusion and Next Steps","text":"<p>The analysis reveals high standardization potential for core financial statements and basic business sections, with medium potential for advanced disclosures. The recommended approach is a multi-tier adaptive framework that:</p> <ol> <li>Standardizes common elements (80% of use cases)</li> <li>Pattern-matches business sections (15% of use cases)  </li> <li>Handles edge cases gracefully (5% of use cases)</li> </ol> <p>Immediate Implementation Priority: 1. Universal R-file mapping for R1-R9 2. Standard XBRL statement access 3. Pattern-based lease and stock compensation discovery 4. Generic business section classification framework</p> <p>This framework would provide consistent access to financial data while preserving the ability to access company-specific details when needed.</p>"},{"location":"xbrl-development/enhanced-statement-access-design/","title":"Enhanced Statement Access Design for Cross-Company Standardization","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#executive-summary","title":"Executive Summary","text":"<p>This design document outlines improvements to the XBRL statements system to enable standardized access across different companies' filing patterns. Based on analysis of NVIDIA vs Apple 10-K filings, the current system has limitations in handling naming variations and accessing detailed business sections. The proposed enhancements will provide universal statement resolution, business section discovery, and attachment integration while maintaining backward compatibility.</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#current-system-analysis","title":"Current System Analysis","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#existing-architecture-edgarxbrlstatementspy","title":"Existing Architecture (edgar/xbrl/statements.py)","text":"<p>Core Classes: - <code>Statement</code>: Individual statement wrapper with rendering and analysis - <code>Statements</code>: High-level interface for statement collections - <code>StitchedStatement</code>/<code>StitchedStatements</code>: Multi-period statement handling</p> <p>Current Strengths: - Well-structured OOP design - Rich console output with categorization - Period filtering and rendering capabilities - Basic statement type mapping via <code>statement_to_concepts</code> - Ratio calculation and trend analysis</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#identified-limitations","title":"Identified Limitations","text":"<ol> <li>Rigid Statement Type Mapping</li> <li>Hard-coded <code>statement_to_concepts</code> dictionary</li> <li>Fails on NVIDIA's \"CONSOLIDATEDSTATEMENTSOFINCOME\" vs Apple's \"CONSOLIDATEDSTATEMENTSOFOPERATIONS\"</li> <li> <p>No fuzzy matching for statement name variations</p> </li> <li> <p>Basic Indexing System</p> </li> <li>Simple string matching in <code>__getitem__</code> method</li> <li>Limited fallback logic when exact matches fail</li> <li> <p>No confidence scoring for multiple matches</p> </li> <li> <p>No Business Section Discovery</p> </li> <li>Cannot find detailed schedules like lease payment tables</li> <li>No pattern-based section identification</li> <li> <p>Missing connection between summary statements and detailed breakdowns</p> </li> <li> <p>Limited Pattern Recognition</p> </li> <li>No regex-based matching for statement variations</li> <li>Inflexible to company-specific naming conventions</li> <li> <p>Poor handling of parenthetical vs non-parenthetical statements</p> </li> <li> <p>Missing Attachment Integration</p> </li> <li>No connection to R-file detailed schedules</li> <li>Cannot access granular data from HTML attachments</li> <li>Missed opportunity for comprehensive financial analysis</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#proposed-design-improvements","title":"Proposed Design Improvements","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#1-universal-statement-type-resolution-system","title":"1. Universal Statement Type Resolution System","text":"<p>Objective: Handle cross-company variations in statement naming</p> <p>Design: Multi-tier pattern matching with confidence scoring</p> <pre><code>UNIVERSAL_STATEMENT_PATTERNS = {\n    \"IncomeStatement\": [\n        r\"CONSOLIDATEDSTATEMENTSOFINCOME\",        # NVIDIA pattern\n        r\"CONSOLIDATEDSTATEMENTSOFOPERATIONS\",    # Apple pattern\n        r\"STATEMENTSOFINCOME\",\n        r\"STATEMENTSOFOPERATIONS\",\n        r\"INCOMESTATEMENT\"\n    ],\n    \"BalanceSheet\": [\n        r\"CONSOLIDATEDBALANCESHEETS?\",\n        r\"BALANCESHEETS?\",\n        r\"STATEMENTOFFINANCIALPOSITION\"\n    ],\n    \"CashFlowStatement\": [\n        r\"CONSOLIDATEDSTATEMENTSOFCASHFLOWS?\",\n        r\"STATEMENTSOFCASHFLOWS?\",\n        r\"CASHFLOWSTATEMENTS?\"\n    ],\n    \"StatementOfEquity\": [\n        r\"CONSOLIDATEDSTATEMENTSOFSHAREHOLDERSEQUITY\",\n        r\"CONSOLIDATEDSTATEMENTSOFSTOCKHOLDERSEQUITY\",\n        r\"STATEMENTSOFSHAREHOLDERSEQUITY\",\n        r\"STATEMENTSOFSTOCKHOLDERSEQUITY\"\n    ],\n    \"ComprehensiveIncome\": [\n        r\"CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME\",\n        r\"STATEMENTSOFCOMPREHENSIVEINCOME\"\n    ]\n}\n</code></pre> <p>New Class: <code>StatementResolver</code> - Fuzzy matching with confidence scores - Multiple pattern matching strategies - Graceful fallback logic - Cross-reference validation using multiple criteria</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#2-business-section-discovery-system","title":"2. Business Section Discovery System","text":"<p>Objective: Enable discovery of detailed business sections across companies</p> <p>Design: Pattern-based section categorization with standardized access</p> <pre><code>BUSINESS_SECTION_PATTERNS = {\n    \"leases\": {\n        \"main\": [r\"Leases(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"Leases.*\\(Tables\\)\"],\n        \"payment_schedule\": [\n            r\"Lease.*(?:Schedule|Payment|Maturities).*Details\",\n            r\"Future.*Lease.*Payment.*Details\",\n            r\"Lease.*Liability.*Maturities.*Details\"\n        ],\n        \"narrative\": [r\"Lease.*Narrative.*Details\"],\n        \"rou_assets\": [r\"ROU.*Assets.*Lease.*Details\"]\n    },\n    \"stock_compensation\": {\n        \"main\": [r\"(?:Stock.?Based|Share.?Based)\\s*Compensation(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"(?:Stock.?Based|Share.?Based).*Compensation.*\\(Tables\\)\"],\n        \"expense_details\": [r\"(?:Stock.?Based|Share.?Based).*Compensation.*Expense.*Details\"],\n        \"award_details\": [\n            r\"(?:Stock.?Based|Share.?Based).*(?:Equity|Awards?).*Details\",\n            r\"Restricted.*Stock.*Unit.*Activity.*Details\"\n        ],\n        \"plan_details\": [r\"(?:Stock.?Based|Share.?Based).*(?:Incentive|Plans?).*Details\"]\n    },\n    \"segments\": {\n        \"main\": [r\"Segment\\s*Information(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"Segment.*Information.*\\(Tables\\)\"],\n        \"geographic\": [\n            r\"(?:Geographic|Region).*Details\",\n            r\"Revenue.*Region.*Details\",\n            r\"Long.?lived.*Assets.*Region.*Details\"\n        ],\n        \"reconciliation\": [r\".*Reconcil.*Segment.*Details\"],\n        \"reportable\": [r\"Reportable.*Segment.*Details\"]\n    },\n    \"debt\": {\n        \"main\": [r\"Debt(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"Debt.*\\(Tables\\)\"],\n        \"schedule\": [\n            r\"Debt.*(?:Schedule|Payment|Future).*Details\",\n            r\"Future.*Principal.*Payment.*Details\"\n        ],\n        \"term_debt\": [r\"Term\\s*Debt.*Details\"],\n        \"commercial_paper\": [r\"Commercial.*Paper.*Details\"]\n    },\n    \"income_taxes\": {\n        \"main\": [r\"Income\\s*Taxes(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"Income\\s*Taxes.*\\(Tables\\)\"],\n        \"reconciliation\": [r\"Income\\s*Tax.*Reconciliation.*Details\"],\n        \"deferred\": [r\"Deferred\\s*Tax.*Details\"],\n        \"components\": [r\"Components.*Income.*Tax.*Details\"],\n        \"unrecognized\": [r\"Unrecognized.*Tax.*Benefits.*Details\"]\n    },\n    \"financial_instruments\": {\n        \"main\": [r\"Financial\\s*Instruments(?!.*\\(Tables\\)|.*Details)\"],\n        \"tables\": [r\"Financial\\s*Instruments.*\\(Tables\\)\"],\n        \"fair_value\": [r\"Fair.*Value.*Financial.*Details\"],\n        \"derivatives\": [r\"Derivative.*Instruments.*Details\"],\n        \"marketable_securities\": [r\"Marketable.*Securities.*Details\"]\n    }\n}\n</code></pre> <p>New Methods: - <code>statements.get_lease_schedule()</code> \u2192 detailed lease payment schedules - <code>statements.get_stock_compensation_details()</code> \u2192 equity award breakdowns - <code>statements.get_segment_geographic_breakdown()</code> \u2192 regional revenue data - <code>statements.get_business_section(category, detail_type)</code> \u2192 generic section finder</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#3-enhanced-statement-categorization","title":"3. Enhanced Statement Categorization","text":"<p>Current: Basic 5-category system (statement, note, disclosure, document, other)</p> <p>Enhanced: Hierarchical categorization with business context</p> <pre><code>ENHANCED_CATEGORIES = {\n    'financial_statements': {\n        'core': ['BalanceSheet', 'IncomeStatement', 'CashFlowStatement'],\n        'supplementary': ['ComprehensiveIncome', 'StatementOfEquity'],\n        'parenthetical': ['BalanceSheetParenthetical', 'IncomeStatementParenthetical']\n    },\n    'business_disclosures': {\n        'operational': ['leases', 'stock_compensation', 'segments', 'revenue'],\n        'financial': ['debt', 'derivatives', 'fair_value', 'financial_instruments'],\n        'regulatory': ['income_taxes', 'commitments', 'contingencies'],\n        'strategic': ['business_combinations', 'goodwill', 'intangibles']\n    },\n    'supporting_schedules': {\n        'payment_schedules': ['lease_payments', 'debt_maturities', 'future_commitments'],\n        'detailed_breakdowns': ['segment_details', 'geographic_revenue', 'product_revenue'],\n        'reconciliations': ['tax_reconciliation', 'segment_reconciliation', 'eps_reconciliation']\n    }\n}\n</code></pre>"},{"location":"xbrl-development/enhanced-statement-access-design/#4-smart-statement-resolution-engine","title":"4. Smart Statement Resolution Engine","text":"<p>New Class: <code>StatementResolver</code></p> <pre><code>class StatementResolver:\n    def resolve_statement_type(self, statement_name: str) -&gt; ResolvedStatement:\n        \"\"\"Resolve statement with confidence scoring and multiple matches\"\"\"\n\n    def find_best_match(self, patterns: List[str], candidates: List[str]) -&gt; MatchResult:\n        \"\"\"Find best pattern match with confidence score\"\"\"\n\n    def cross_validate_match(self, resolved_statement: ResolvedStatement) -&gt; bool:\n        \"\"\"Validate match using multiple criteria (concepts, structure, etc.)\"\"\"\n\n    def get_fallback_options(self, failed_match: str) -&gt; List[ResolvedStatement]:\n        \"\"\"Provide alternative matches when primary resolution fails\"\"\"\n</code></pre> <p>Features: - Fuzzy string matching for typos and variations - Confidence scoring (0.0 to 1.0) for ranking matches - Multiple validation criteria (name, concepts, structure) - Graceful degradation with suggested alternatives - Learning capability to improve matching over time</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#5-attachment-integration-framework","title":"5. Attachment Integration Framework","text":"<p>Objective: Connect XBRL statements with detailed attachment schedules</p> <p>Design: Bidirectional linking between statements and attachments</p> <pre><code>class StatementWithAttachments(Statement):\n    def get_supporting_attachments(self) -&gt; List[Attachment]:\n        \"\"\"Find R-files that provide detailed breakdowns for this statement\"\"\"\n\n    def get_detailed_schedules(self) -&gt; Dict[str, Attachment]:\n        \"\"\"Get specific detailed schedules (payment schedules, breakdowns, etc.)\"\"\"\n\n    def get_lease_payment_schedule(self) -&gt; Optional[Attachment]:\n        \"\"\"Get detailed lease payment schedule from attachments\"\"\"\n\n    def get_stock_compensation_breakdown(self) -&gt; Optional[Attachment]:\n        \"\"\"Get detailed equity award information from attachments\"\"\"\n\n    def get_segment_geographic_data(self) -&gt; Optional[Attachment]:\n        \"\"\"Get geographic revenue breakdown from attachments\"\"\"\n\n    def get_reconciliation_schedules(self) -&gt; List[Attachment]:\n        \"\"\"Get reconciliation schedules related to this statement\"\"\"\n</code></pre> <p>Attachment Discovery Logic: - Pattern matching between XBRL statement names and R-file descriptions - Content analysis to identify supporting schedules - Cross-reference validation using common data elements - Hierarchical relationship mapping (summary \u2192 details)</p>"},{"location":"xbrl-development/enhanced-statement-access-design/#6-period-view-enhancement","title":"6. Period View Enhancement","text":"<p>Current: Basic period filtering Enhanced: Context-aware period selection</p> <pre><code>class SmartPeriodManager:\n    def get_optimal_periods(self, statement_type: str, context: str = \"quarterly\") -&gt; List[str]:\n        \"\"\"Return best periods based on statement type and analysis context\"\"\"\n\n    def align_periods_across_statements(self, statement_types: List[str]) -&gt; Dict[str, List[str]]:\n        \"\"\"Ensure consistent period alignment for multi-statement analysis\"\"\"\n\n    def detect_period_patterns(self, statements: List[Statement]) -&gt; PeriodPattern:\n        \"\"\"Analyze and categorize period patterns (quarterly, annual, interim)\"\"\"\n\n    def suggest_comparison_periods(self, base_period: str, statement_type: str) -&gt; List[str]:\n        \"\"\"Suggest meaningful comparison periods for trend analysis\"\"\"\n</code></pre>"},{"location":"xbrl-development/enhanced-statement-access-design/#new-api-design","title":"New API Design","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#enhanced-statements-class","title":"Enhanced Statements Class","text":"<pre><code>class Statements:\n    # Existing methods remain unchanged for backward compatibility\n\n    # Universal access with intelligent resolution\n    def get_statement(self, statement_identifier: str, confidence_threshold: float = 0.8) -&gt; Statement:\n        \"\"\"Get statement with fuzzy matching and confidence scoring\"\"\"\n\n    def find_statements(self, pattern: str) -&gt; List[Tuple[Statement, float]]:\n        \"\"\"Find all statements matching pattern with confidence scores\"\"\"\n\n    # Business section discovery\n    def get_lease_details(self) -&gt; BusinessSectionGroup:\n        \"\"\"Get all lease-related sections organized by detail level\"\"\"\n\n    def get_lease_payment_schedule(self) -&gt; Optional[Statement]:\n        \"\"\"Get specific lease payment schedule section\"\"\"\n\n    def get_stock_compensation_breakdown(self) -&gt; BusinessSectionGroup:\n        \"\"\"Get detailed stock compensation data\"\"\"\n\n    def get_segment_analysis(self) -&gt; BusinessSectionGroup:\n        \"\"\"Get comprehensive segment information\"\"\"\n\n    def get_business_section(self, category: str, detail_type: str = None) -&gt; BusinessSectionGroup:\n        \"\"\"Generic business section finder with category and detail type\"\"\"\n\n    # Enhanced categorization\n    def get_operational_disclosures(self) -&gt; List[Statement]:\n        \"\"\"Get all operational business disclosures\"\"\"\n\n    def get_financial_disclosures(self) -&gt; List[Statement]:\n        \"\"\"Get all financial instrument and debt disclosures\"\"\"\n\n    def get_supporting_schedules(self) -&gt; List[Statement]:\n        \"\"\"Get all detailed supporting schedules\"\"\"\n\n    def get_by_business_category(self, category: str) -&gt; List[Statement]:\n        \"\"\"Get statements by enhanced business category\"\"\"\n\n    # Cross-statement analysis\n    def get_related_sections(self, statement_type: str) -&gt; List[Statement]:\n        \"\"\"Find all sections that provide supporting detail for a statement\"\"\"\n\n    def build_statement_hierarchy(self) -&gt; StatementHierarchy:\n        \"\"\"Build hierarchical view showing relationships between statements\"\"\"\n</code></pre>"},{"location":"xbrl-development/enhanced-statement-access-design/#enhanced-statement-class","title":"Enhanced Statement Class","text":"<pre><code>class Statement:\n    # Existing methods remain unchanged\n\n    # Enhanced data access\n    def get_concept_trends(self, concept_name: str, periods: int = 4) -&gt; Dict[str, List[float]]:\n        \"\"\"Get trends for specific concepts across periods\"\"\"\n\n    def find_related_disclosures(self) -&gt; List[Statement]:\n        \"\"\"Find disclosure sections that provide detail for this statement\"\"\"\n\n    def get_detailed_breakdowns(self) -&gt; List[Attachment]:\n        \"\"\"Get attachment files that provide detailed breakdowns\"\"\"\n\n    def get_supporting_attachments(self) -&gt; List[Attachment]:\n        \"\"\"Get all attachments that support this statement\"\"\"\n\n    # Smart period handling\n    def render_optimal_periods(self, context: str = \"quarterly\") -&gt; Any:\n        \"\"\"Render with automatically selected optimal periods\"\"\"\n\n    def align_with_statement(self, other_statement: Statement) -&gt; Tuple[Any, Any]:\n        \"\"\"Render both statements with aligned periods for comparison\"\"\"\n\n    # Enhanced validation and quality checks\n    def validate_completeness(self) -&gt; ValidationResult:\n        \"\"\"Check statement completeness and data quality\"\"\"\n\n    def suggest_related_analysis(self) -&gt; List[AnalysisSuggestion]:\n        \"\"\"Suggest related analyses based on statement type and available data\"\"\"\n</code></pre>"},{"location":"xbrl-development/enhanced-statement-access-design/#new-supporting-classes","title":"New Supporting Classes","text":"<pre><code>@dataclass\nclass ResolvedStatement:\n    statement: Statement\n    confidence: float\n    match_method: str\n    alternatives: List[Tuple[Statement, float]]\n\n@dataclass \nclass BusinessSectionGroup:\n    category: str\n    main_section: Statement\n    tables: List[Statement]\n    details: List[Statement]\n    schedules: List[Statement]\n    attachments: List[Attachment]\n\n@dataclass\nclass MatchResult:\n    matched_item: Any\n    confidence: float\n    match_type: str  # 'exact', 'fuzzy', 'pattern', 'fallback'\n    explanation: str\n\nclass StatementHierarchy:\n    def get_summary_statements(self) -&gt; List[Statement]\n    def get_supporting_details(self, statement: Statement) -&gt; List[Statement]\n    def get_detailed_schedules(self, statement: Statement) -&gt; List[Statement]\n    def visualize(self) -&gt; str  # ASCII tree representation\n</code></pre>"},{"location":"xbrl-development/enhanced-statement-access-design/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#phase-1-universal-statement-resolution-2-3-weeks","title":"Phase 1: Universal Statement Resolution (2-3 weeks)","text":"<p>Priority: High - Fixes immediate cross-company compatibility issues</p> <ol> <li>Add Pattern Matching System</li> <li>Define <code>UNIVERSAL_STATEMENT_PATTERNS</code> dictionary</li> <li>Implement regex-based matching logic</li> <li> <p>Add confidence scoring algorithm</p> </li> <li> <p>Enhance <code>__getitem__</code> Method</p> </li> <li>Add fuzzy matching fallback</li> <li>Implement confidence thresholding</li> <li> <p>Provide alternative suggestions for failed matches</p> </li> <li> <p>Create <code>StatementResolver</code> Class</p> </li> <li>Centralize resolution logic</li> <li>Add cross-validation methods</li> <li> <p>Implement match explanation system</p> </li> <li> <p>Backward Compatibility</p> </li> <li>Ensure existing code continues to work</li> <li>Add deprecation warnings for old patterns</li> <li>Provide migration guide</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#phase-2-business-section-discovery-3-4-weeks","title":"Phase 2: Business Section Discovery (3-4 weeks)","text":"<p>Priority: High - Enables access to detailed financial data</p> <ol> <li>Define Business Section Patterns</li> <li>Create <code>BUSINESS_SECTION_PATTERNS</code> dictionary</li> <li>Test patterns against NVIDIA and Apple filings</li> <li> <p>Validate pattern coverage across multiple companies</p> </li> <li> <p>Implement Section Discovery Engine</p> </li> <li>Create <code>BusinessSectionGroup</code> class</li> <li>Implement pattern matching logic</li> <li> <p>Add section relationship mapping</p> </li> <li> <p>Add Convenience Methods</p> </li> <li><code>get_lease_schedule()</code>, <code>get_stock_compensation_details()</code></li> <li>Generic <code>get_business_section()</code> method</li> <li> <p>Section-specific rendering and analysis</p> </li> <li> <p>Testing and Validation</p> </li> <li>Test against multiple company filings</li> <li>Validate data accuracy and completeness</li> <li>Performance optimization for large statement sets</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#phase-3-enhanced-categorization-2-3-weeks","title":"Phase 3: Enhanced Categorization (2-3 weeks)","text":"<p>Priority: Medium - Improves usability and organization</p> <ol> <li>Implement Enhanced Category System</li> <li>Define <code>ENHANCED_CATEGORIES</code> hierarchy</li> <li>Create category detection logic</li> <li> <p>Add business context awareness</p> </li> <li> <p>Add Category-Based Access Methods</p> </li> <li><code>get_operational_disclosures()</code>, <code>get_financial_disclosures()</code></li> <li>Category-filtered display methods</li> <li> <p>Smart grouping and organization</p> </li> <li> <p>Improve Display and Navigation</p> </li> <li>Enhanced Rich console output</li> <li>Hierarchical statement trees</li> <li>Interactive navigation helpers</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#phase-4-attachment-integration-4-5-weeks","title":"Phase 4: Attachment Integration (4-5 weeks)","text":"<p>Priority: Medium - Provides comprehensive data access</p> <ol> <li>Design Attachment-Statement Linking</li> <li>Create attachment discovery algorithms</li> <li>Implement relationship mapping</li> <li> <p>Add content validation logic</p> </li> <li> <p>Implement <code>StatementWithAttachments</code></p> </li> <li>Add attachment access methods</li> <li>Create unified data views</li> <li> <p>Implement cross-reference validation</p> </li> <li> <p>Add Detailed Schedule Access</p> </li> <li>Specific methods for common schedules</li> <li>Generic attachment discovery</li> <li> <p>Data consistency validation</p> </li> <li> <p>Integration Testing</p> </li> <li>Test with multiple filing types</li> <li>Validate data accuracy</li> <li>Performance optimization</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#phase-5-period-management-enhancement-2-3-weeks","title":"Phase 5: Period Management Enhancement (2-3 weeks)","text":"<p>Priority: Low - Nice-to-have for advanced analysis</p> <ol> <li>Implement <code>SmartPeriodManager</code></li> <li>Context-aware period selection</li> <li>Period alignment algorithms</li> <li> <p>Pattern detection and analysis</p> </li> <li> <p>Add Period Optimization</p> </li> <li>Optimal period selection for different analyses</li> <li>Automatic period alignment</li> <li> <p>Trend analysis enhancements</p> </li> <li> <p>Enhanced Rendering Options</p> </li> <li>Context-sensitive period views</li> <li>Comparative rendering</li> <li>Period-aware formatting</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#benefits-and-impact","title":"Benefits and Impact","text":""},{"location":"xbrl-development/enhanced-statement-access-design/#immediate-benefits","title":"Immediate Benefits","text":"<ol> <li>Cross-Company Compatibility: Single API works across NVIDIA, Apple, and other companies</li> <li>Enhanced Data Discovery: Easy access to detailed business sections and schedules</li> <li>Improved Usability: Intelligent resolution reduces user friction</li> <li>Better Error Handling: Confidence scoring and alternatives for failed matches</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#long-term-benefits","title":"Long-term Benefits","text":"<ol> <li>Scalability: Pattern-based approach adapts to new companies and filing variations</li> <li>Comprehensive Analysis: Integration with attachments provides complete financial picture</li> <li>Future-Proof Design: Flexible architecture accommodates SEC reporting changes</li> <li>Enhanced Analytics: Deeper data access enables more sophisticated financial analysis</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#backward-compatibility","title":"Backward Compatibility","text":"<ul> <li>All existing code continues to work unchanged</li> <li>Gradual migration path with deprecation warnings</li> <li>Enhanced functionality available through new methods</li> <li>No breaking changes to core APIs</li> </ul>"},{"location":"xbrl-development/enhanced-statement-access-design/#success-metrics","title":"Success Metrics","text":"<ol> <li>Coverage: Successfully handle 95%+ of S&amp;P 500 company statement variations</li> <li>Performance: Statement resolution within 100ms for 95th percentile</li> <li>Accuracy: 98%+ correct statement type identification with confidence &gt; 0.8</li> <li>Usability: 80% reduction in failed statement access attempts</li> <li>Adoption: New business section discovery methods used in 50%+ of financial analyses</li> </ol>"},{"location":"xbrl-development/enhanced-statement-access-design/#risk-mitigation","title":"Risk Mitigation","text":"<ol> <li>Performance Impact: Implement caching and lazy loading for pattern matching</li> <li>False Positives: Require minimum confidence thresholds and validation</li> <li>Complexity: Maintain simple primary APIs while adding advanced features</li> <li>Maintenance: Create automated tests against multiple company filings</li> <li>User Adoption: Provide comprehensive documentation and migration guides</li> </ol> <p>This design provides a robust foundation for standardized financial statement access across companies while maintaining the flexibility to handle unique variations and provide deep analytical capabilities.</p>"},{"location":"xbrl-development/xbrl-parser-design/","title":"High-Level Design for XBRL Parser for SEC Filings","text":""},{"location":"xbrl-development/xbrl-parser-design/#1-system-architecture-overview","title":"1. System Architecture Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2502  XBRL File      \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  XBRL Parser    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Data Model     \u2502\n\u2502  Collection     \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2502                 \u2502     \u2502                 \u2502     \u2502                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                        \u2502\n                                                        \u25bc\n                                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                              \u2502                 \u2502\n                                              \u2502  Statement      \u2502\n                                              \u2502  Generator      \u2502\n                                              \u2502                 \u2502\n                                              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"xbrl-development/xbrl-parser-design/#2-xbrl-file-parser-component","title":"2. XBRL File Parser Component","text":""},{"location":"xbrl-development/xbrl-parser-design/#21-parse-instance-document","title":"2.1 Parse Instance Document","text":"<ul> <li>Parse XML Structure: Use an XML parser to read the XBRL instance file</li> <li>Extract Entity Information: Company identifier, reporting period, etc.</li> <li>Extract Contexts:</li> <li>Map context IDs to their associated entity, period, and scenario/segment information</li> <li>Create a lookup table for period contexts (e.g., \"2023-12-31\", \"2023-01-01 to 2023-12-31\")</li> <li>Extract Facts: </li> <li>Each fact includes value, unit, decimals, context reference, and element reference</li> <li>Store facts in a collection mapped by element ID and context</li> <li>Extract Units: Create mapping of unit IDs to their actual units (USD, shares, etc.)</li> <li>Extract Footnotes: If present, extract and map them to facts</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#22-parse-taxonomy-schema-xsd","title":"2.2 Parse Taxonomy Schema (.xsd)","text":"<ul> <li>Parse Element Declarations:</li> <li>Extract element IDs, names, data types (monetary, string, etc.)</li> <li>Identify period types (instant or duration)</li> <li>Identify balance types (debit or credit)</li> <li>Identify abstract elements (cannot contain values)</li> <li>Map Namespaces: Create namespace mappings for resolving element references</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#23-parse-presentation-linkbase","title":"2.3 Parse Presentation Linkbase","text":"<ul> <li>Create Hierarchical Structure:</li> <li>Parse parent-child relationships</li> <li>Maintain ordering information (order attribute)</li> <li>Group by extended link roles (ELRs) which define statement sections</li> <li>Capture Preferred Labels: Identify special label roles for presentation</li> <li>Build Presentation Tree: Create a tree structure for each statement/disclosure</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#24-parse-label-linkbase","title":"2.4 Parse Label Linkbase","text":"<ul> <li>Map Elements to Labels:</li> <li>Standard labels (default display)</li> <li>Period start/end labels</li> <li>Total labels</li> <li>Negated labels</li> <li>Terse labels</li> <li>Documentation labels (definitions)</li> <li>Handle Multiple Languages: Support labels in different languages if present</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#25-parse-calculation-linkbase","title":"2.5 Parse Calculation Linkbase","text":"<ul> <li>Extract Calculation Relationships:</li> <li>Parent-child calculation hierarchies</li> <li>Weights (+1/-1) for addition/subtraction</li> <li>Group by extended link roles</li> <li>Build Calculation Trees: Create calculation trees for validation and display</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#26-parse-definition-linkbase","title":"2.6 Parse Definition Linkbase","text":"<ul> <li>Parse Dimensional Relationships:</li> <li>Hypercubes (tables)</li> <li>Dimensions (axes)</li> <li>Domains and domain members</li> <li>Default members</li> <li>Build Dimensional Structure: Create dimensional structure for complex tables</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#3-data-model-construction","title":"3. Data Model Construction","text":""},{"location":"xbrl-development/xbrl-parser-design/#31-core-data-structures","title":"3.1 Core Data Structures","text":"<ul> <li> <p>Element Catalog:   <code>{     \"elementId\": {       \"name\": string,       \"dataType\": string,       \"periodType\": \"instant\"|\"duration\",       \"balance\": \"debit\"|\"credit\"|null,       \"abstract\": boolean,       \"labels\": {         \"standard\": string,         \"periodStart\": string,         \"periodEnd\": string,         \"negated\": string,         \"documentation\": string,         ...       }     }   }</code></p> </li> <li> <p>Context Registry:   <code>{     \"contextId\": {       \"entity\": {         \"identifier\": string,         \"scheme\": string       },       \"period\": {         \"type\": \"instant\"|\"duration\",         \"instant\": date|null,         \"startDate\": date|null,         \"endDate\": date|null       },       \"dimensions\": {         \"dimensionName\": \"memberName\",         ...       }     }   }</code></p> </li> <li> <p>Fact Database:   <code>{     \"elementId_contextId\": {       \"value\": string,       \"decimals\": number|\"INF\",       \"unitRef\": string,       \"footnotes\": [string]     }   }</code></p> </li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#32-relationship-structures","title":"3.2 Relationship Structures","text":"<ul> <li> <p>Presentation Hierarchy:   <code>{     \"roleUri\": {       \"title\": string,       \"root\": {         \"elementId\": string,         \"children\": [           {             \"elementId\": string,             \"preferredLabel\": string,             \"order\": number,             \"children\": [...]           }         ]       }     }   }</code></p> </li> <li> <p>Calculation Network:   <code>{     \"roleUri\": {       \"title\": string,       \"calculations\": [         {           \"parent\": \"elementId\",           \"children\": [             {               \"elementId\": string,               \"weight\": 1|-1,               \"order\": number             }           ]         }       ]     }   }</code></p> </li> <li> <p>Dimensional Structure:   <code>{     \"roleUri\": {       \"tables\": [         {           \"tableId\": string,           \"axes\": [             {               \"axisId\": string,               \"domain\": string,               \"members\": [string],               \"defaultMember\": string             }           ],           \"lineItems\": [string]         }       ]     }   }</code></p> </li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#4-statement-construction-process","title":"4. Statement Construction Process","text":""},{"location":"xbrl-development/xbrl-parser-design/#41-identify-statement-structure","title":"4.1 Identify Statement Structure","text":"<ul> <li>Locate Appropriate Presentation Network:</li> <li>Find presentation role URIs that correspond to desired statement</li> <li>For example: \"http://xbrl.abc.com/role/StatementOfFinancialPosition\" for balance sheet</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#42-select-time-period","title":"4.2 Select Time Period","text":"<ul> <li>Identify Relevant Contexts:</li> <li>For balance sheet: find contexts with instant periods for desired dates</li> <li>For income statement: find contexts with duration periods for desired date ranges</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#43-traverse-presentation-hierarchy","title":"4.3 Traverse Presentation Hierarchy","text":"<ul> <li>Walk the Presentation Tree:</li> <li>Start at the root element of the relevant presentation network</li> <li>Process each element in the tree according to its presentation order</li> <li>Handle abstract elements as headers/sections</li> <li>Apply preferred labels (e.g., negated, period start/end, total)</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#44-retrieve-facts-for-elements","title":"4.4 Retrieve Facts for Elements","text":"<ul> <li>Map Elements to Facts:</li> <li>For each non-abstract element in the presentation hierarchy</li> <li>Lookup facts using element ID and relevant context ID</li> <li>Apply appropriate unit and decimal formatting</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#45-apply-dimensional-filters","title":"4.5 Apply Dimensional Filters","text":"<ul> <li>Handle Dimension-Qualified Facts:</li> <li>For tables with dimensions (axes and members)</li> <li>Filter facts by dimensional qualifiers</li> <li>Group related dimensional facts for display</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#46-format-statement","title":"4.6 Format Statement","text":"<ul> <li>Apply Styling and Indentation:</li> <li>Use presentation hierarchy to determine indentation levels</li> <li>Format numeric values based on decimals attribute</li> <li>Apply appropriate signage (based on balance type and negated labels)</li> <li>Add totals and subtotals as indicated by calculation relationships</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#5-specific-example-reconstructing-a-balance-sheet","title":"5. Specific Example: Reconstructing a Balance Sheet","text":""},{"location":"xbrl-development/xbrl-parser-design/#51-identify-balance-sheet-network","title":"5.1 Identify Balance Sheet Network","text":"<ul> <li>Find presentation linkbase role that represents balance sheet</li> <li>Example: \"http://xbrl.abc.com/role/BalanceSheet\"</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#52-select-contexts-for-desired-dates","title":"5.2 Select Contexts for Desired Dates","text":"<ul> <li>Filter contexts to find those with:</li> <li>Period type = \"instant\"</li> <li>Period end date = desired reporting date (e.g., \"2023-12-31\")</li> <li>No dimension qualifiers (for base statement)</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#53-build-statement-structure","title":"5.3 Build Statement Structure","text":"<pre><code>Statement of Financial Position\n\u2502\n\u251c\u2500\u2500 Assets [Abstract]\n\u2502   \u251c\u2500\u2500 Current Assets [Abstract]\n\u2502   \u2502   \u251c\u2500\u2500 Cash and Cash Equivalents\n\u2502   \u2502   \u251c\u2500\u2500 Accounts Receivable, Net\n\u2502   \u2502   \u251c\u2500\u2500 Inventory, Net\n\u2502   \u2502   \u2514\u2500\u2500 Total Current Assets\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 Non-current Assets [Abstract]\n\u2502   \u2502   \u251c\u2500\u2500 Property, Plant and Equipment, Net\n\u2502   \u2502   \u251c\u2500\u2500 Goodwill\n\u2502   \u2502   \u2514\u2500\u2500 Total Non-current Assets\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 Total Assets\n\u2502\n\u2514\u2500\u2500 Liabilities and Stockholders' Equity [Abstract]\n    \u251c\u2500\u2500 Liabilities [Abstract]\n    \u2502   \u251c\u2500\u2500 Current Liabilities [Abstract]\n    \u2502   \u2502   \u251c\u2500\u2500 Accounts Payable\n    \u2502   \u2502   \u251c\u2500\u2500 Short-term Debt\n    \u2502   \u2502   \u2514\u2500\u2500 Total Current Liabilities\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 Non-current Liabilities [Abstract]\n    \u2502   \u2502   \u251c\u2500\u2500 Long-term Debt\n    \u2502   \u2502   \u251c\u2500\u2500 Deferred Tax Liabilities\n    \u2502   \u2502   \u2514\u2500\u2500 Total Non-current Liabilities\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 Total Liabilities\n    \u2502\n    \u251c\u2500\u2500 Stockholders' Equity [Abstract]\n    \u2502   \u251c\u2500\u2500 Common Stock\n    \u2502   \u251c\u2500\u2500 Additional Paid-in Capital\n    \u2502   \u251c\u2500\u2500 Retained Earnings\n    \u2502   \u2514\u2500\u2500 Total Stockholders' Equity\n    \u2502\n    \u2514\u2500\u2500 Total Liabilities and Stockholders' Equity\n</code></pre>"},{"location":"xbrl-development/xbrl-parser-design/#54-populate-statement-with-facts","title":"5.4 Populate Statement with Facts","text":"<ul> <li>For each non-abstract element in the hierarchy:</li> <li>Look up element in Element Catalog to get its properties</li> <li>Find the fact in the Fact Database using element ID and context ID</li> <li>Format value using unit and decimals information</li> <li>Apply appropriate sign based on element's balance type</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#55-validate-totals-using-calculation-relationships","title":"5.5 Validate Totals Using Calculation Relationships","text":"<ul> <li>Use calculation relationships to check that totals match their components</li> <li>Highlight any calculation inconsistencies</li> </ul>"},{"location":"xbrl-development/xbrl-parser-design/#56-generate-final-statement","title":"5.6 Generate Final Statement","text":"<ul> <li>Output formatted balance sheet with:</li> <li>Proper hierarchy/indentation</li> <li>Correctly formatted values</li> <li>Column(s) for each period</li> <li>Appropriate signage</li> <li>Computed subtotals and totals</li> </ul>"}]}